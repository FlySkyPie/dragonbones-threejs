var bl=Object.defineProperty;var Sl=(r,t,e)=>t in r?bl(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e;var Jt=(r,t,e)=>(Sl(r,typeof t!="symbol"?t+"":t,e),e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))i(n);new MutationObserver(n=>{for(const s of n)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function e(n){const s={};return n.integrity&&(s.integrity=n.integrity),n.referrerpolicy&&(s.referrerPolicy=n.referrerpolicy),n.crossorigin==="use-credentials"?s.credentials="include":n.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(n){if(n.ep)return;n.ep=!0;const s=e(n);fetch(n.href,s)}})();/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const Ys="148",rn={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},sn={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},Ml=0,sa=1,wl=2,Fo=1,Tl=2,Xn=3,ji=0,je=1,nr=2,ur=3,Ti=0,An=1,Fs=2,aa=3,oa=4,Al=5,wn=100,El=101,Dl=102,la=103,ha=104,Cl=200,Pl=201,Il=202,Rl=203,Bo=204,No=205,Ll=206,Ol=207,Fl=208,Bl=209,Nl=210,Ul=0,zl=1,kl=2,Bs=3,Vl=4,Gl=5,Wl=6,Hl=7,Uo=0,Xl=1,Yl=2,pi=0,jl=1,ql=2,Zl=3,Kl=4,$l=5,zo=300,Dn=301,Cn=302,Ns=303,Us=304,Vr=306,Jn=1e3,Qe=1001,zs=1002,Ee=1003,ua=1004,Qr=1005,We=1006,Jl=1007,Qn=1008,qi=1009,Ql=1010,th=1011,ko=1012,eh=1013,ki=1014,Vi=1015,tr=1016,ih=1017,nh=1018,En=1020,rh=1021,sh=1022,ti=1023,ah=1024,oh=1025,Wi=1026,Pn=1027,lh=1028,hh=1029,uh=1030,ch=1031,fh=1033,ts=33776,es=33777,is=33778,ns=33779,ca=35840,fa=35841,da=35842,ma=35843,dh=36196,pa=37492,_a=37496,ga=37808,ya=37809,xa=37810,va=37811,ba=37812,Sa=37813,Ma=37814,wa=37815,Ta=37816,Aa=37817,Ea=37818,Da=37819,Ca=37820,Pa=37821,Ia=36492,Zi=3e3,qt=3001,mh=3200,ph=3201,_h=0,gh=1,ii="srgb",er="srgb-linear",rs=7680,yh=519,ks=35044,Ra="300 es",Vs=1035;class nn{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const i=this._listeners;i[t]===void 0&&(i[t]=[]),i[t].indexOf(e)===-1&&i[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const i=this._listeners;return i[t]!==void 0&&i[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const n=this._listeners[t];if(n!==void 0){const s=n.indexOf(e);s!==-1&&n.splice(s,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const i=this._listeners[t.type];if(i!==void 0){t.target=this;const n=i.slice(0);for(let s=0,o=n.length;s<o;s++)n[s].call(this,t);t.target=null}}}const ve=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],ss=Math.PI/180,La=180/Math.PI;function Ai(){const r=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,i=Math.random()*4294967295|0;return(ve[r&255]+ve[r>>8&255]+ve[r>>16&255]+ve[r>>24&255]+"-"+ve[t&255]+ve[t>>8&255]+"-"+ve[t>>16&15|64]+ve[t>>24&255]+"-"+ve[e&63|128]+ve[e>>8&255]+"-"+ve[e>>16&255]+ve[e>>24&255]+ve[i&255]+ve[i>>8&255]+ve[i>>16&255]+ve[i>>24&255]).toLowerCase()}function Ie(r,t,e){return Math.max(t,Math.min(e,r))}function xh(r,t){return(r%t+t)%t}function as(r,t,e){return(1-e)*r+e*t}function Oa(r){return(r&r-1)===0&&r!==0}function Gs(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function Si(r,t){switch(t.constructor){case Float32Array:return r;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function jt(r,t){switch(t.constructor){case Float32Array:return r;case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}class Et{constructor(t=0,e=0){Et.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,i=this.y,n=t.elements;return this.x=n[0]*e+n[3]*i+n[6],this.y=n[1]*e+n[4]*i+n[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y;return e*e+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const i=Math.cos(e),n=Math.sin(e),s=this.x-t.x,o=this.y-t.y;return this.x=s*i-o*n+t.x,this.y=s*n+o*i+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class ze{constructor(){ze.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1]}set(t,e,i,n,s,o,a,l,h){const u=this.elements;return u[0]=t,u[1]=n,u[2]=a,u[3]=e,u[4]=s,u[5]=l,u[6]=i,u[7]=o,u[8]=h,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this}extractBasis(t,e,i){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,n=e.elements,s=this.elements,o=i[0],a=i[3],l=i[6],h=i[1],u=i[4],c=i[7],f=i[2],_=i[5],y=i[8],p=n[0],m=n[3],x=n[6],M=n[1],b=n[4],S=n[7],w=n[2],E=n[5],R=n[8];return s[0]=o*p+a*M+l*w,s[3]=o*m+a*b+l*E,s[6]=o*x+a*S+l*R,s[1]=h*p+u*M+c*w,s[4]=h*m+u*b+c*E,s[7]=h*x+u*S+c*R,s[2]=f*p+_*M+y*w,s[5]=f*m+_*b+y*E,s[8]=f*x+_*S+y*R,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[1],n=t[2],s=t[3],o=t[4],a=t[5],l=t[6],h=t[7],u=t[8];return e*o*u-e*a*h-i*s*u+i*a*l+n*s*h-n*o*l}invert(){const t=this.elements,e=t[0],i=t[1],n=t[2],s=t[3],o=t[4],a=t[5],l=t[6],h=t[7],u=t[8],c=u*o-a*h,f=a*l-u*s,_=h*s-o*l,y=e*c+i*f+n*_;if(y===0)return this.set(0,0,0,0,0,0,0,0,0);const p=1/y;return t[0]=c*p,t[1]=(n*h-u*i)*p,t[2]=(a*i-n*o)*p,t[3]=f*p,t[4]=(u*e-n*l)*p,t[5]=(n*s-a*e)*p,t[6]=_*p,t[7]=(i*l-h*e)*p,t[8]=(o*e-i*s)*p,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,i,n,s,o,a){const l=Math.cos(s),h=Math.sin(s);return this.set(i*l,i*h,-i*(l*o+h*a)+o+t,-n*h,n*l,-n*(-h*o+l*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(os.makeScale(t,e)),this}rotate(t){return this.premultiply(os.makeRotation(-t)),this}translate(t,e){return this.premultiply(os.makeTranslation(t,e)),this}makeTranslation(t,e){return this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,i,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,i=t.elements;for(let n=0;n<9;n++)if(e[n]!==i[n])return!1;return!0}fromArray(t,e=0){for(let i=0;i<9;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const os=new ze;function Vo(r){for(let t=r.length-1;t>=0;--t)if(r[t]>=65535)return!0;return!1}function ir(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}function Hi(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function Rr(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}const ls={[ii]:{[er]:Hi},[er]:{[ii]:Rr}},Me={legacyMode:!0,get workingColorSpace(){return er},set workingColorSpace(r){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(r,t,e){if(this.legacyMode||t===e||!t||!e)return r;if(ls[t]&&ls[t][e]!==void 0){const i=ls[t][e];return r.r=i(r.r),r.g=i(r.g),r.b=i(r.b),r}throw new Error("Unsupported color space conversion.")},fromWorkingColorSpace:function(r,t){return this.convert(r,this.workingColorSpace,t)},toWorkingColorSpace:function(r,t){return this.convert(r,t,this.workingColorSpace)}},Go={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},le={r:0,g:0,b:0},qe={h:0,s:0,l:0},cr={h:0,s:0,l:0};function hs(r,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?r+(t-r)*6*e:e<1/2?t:e<2/3?r+(t-r)*6*(2/3-e):r}function fr(r,t){return t.r=r.r,t.g=r.g,t.b=r.b,t}class $t{constructor(t,e,i){return this.isColor=!0,this.r=1,this.g=1,this.b=1,e===void 0&&i===void 0?this.set(t):this.setRGB(t,e,i)}set(t){return t&&t.isColor?this.copy(t):typeof t=="number"?this.setHex(t):typeof t=="string"&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=ii){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,Me.toWorkingColorSpace(this,e),this}setRGB(t,e,i,n=Me.workingColorSpace){return this.r=t,this.g=e,this.b=i,Me.toWorkingColorSpace(this,n),this}setHSL(t,e,i,n=Me.workingColorSpace){if(t=xh(t,1),e=Ie(e,0,1),i=Ie(i,0,1),e===0)this.r=this.g=this.b=i;else{const s=i<=.5?i*(1+e):i+e-i*e,o=2*i-s;this.r=hs(o,s,t+1/3),this.g=hs(o,s,t),this.b=hs(o,s,t-1/3)}return Me.toWorkingColorSpace(this,n),this}setStyle(t,e=ii){function i(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let n;if(n=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let s;const o=n[1],a=n[2];switch(o){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(s[1],10))/255,this.g=Math.min(255,parseInt(s[2],10))/255,this.b=Math.min(255,parseInt(s[3],10))/255,Me.toWorkingColorSpace(this,e),i(s[4]),this;if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(s[1],10))/100,this.g=Math.min(100,parseInt(s[2],10))/100,this.b=Math.min(100,parseInt(s[3],10))/100,Me.toWorkingColorSpace(this,e),i(s[4]),this;break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){const l=parseFloat(s[1])/360,h=parseFloat(s[2])/100,u=parseFloat(s[3])/100;return i(s[4]),this.setHSL(l,h,u,e)}break}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(t)){const s=n[1],o=s.length;if(o===3)return this.r=parseInt(s.charAt(0)+s.charAt(0),16)/255,this.g=parseInt(s.charAt(1)+s.charAt(1),16)/255,this.b=parseInt(s.charAt(2)+s.charAt(2),16)/255,Me.toWorkingColorSpace(this,e),this;if(o===6)return this.r=parseInt(s.charAt(0)+s.charAt(1),16)/255,this.g=parseInt(s.charAt(2)+s.charAt(3),16)/255,this.b=parseInt(s.charAt(4)+s.charAt(5),16)/255,Me.toWorkingColorSpace(this,e),this}return t&&t.length>0?this.setColorName(t,e):this}setColorName(t,e=ii){const i=Go[t.toLowerCase()];return i!==void 0?this.setHex(i,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=Hi(t.r),this.g=Hi(t.g),this.b=Hi(t.b),this}copyLinearToSRGB(t){return this.r=Rr(t.r),this.g=Rr(t.g),this.b=Rr(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=ii){return Me.fromWorkingColorSpace(fr(this,le),t),Ie(le.r*255,0,255)<<16^Ie(le.g*255,0,255)<<8^Ie(le.b*255,0,255)<<0}getHexString(t=ii){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=Me.workingColorSpace){Me.fromWorkingColorSpace(fr(this,le),e);const i=le.r,n=le.g,s=le.b,o=Math.max(i,n,s),a=Math.min(i,n,s);let l,h;const u=(a+o)/2;if(a===o)l=0,h=0;else{const c=o-a;switch(h=u<=.5?c/(o+a):c/(2-o-a),o){case i:l=(n-s)/c+(n<s?6:0);break;case n:l=(s-i)/c+2;break;case s:l=(i-n)/c+4;break}l/=6}return t.h=l,t.s=h,t.l=u,t}getRGB(t,e=Me.workingColorSpace){return Me.fromWorkingColorSpace(fr(this,le),e),t.r=le.r,t.g=le.g,t.b=le.b,t}getStyle(t=ii){return Me.fromWorkingColorSpace(fr(this,le),t),t!==ii?`color(${t} ${le.r} ${le.g} ${le.b})`:`rgb(${le.r*255|0},${le.g*255|0},${le.b*255|0})`}offsetHSL(t,e,i){return this.getHSL(qe),qe.h+=t,qe.s+=e,qe.l+=i,this.setHSL(qe.h,qe.s,qe.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,i){return this.r=t.r+(e.r-t.r)*i,this.g=t.g+(e.g-t.g)*i,this.b=t.b+(e.b-t.b)*i,this}lerpHSL(t,e){this.getHSL(qe),t.getHSL(cr);const i=as(qe.h,cr.h,e),n=as(qe.s,cr.s,e),s=as(qe.l,cr.l,e);return this.setHSL(i,n,s),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}$t.NAMES=Go;let an;class Wo{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{an===void 0&&(an=ir("canvas")),an.width=t.width,an.height=t.height;const i=an.getContext("2d");t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,t.width,t.height),e=an}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=ir("canvas");e.width=t.width,e.height=t.height;const i=e.getContext("2d");i.drawImage(t,0,0,t.width,t.height);const n=i.getImageData(0,0,t.width,t.height),s=n.data;for(let o=0;o<s.length;o++)s[o]=Hi(s[o]/255)*255;return i.putImageData(n,0,0),e}else if(t.data){const e=t.data.slice(0);for(let i=0;i<e.length;i++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[i]=Math.floor(Hi(e[i]/255)*255):e[i]=Hi(e[i]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}class Ho{constructor(t=null){this.isSource=!0,this.uuid=Ai(),this.data=t,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const i={uuid:this.uuid,url:""},n=this.data;if(n!==null){let s;if(Array.isArray(n)){s=[];for(let o=0,a=n.length;o<a;o++)n[o].isDataTexture?s.push(us(n[o].image)):s.push(us(n[o]))}else s=us(n);i.url=s}return e||(t.images[this.uuid]=i),i}}function us(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?Wo.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let vh=0;class Le extends nn{constructor(t=Le.DEFAULT_IMAGE,e=Le.DEFAULT_MAPPING,i=Qe,n=Qe,s=We,o=Qn,a=ti,l=qi,h=Le.DEFAULT_ANISOTROPY,u=Zi){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:vh++}),this.uuid=Ai(),this.name="",this.source=new Ho(t),this.mipmaps=[],this.mapping=e,this.wrapS=i,this.wrapT=n,this.magFilter=s,this.minFilter=o,this.anisotropy=h,this.format=a,this.internalFormat=null,this.type=l,this.offset=new Et(0,0),this.repeat=new Et(1,1),this.center=new Et(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new ze,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=u,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(t){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const i={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(i.userData=this.userData),e||(t.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==zo)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case Jn:t.x=t.x-Math.floor(t.x);break;case Qe:t.x=t.x<0?0:1;break;case zs:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case Jn:t.y=t.y-Math.floor(t.y);break;case Qe:t.y=t.y<0?0:1;break;case zs:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}}Le.DEFAULT_IMAGE=null;Le.DEFAULT_MAPPING=zo;Le.DEFAULT_ANISOTROPY=1;class ye{constructor(t=0,e=0,i=0,n=1){ye.prototype.isVector4=!0,this.x=t,this.y=e,this.z=i,this.w=n}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,i,n){return this.x=t,this.y=e,this.z=i,this.w=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,i=this.y,n=this.z,s=this.w,o=t.elements;return this.x=o[0]*e+o[4]*i+o[8]*n+o[12]*s,this.y=o[1]*e+o[5]*i+o[9]*n+o[13]*s,this.z=o[2]*e+o[6]*i+o[10]*n+o[14]*s,this.w=o[3]*e+o[7]*i+o[11]*n+o[15]*s,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,i,n,s;const l=t.elements,h=l[0],u=l[4],c=l[8],f=l[1],_=l[5],y=l[9],p=l[2],m=l[6],x=l[10];if(Math.abs(u-f)<.01&&Math.abs(c-p)<.01&&Math.abs(y-m)<.01){if(Math.abs(u+f)<.1&&Math.abs(c+p)<.1&&Math.abs(y+m)<.1&&Math.abs(h+_+x-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const b=(h+1)/2,S=(_+1)/2,w=(x+1)/2,E=(u+f)/4,R=(c+p)/4,v=(y+m)/4;return b>S&&b>w?b<.01?(i=0,n=.707106781,s=.707106781):(i=Math.sqrt(b),n=E/i,s=R/i):S>w?S<.01?(i=.707106781,n=0,s=.707106781):(n=Math.sqrt(S),i=E/n,s=v/n):w<.01?(i=.707106781,n=.707106781,s=0):(s=Math.sqrt(w),i=R/s,n=v/s),this.set(i,n,s,e),this}let M=Math.sqrt((m-y)*(m-y)+(c-p)*(c-p)+(f-u)*(f-u));return Math.abs(M)<.001&&(M=1),this.x=(m-y)/M,this.y=(c-p)/M,this.z=(f-u)/M,this.w=Math.acos((h+_+x-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this.w=t.w+(e.w-t.w)*i,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class Ki extends nn{constructor(t=1,e=1,i={}){super(),this.isWebGLRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new ye(0,0,t,e),this.scissorTest=!1,this.viewport=new ye(0,0,t,e);const n={width:t,height:e,depth:1};this.texture=new Le(n,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.encoding),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=i.generateMipmaps!==void 0?i.generateMipmaps:!1,this.texture.internalFormat=i.internalFormat!==void 0?i.internalFormat:null,this.texture.minFilter=i.minFilter!==void 0?i.minFilter:We,this.depthBuffer=i.depthBuffer!==void 0?i.depthBuffer:!0,this.stencilBuffer=i.stencilBuffer!==void 0?i.stencilBuffer:!1,this.depthTexture=i.depthTexture!==void 0?i.depthTexture:null,this.samples=i.samples!==void 0?i.samples:0}setSize(t,e,i=1){(this.width!==t||this.height!==e||this.depth!==i)&&(this.width=t,this.height=e,this.depth=i,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=i,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new Ho(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Xo extends Le{constructor(t=null,e=1,i=1,n=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:i,depth:n},this.magFilter=Ee,this.minFilter=Ee,this.wrapR=Qe,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class bh extends Le{constructor(t=null,e=1,i=1,n=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:i,depth:n},this.magFilter=Ee,this.minFilter=Ee,this.wrapR=Qe,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class $i{constructor(t=0,e=0,i=0,n=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=i,this._w=n}static slerpFlat(t,e,i,n,s,o,a){let l=i[n+0],h=i[n+1],u=i[n+2],c=i[n+3];const f=s[o+0],_=s[o+1],y=s[o+2],p=s[o+3];if(a===0){t[e+0]=l,t[e+1]=h,t[e+2]=u,t[e+3]=c;return}if(a===1){t[e+0]=f,t[e+1]=_,t[e+2]=y,t[e+3]=p;return}if(c!==p||l!==f||h!==_||u!==y){let m=1-a;const x=l*f+h*_+u*y+c*p,M=x>=0?1:-1,b=1-x*x;if(b>Number.EPSILON){const w=Math.sqrt(b),E=Math.atan2(w,x*M);m=Math.sin(m*E)/w,a=Math.sin(a*E)/w}const S=a*M;if(l=l*m+f*S,h=h*m+_*S,u=u*m+y*S,c=c*m+p*S,m===1-a){const w=1/Math.sqrt(l*l+h*h+u*u+c*c);l*=w,h*=w,u*=w,c*=w}}t[e]=l,t[e+1]=h,t[e+2]=u,t[e+3]=c}static multiplyQuaternionsFlat(t,e,i,n,s,o){const a=i[n],l=i[n+1],h=i[n+2],u=i[n+3],c=s[o],f=s[o+1],_=s[o+2],y=s[o+3];return t[e]=a*y+u*c+l*_-h*f,t[e+1]=l*y+u*f+h*c-a*_,t[e+2]=h*y+u*_+a*f-l*c,t[e+3]=u*y-a*c-l*f-h*_,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,i,n){return this._x=t,this._y=e,this._z=i,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){const i=t._x,n=t._y,s=t._z,o=t._order,a=Math.cos,l=Math.sin,h=a(i/2),u=a(n/2),c=a(s/2),f=l(i/2),_=l(n/2),y=l(s/2);switch(o){case"XYZ":this._x=f*u*c+h*_*y,this._y=h*_*c-f*u*y,this._z=h*u*y+f*_*c,this._w=h*u*c-f*_*y;break;case"YXZ":this._x=f*u*c+h*_*y,this._y=h*_*c-f*u*y,this._z=h*u*y-f*_*c,this._w=h*u*c+f*_*y;break;case"ZXY":this._x=f*u*c-h*_*y,this._y=h*_*c+f*u*y,this._z=h*u*y+f*_*c,this._w=h*u*c-f*_*y;break;case"ZYX":this._x=f*u*c-h*_*y,this._y=h*_*c+f*u*y,this._z=h*u*y-f*_*c,this._w=h*u*c+f*_*y;break;case"YZX":this._x=f*u*c+h*_*y,this._y=h*_*c+f*u*y,this._z=h*u*y-f*_*c,this._w=h*u*c-f*_*y;break;case"XZY":this._x=f*u*c-h*_*y,this._y=h*_*c-f*u*y,this._z=h*u*y+f*_*c,this._w=h*u*c+f*_*y;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return e!==!1&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const i=e/2,n=Math.sin(i);return this._x=t.x*n,this._y=t.y*n,this._z=t.z*n,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,i=e[0],n=e[4],s=e[8],o=e[1],a=e[5],l=e[9],h=e[2],u=e[6],c=e[10],f=i+a+c;if(f>0){const _=.5/Math.sqrt(f+1);this._w=.25/_,this._x=(u-l)*_,this._y=(s-h)*_,this._z=(o-n)*_}else if(i>a&&i>c){const _=2*Math.sqrt(1+i-a-c);this._w=(u-l)/_,this._x=.25*_,this._y=(n+o)/_,this._z=(s+h)/_}else if(a>c){const _=2*Math.sqrt(1+a-i-c);this._w=(s-h)/_,this._x=(n+o)/_,this._y=.25*_,this._z=(l+u)/_}else{const _=2*Math.sqrt(1+c-i-a);this._w=(o-n)/_,this._x=(s+h)/_,this._y=(l+u)/_,this._z=.25*_}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let i=t.dot(e)+1;return i<Number.EPSILON?(i=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=i):(this._x=0,this._y=-t.z,this._z=t.y,this._w=i)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=i),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Ie(this.dot(t),-1,1)))}rotateTowards(t,e){const i=this.angleTo(t);if(i===0)return this;const n=Math.min(1,e/i);return this.slerp(t,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const i=t._x,n=t._y,s=t._z,o=t._w,a=e._x,l=e._y,h=e._z,u=e._w;return this._x=i*u+o*a+n*h-s*l,this._y=n*u+o*l+s*a-i*h,this._z=s*u+o*h+i*l-n*a,this._w=o*u-i*a-n*l-s*h,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const i=this._x,n=this._y,s=this._z,o=this._w;let a=o*t._w+i*t._x+n*t._y+s*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=o,this._x=i,this._y=n,this._z=s,this;const l=1-a*a;if(l<=Number.EPSILON){const _=1-e;return this._w=_*o+e*this._w,this._x=_*i+e*this._x,this._y=_*n+e*this._y,this._z=_*s+e*this._z,this.normalize(),this._onChangeCallback(),this}const h=Math.sqrt(l),u=Math.atan2(h,a),c=Math.sin((1-e)*u)/h,f=Math.sin(e*u)/h;return this._w=o*c+this._w*f,this._x=i*c+this._x*f,this._y=n*c+this._y*f,this._z=s*c+this._z*f,this._onChangeCallback(),this}slerpQuaternions(t,e,i){return this.copy(t).slerp(e,i)}random(){const t=Math.random(),e=Math.sqrt(1-t),i=Math.sqrt(t),n=2*Math.PI*Math.random(),s=2*Math.PI*Math.random();return this.set(e*Math.cos(n),i*Math.sin(s),i*Math.cos(s),e*Math.sin(n))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class G{constructor(t=0,e=0,i=0){G.prototype.isVector3=!0,this.x=t,this.y=e,this.z=i}set(t,e,i){return i===void 0&&(i=this.z),this.x=t,this.y=e,this.z=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(Fa.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(Fa.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,i=this.y,n=this.z,s=t.elements;return this.x=s[0]*e+s[3]*i+s[6]*n,this.y=s[1]*e+s[4]*i+s[7]*n,this.z=s[2]*e+s[5]*i+s[8]*n,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,i=this.y,n=this.z,s=t.elements,o=1/(s[3]*e+s[7]*i+s[11]*n+s[15]);return this.x=(s[0]*e+s[4]*i+s[8]*n+s[12])*o,this.y=(s[1]*e+s[5]*i+s[9]*n+s[13])*o,this.z=(s[2]*e+s[6]*i+s[10]*n+s[14])*o,this}applyQuaternion(t){const e=this.x,i=this.y,n=this.z,s=t.x,o=t.y,a=t.z,l=t.w,h=l*e+o*n-a*i,u=l*i+a*e-s*n,c=l*n+s*i-o*e,f=-s*e-o*i-a*n;return this.x=h*l+f*-s+u*-a-c*-o,this.y=u*l+f*-o+c*-s-h*-a,this.z=c*l+f*-a+h*-o-u*-s,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,i=this.y,n=this.z,s=t.elements;return this.x=s[0]*e+s[4]*i+s[8]*n,this.y=s[1]*e+s[5]*i+s[9]*n,this.z=s[2]*e+s[6]*i+s[10]*n,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const i=t.x,n=t.y,s=t.z,o=e.x,a=e.y,l=e.z;return this.x=n*l-s*a,this.y=s*o-i*l,this.z=i*a-n*o,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const i=t.dot(this)/e;return this.copy(t).multiplyScalar(i)}projectOnPlane(t){return cs.copy(this).projectOnVector(t),this.sub(cs)}reflect(t){return this.sub(cs.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const i=this.dot(t)/e;return Math.acos(Ie(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y,n=this.z-t.z;return e*e+i*i+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,i){const n=Math.sin(e)*t;return this.x=n*Math.sin(i),this.y=Math.cos(e)*t,this.z=n*Math.cos(i),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,i){return this.x=t*Math.sin(e),this.y=i,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),i=this.setFromMatrixColumn(t,1).length(),n=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=i,this.z=n,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=(Math.random()-.5)*2,e=Math.random()*Math.PI*2,i=Math.sqrt(1-t**2);return this.x=i*Math.cos(e),this.y=i*Math.sin(e),this.z=t,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const cs=new G,Fa=new $i;class rr{constructor(t=new G(1/0,1/0,1/0),e=new G(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,i=1/0,n=1/0,s=-1/0,o=-1/0,a=-1/0;for(let l=0,h=t.length;l<h;l+=3){const u=t[l],c=t[l+1],f=t[l+2];u<e&&(e=u),c<i&&(i=c),f<n&&(n=f),u>s&&(s=u),c>o&&(o=c),f>a&&(a=f)}return this.min.set(e,i,n),this.max.set(s,o,a),this}setFromBufferAttribute(t){let e=1/0,i=1/0,n=1/0,s=-1/0,o=-1/0,a=-1/0;for(let l=0,h=t.count;l<h;l++){const u=t.getX(l),c=t.getY(l),f=t.getZ(l);u<e&&(e=u),c<i&&(i=c),f<n&&(n=f),u>s&&(s=u),c>o&&(o=c),f>a&&(a=f)}return this.min.set(e,i,n),this.max.set(s,o,a),this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=Ii.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const i=t.geometry;if(i!==void 0)if(e&&i.attributes!=null&&i.attributes.position!==void 0){const s=i.attributes.position;for(let o=0,a=s.count;o<a;o++)Ii.fromBufferAttribute(s,o).applyMatrix4(t.matrixWorld),this.expandByPoint(Ii)}else i.boundingBox===null&&i.computeBoundingBox(),fs.copy(i.boundingBox),fs.applyMatrix4(t.matrixWorld),this.union(fs);const n=t.children;for(let s=0,o=n.length;s<o;s++)this.expandByObject(n[s],e);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,Ii),Ii.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Fn),dr.subVectors(this.max,Fn),on.subVectors(t.a,Fn),ln.subVectors(t.b,Fn),hn.subVectors(t.c,Fn),gi.subVectors(ln,on),yi.subVectors(hn,ln),Ri.subVectors(on,hn);let e=[0,-gi.z,gi.y,0,-yi.z,yi.y,0,-Ri.z,Ri.y,gi.z,0,-gi.x,yi.z,0,-yi.x,Ri.z,0,-Ri.x,-gi.y,gi.x,0,-yi.y,yi.x,0,-Ri.y,Ri.x,0];return!ds(e,on,ln,hn,dr)||(e=[1,0,0,0,1,0,0,0,1],!ds(e,on,ln,hn,dr))?!1:(mr.crossVectors(gi,yi),e=[mr.x,mr.y,mr.z],ds(e,on,ln,hn,dr))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return Ii.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return this.getCenter(t.center),t.radius=this.getSize(Ii).length()*.5,t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(li[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),li[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),li[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),li[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),li[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),li[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),li[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),li[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(li),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const li=[new G,new G,new G,new G,new G,new G,new G,new G],Ii=new G,fs=new rr,on=new G,ln=new G,hn=new G,gi=new G,yi=new G,Ri=new G,Fn=new G,dr=new G,mr=new G,Li=new G;function ds(r,t,e,i,n){for(let s=0,o=r.length-3;s<=o;s+=3){Li.fromArray(r,s);const a=n.x*Math.abs(Li.x)+n.y*Math.abs(Li.y)+n.z*Math.abs(Li.z),l=t.dot(Li),h=e.dot(Li),u=i.dot(Li);if(Math.max(-Math.max(l,h,u),Math.min(l,h,u))>a)return!1}return!0}const Sh=new rr,Bn=new G,ms=new G;class js{constructor(t=new G,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const i=this.center;e!==void 0?i.copy(e):Sh.setFromPoints(t).getCenter(i);let n=0;for(let s=0,o=t.length;s<o;s++)n=Math.max(n,i.distanceToSquared(t[s]));return this.radius=Math.sqrt(n),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const i=this.center.distanceToSquared(t);return e.copy(t),i>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;Bn.subVectors(t,this.center);const e=Bn.lengthSq();if(e>this.radius*this.radius){const i=Math.sqrt(e),n=(i-this.radius)*.5;this.center.addScaledVector(Bn,n/i),this.radius+=n}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(ms.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(Bn.copy(t.center).add(ms)),this.expandByPoint(Bn.copy(t.center).sub(ms))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}}const hi=new G,ps=new G,pr=new G,xi=new G,_s=new G,_r=new G,gs=new G;class Mh{constructor(t=new G,e=new G(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,hi)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const i=e.dot(this.direction);return i<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(i).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=hi.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(hi.copy(this.direction).multiplyScalar(e).add(this.origin),hi.distanceToSquared(t))}distanceSqToSegment(t,e,i,n){ps.copy(t).add(e).multiplyScalar(.5),pr.copy(e).sub(t).normalize(),xi.copy(this.origin).sub(ps);const s=t.distanceTo(e)*.5,o=-this.direction.dot(pr),a=xi.dot(this.direction),l=-xi.dot(pr),h=xi.lengthSq(),u=Math.abs(1-o*o);let c,f,_,y;if(u>0)if(c=o*l-a,f=o*a-l,y=s*u,c>=0)if(f>=-y)if(f<=y){const p=1/u;c*=p,f*=p,_=c*(c+o*f+2*a)+f*(o*c+f+2*l)+h}else f=s,c=Math.max(0,-(o*f+a)),_=-c*c+f*(f+2*l)+h;else f=-s,c=Math.max(0,-(o*f+a)),_=-c*c+f*(f+2*l)+h;else f<=-y?(c=Math.max(0,-(-o*s+a)),f=c>0?-s:Math.min(Math.max(-s,-l),s),_=-c*c+f*(f+2*l)+h):f<=y?(c=0,f=Math.min(Math.max(-s,-l),s),_=f*(f+2*l)+h):(c=Math.max(0,-(o*s+a)),f=c>0?s:Math.min(Math.max(-s,-l),s),_=-c*c+f*(f+2*l)+h);else f=o>0?-s:s,c=Math.max(0,-(o*f+a)),_=-c*c+f*(f+2*l)+h;return i&&i.copy(this.direction).multiplyScalar(c).add(this.origin),n&&n.copy(pr).multiplyScalar(f).add(ps),_}intersectSphere(t,e){hi.subVectors(t.center,this.origin);const i=hi.dot(this.direction),n=hi.dot(hi)-i*i,s=t.radius*t.radius;if(n>s)return null;const o=Math.sqrt(s-n),a=i-o,l=i+o;return a<0&&l<0?null:a<0?this.at(l,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const i=-(this.origin.dot(t.normal)+t.constant)/e;return i>=0?i:null}intersectPlane(t,e){const i=this.distanceToPlane(t);return i===null?null:this.at(i,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let i,n,s,o,a,l;const h=1/this.direction.x,u=1/this.direction.y,c=1/this.direction.z,f=this.origin;return h>=0?(i=(t.min.x-f.x)*h,n=(t.max.x-f.x)*h):(i=(t.max.x-f.x)*h,n=(t.min.x-f.x)*h),u>=0?(s=(t.min.y-f.y)*u,o=(t.max.y-f.y)*u):(s=(t.max.y-f.y)*u,o=(t.min.y-f.y)*u),i>o||s>n||((s>i||isNaN(i))&&(i=s),(o<n||isNaN(n))&&(n=o),c>=0?(a=(t.min.z-f.z)*c,l=(t.max.z-f.z)*c):(a=(t.max.z-f.z)*c,l=(t.min.z-f.z)*c),i>l||a>n)||((a>i||i!==i)&&(i=a),(l<n||n!==n)&&(n=l),n<0)?null:this.at(i>=0?i:n,e)}intersectsBox(t){return this.intersectBox(t,hi)!==null}intersectTriangle(t,e,i,n,s){_s.subVectors(e,t),_r.subVectors(i,t),gs.crossVectors(_s,_r);let o=this.direction.dot(gs),a;if(o>0){if(n)return null;a=1}else if(o<0)a=-1,o=-o;else return null;xi.subVectors(this.origin,t);const l=a*this.direction.dot(_r.crossVectors(xi,_r));if(l<0)return null;const h=a*this.direction.dot(_s.cross(xi));if(h<0||l+h>o)return null;const u=-a*xi.dot(gs);return u<0?null:this.at(u/o,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class pe{constructor(){pe.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(t,e,i,n,s,o,a,l,h,u,c,f,_,y,p,m){const x=this.elements;return x[0]=t,x[4]=e,x[8]=i,x[12]=n,x[1]=s,x[5]=o,x[9]=a,x[13]=l,x[2]=h,x[6]=u,x[10]=c,x[14]=f,x[3]=_,x[7]=y,x[11]=p,x[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new pe().fromArray(this.elements)}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this}copyPosition(t){const e=this.elements,i=t.elements;return e[12]=i[12],e[13]=i[13],e[14]=i[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,i){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(t,e,i){return this.set(t.x,e.x,i.x,0,t.y,e.y,i.y,0,t.z,e.z,i.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,i=t.elements,n=1/un.setFromMatrixColumn(t,0).length(),s=1/un.setFromMatrixColumn(t,1).length(),o=1/un.setFromMatrixColumn(t,2).length();return e[0]=i[0]*n,e[1]=i[1]*n,e[2]=i[2]*n,e[3]=0,e[4]=i[4]*s,e[5]=i[5]*s,e[6]=i[6]*s,e[7]=0,e[8]=i[8]*o,e[9]=i[9]*o,e[10]=i[10]*o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,i=t.x,n=t.y,s=t.z,o=Math.cos(i),a=Math.sin(i),l=Math.cos(n),h=Math.sin(n),u=Math.cos(s),c=Math.sin(s);if(t.order==="XYZ"){const f=o*u,_=o*c,y=a*u,p=a*c;e[0]=l*u,e[4]=-l*c,e[8]=h,e[1]=_+y*h,e[5]=f-p*h,e[9]=-a*l,e[2]=p-f*h,e[6]=y+_*h,e[10]=o*l}else if(t.order==="YXZ"){const f=l*u,_=l*c,y=h*u,p=h*c;e[0]=f+p*a,e[4]=y*a-_,e[8]=o*h,e[1]=o*c,e[5]=o*u,e[9]=-a,e[2]=_*a-y,e[6]=p+f*a,e[10]=o*l}else if(t.order==="ZXY"){const f=l*u,_=l*c,y=h*u,p=h*c;e[0]=f-p*a,e[4]=-o*c,e[8]=y+_*a,e[1]=_+y*a,e[5]=o*u,e[9]=p-f*a,e[2]=-o*h,e[6]=a,e[10]=o*l}else if(t.order==="ZYX"){const f=o*u,_=o*c,y=a*u,p=a*c;e[0]=l*u,e[4]=y*h-_,e[8]=f*h+p,e[1]=l*c,e[5]=p*h+f,e[9]=_*h-y,e[2]=-h,e[6]=a*l,e[10]=o*l}else if(t.order==="YZX"){const f=o*l,_=o*h,y=a*l,p=a*h;e[0]=l*u,e[4]=p-f*c,e[8]=y*c+_,e[1]=c,e[5]=o*u,e[9]=-a*u,e[2]=-h*u,e[6]=_*c+y,e[10]=f-p*c}else if(t.order==="XZY"){const f=o*l,_=o*h,y=a*l,p=a*h;e[0]=l*u,e[4]=-c,e[8]=h*u,e[1]=f*c+p,e[5]=o*u,e[9]=_*c-y,e[2]=y*c-_,e[6]=a*u,e[10]=p*c+f}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(wh,t,Th)}lookAt(t,e,i){const n=this.elements;return Ne.subVectors(t,e),Ne.lengthSq()===0&&(Ne.z=1),Ne.normalize(),vi.crossVectors(i,Ne),vi.lengthSq()===0&&(Math.abs(i.z)===1?Ne.x+=1e-4:Ne.z+=1e-4,Ne.normalize(),vi.crossVectors(i,Ne)),vi.normalize(),gr.crossVectors(Ne,vi),n[0]=vi.x,n[4]=gr.x,n[8]=Ne.x,n[1]=vi.y,n[5]=gr.y,n[9]=Ne.y,n[2]=vi.z,n[6]=gr.z,n[10]=Ne.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,n=e.elements,s=this.elements,o=i[0],a=i[4],l=i[8],h=i[12],u=i[1],c=i[5],f=i[9],_=i[13],y=i[2],p=i[6],m=i[10],x=i[14],M=i[3],b=i[7],S=i[11],w=i[15],E=n[0],R=n[4],v=n[8],D=n[12],L=n[1],V=n[5],q=n[9],O=n[13],I=n[2],k=n[6],$=n[10],Q=n[14],B=n[3],et=n[7],j=n[11],X=n[15];return s[0]=o*E+a*L+l*I+h*B,s[4]=o*R+a*V+l*k+h*et,s[8]=o*v+a*q+l*$+h*j,s[12]=o*D+a*O+l*Q+h*X,s[1]=u*E+c*L+f*I+_*B,s[5]=u*R+c*V+f*k+_*et,s[9]=u*v+c*q+f*$+_*j,s[13]=u*D+c*O+f*Q+_*X,s[2]=y*E+p*L+m*I+x*B,s[6]=y*R+p*V+m*k+x*et,s[10]=y*v+p*q+m*$+x*j,s[14]=y*D+p*O+m*Q+x*X,s[3]=M*E+b*L+S*I+w*B,s[7]=M*R+b*V+S*k+w*et,s[11]=M*v+b*q+S*$+w*j,s[15]=M*D+b*O+S*Q+w*X,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[4],n=t[8],s=t[12],o=t[1],a=t[5],l=t[9],h=t[13],u=t[2],c=t[6],f=t[10],_=t[14],y=t[3],p=t[7],m=t[11],x=t[15];return y*(+s*l*c-n*h*c-s*a*f+i*h*f+n*a*_-i*l*_)+p*(+e*l*_-e*h*f+s*o*f-n*o*_+n*h*u-s*l*u)+m*(+e*h*c-e*a*_-s*o*c+i*o*_+s*a*u-i*h*u)+x*(-n*a*u-e*l*c+e*a*f+n*o*c-i*o*f+i*l*u)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,i){const n=this.elements;return t.isVector3?(n[12]=t.x,n[13]=t.y,n[14]=t.z):(n[12]=t,n[13]=e,n[14]=i),this}invert(){const t=this.elements,e=t[0],i=t[1],n=t[2],s=t[3],o=t[4],a=t[5],l=t[6],h=t[7],u=t[8],c=t[9],f=t[10],_=t[11],y=t[12],p=t[13],m=t[14],x=t[15],M=c*m*h-p*f*h+p*l*_-a*m*_-c*l*x+a*f*x,b=y*f*h-u*m*h-y*l*_+o*m*_+u*l*x-o*f*x,S=u*p*h-y*c*h+y*a*_-o*p*_-u*a*x+o*c*x,w=y*c*l-u*p*l-y*a*f+o*p*f+u*a*m-o*c*m,E=e*M+i*b+n*S+s*w;if(E===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const R=1/E;return t[0]=M*R,t[1]=(p*f*s-c*m*s-p*n*_+i*m*_+c*n*x-i*f*x)*R,t[2]=(a*m*s-p*l*s+p*n*h-i*m*h-a*n*x+i*l*x)*R,t[3]=(c*l*s-a*f*s-c*n*h+i*f*h+a*n*_-i*l*_)*R,t[4]=b*R,t[5]=(u*m*s-y*f*s+y*n*_-e*m*_-u*n*x+e*f*x)*R,t[6]=(y*l*s-o*m*s-y*n*h+e*m*h+o*n*x-e*l*x)*R,t[7]=(o*f*s-u*l*s+u*n*h-e*f*h-o*n*_+e*l*_)*R,t[8]=S*R,t[9]=(y*c*s-u*p*s-y*i*_+e*p*_+u*i*x-e*c*x)*R,t[10]=(o*p*s-y*a*s+y*i*h-e*p*h-o*i*x+e*a*x)*R,t[11]=(u*a*s-o*c*s-u*i*h+e*c*h+o*i*_-e*a*_)*R,t[12]=w*R,t[13]=(u*p*n-y*c*n+y*i*f-e*p*f-u*i*m+e*c*m)*R,t[14]=(y*a*n-o*p*n-y*i*l+e*p*l+o*i*m-e*a*m)*R,t[15]=(o*c*n-u*a*n+u*i*l-e*c*l-o*i*f+e*a*f)*R,this}scale(t){const e=this.elements,i=t.x,n=t.y,s=t.z;return e[0]*=i,e[4]*=n,e[8]*=s,e[1]*=i,e[5]*=n,e[9]*=s,e[2]*=i,e[6]*=n,e[10]*=s,e[3]*=i,e[7]*=n,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],i=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],n=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,i,n))}makeTranslation(t,e,i){return this.set(1,0,0,t,0,1,0,e,0,0,1,i,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),i=Math.sin(t);return this.set(1,0,0,0,0,e,-i,0,0,i,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,0,i,0,0,1,0,0,-i,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const i=Math.cos(e),n=Math.sin(e),s=1-i,o=t.x,a=t.y,l=t.z,h=s*o,u=s*a;return this.set(h*o+i,h*a-n*l,h*l+n*a,0,h*a+n*l,u*a+i,u*l-n*o,0,h*l-n*a,u*l+n*o,s*l*l+i,0,0,0,0,1),this}makeScale(t,e,i){return this.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this}makeShear(t,e,i,n,s,o){return this.set(1,i,s,0,t,1,o,0,e,n,1,0,0,0,0,1),this}compose(t,e,i){const n=this.elements,s=e._x,o=e._y,a=e._z,l=e._w,h=s+s,u=o+o,c=a+a,f=s*h,_=s*u,y=s*c,p=o*u,m=o*c,x=a*c,M=l*h,b=l*u,S=l*c,w=i.x,E=i.y,R=i.z;return n[0]=(1-(p+x))*w,n[1]=(_+S)*w,n[2]=(y-b)*w,n[3]=0,n[4]=(_-S)*E,n[5]=(1-(f+x))*E,n[6]=(m+M)*E,n[7]=0,n[8]=(y+b)*R,n[9]=(m-M)*R,n[10]=(1-(f+p))*R,n[11]=0,n[12]=t.x,n[13]=t.y,n[14]=t.z,n[15]=1,this}decompose(t,e,i){const n=this.elements;let s=un.set(n[0],n[1],n[2]).length();const o=un.set(n[4],n[5],n[6]).length(),a=un.set(n[8],n[9],n[10]).length();this.determinant()<0&&(s=-s),t.x=n[12],t.y=n[13],t.z=n[14],Ze.copy(this);const h=1/s,u=1/o,c=1/a;return Ze.elements[0]*=h,Ze.elements[1]*=h,Ze.elements[2]*=h,Ze.elements[4]*=u,Ze.elements[5]*=u,Ze.elements[6]*=u,Ze.elements[8]*=c,Ze.elements[9]*=c,Ze.elements[10]*=c,e.setFromRotationMatrix(Ze),i.x=s,i.y=o,i.z=a,this}makePerspective(t,e,i,n,s,o){const a=this.elements,l=2*s/(e-t),h=2*s/(i-n),u=(e+t)/(e-t),c=(i+n)/(i-n),f=-(o+s)/(o-s),_=-2*o*s/(o-s);return a[0]=l,a[4]=0,a[8]=u,a[12]=0,a[1]=0,a[5]=h,a[9]=c,a[13]=0,a[2]=0,a[6]=0,a[10]=f,a[14]=_,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(t,e,i,n,s,o){const a=this.elements,l=1/(e-t),h=1/(i-n),u=1/(o-s),c=(e+t)*l,f=(i+n)*h,_=(o+s)*u;return a[0]=2*l,a[4]=0,a[8]=0,a[12]=-c,a[1]=0,a[5]=2*h,a[9]=0,a[13]=-f,a[2]=0,a[6]=0,a[10]=-2*u,a[14]=-_,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(t){const e=this.elements,i=t.elements;for(let n=0;n<16;n++)if(e[n]!==i[n])return!1;return!0}fromArray(t,e=0){for(let i=0;i<16;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t[e+9]=i[9],t[e+10]=i[10],t[e+11]=i[11],t[e+12]=i[12],t[e+13]=i[13],t[e+14]=i[14],t[e+15]=i[15],t}}const un=new G,Ze=new pe,wh=new G(0,0,0),Th=new G(1,1,1),vi=new G,gr=new G,Ne=new G,Ba=new pe,Na=new $i;class sr{constructor(t=0,e=0,i=0,n=sr.DefaultOrder){this.isEuler=!0,this._x=t,this._y=e,this._z=i,this._order=n}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,i,n=this._order){return this._x=t,this._y=e,this._z=i,this._order=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,i=!0){const n=t.elements,s=n[0],o=n[4],a=n[8],l=n[1],h=n[5],u=n[9],c=n[2],f=n[6],_=n[10];switch(e){case"XYZ":this._y=Math.asin(Ie(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-u,_),this._z=Math.atan2(-o,s)):(this._x=Math.atan2(f,h),this._z=0);break;case"YXZ":this._x=Math.asin(-Ie(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(a,_),this._z=Math.atan2(l,h)):(this._y=Math.atan2(-c,s),this._z=0);break;case"ZXY":this._x=Math.asin(Ie(f,-1,1)),Math.abs(f)<.9999999?(this._y=Math.atan2(-c,_),this._z=Math.atan2(-o,h)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-Ie(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(f,_),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-o,h));break;case"YZX":this._z=Math.asin(Ie(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-u,h),this._y=Math.atan2(-c,s)):(this._x=0,this._y=Math.atan2(a,_));break;case"XZY":this._z=Math.asin(-Ie(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(f,h),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-u,_),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,i===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,i){return Ba.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Ba,e,i)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return Na.setFromEuler(this),this.setFromQuaternion(Na,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}toVector3(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")}}sr.DefaultOrder="XYZ";sr.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class Yo{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let Ah=0;const Ua=new G,cn=new $i,ui=new pe,yr=new G,Nn=new G,Eh=new G,Dh=new $i,za=new G(1,0,0),ka=new G(0,1,0),Va=new G(0,0,1),Ch={type:"added"},Ga={type:"removed"};class Oe extends nn{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:Ah++}),this.uuid=Ai(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Oe.DefaultUp.clone();const t=new G,e=new sr,i=new $i,n=new G(1,1,1);function s(){i.setFromEuler(e,!1)}function o(){e.setFromQuaternion(i,void 0,!1)}e._onChange(s),i._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new pe},normalMatrix:{value:new ze}}),this.matrix=new pe,this.matrixWorld=new pe,this.matrixAutoUpdate=Oe.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=Oe.DefaultMatrixWorldAutoUpdate,this.layers=new Yo,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return cn.setFromAxisAngle(t,e),this.quaternion.multiply(cn),this}rotateOnWorldAxis(t,e){return cn.setFromAxisAngle(t,e),this.quaternion.premultiply(cn),this}rotateX(t){return this.rotateOnAxis(za,t)}rotateY(t){return this.rotateOnAxis(ka,t)}rotateZ(t){return this.rotateOnAxis(Va,t)}translateOnAxis(t,e){return Ua.copy(t).applyQuaternion(this.quaternion),this.position.add(Ua.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(za,t)}translateY(t){return this.translateOnAxis(ka,t)}translateZ(t){return this.translateOnAxis(Va,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(ui.copy(this.matrixWorld).invert())}lookAt(t,e,i){t.isVector3?yr.copy(t):yr.set(t,e,i);const n=this.parent;this.updateWorldMatrix(!0,!1),Nn.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?ui.lookAt(Nn,yr,this.up):ui.lookAt(yr,Nn,this.up),this.quaternion.setFromRotationMatrix(ui),n&&(ui.extractRotation(n.matrixWorld),cn.setFromRotationMatrix(ui),this.quaternion.premultiply(cn.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.parent!==null&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(Ch)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.remove(arguments[i]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(Ga)),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null,e.dispatchEvent(Ga)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),ui.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),ui.multiply(t.parent.matrixWorld)),t.applyMatrix4(ui),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let i=0,n=this.children.length;i<n;i++){const o=this.children[i].getObjectByProperty(t,e);if(o!==void 0)return o}}getObjectsByProperty(t,e){let i=[];this[t]===e&&i.push(this);for(let n=0,s=this.children.length;n<s;n++){const o=this.children[n].getObjectsByProperty(t,e);o.length>0&&(i=i.concat(o))}return i}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Nn,t,Eh),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Nn,Dh,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let i=0,n=e.length;i<n;i++){const s=e[i];(s.matrixWorldAutoUpdate===!0||t===!0)&&s.updateMatrixWorld(t)}}updateWorldMatrix(t,e){const i=this.parent;if(t===!0&&i!==null&&i.matrixWorldAutoUpdate===!0&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),e===!0){const n=this.children;for(let s=0,o=n.length;s<o;s++){const a=n[s];a.matrixWorldAutoUpdate===!0&&a.updateWorldMatrix(!1,!0)}}}toJSON(t){const e=t===void 0||typeof t=="string",i={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},i.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const n={};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.castShadow===!0&&(n.castShadow=!0),this.receiveShadow===!0&&(n.receiveShadow=!0),this.visible===!1&&(n.visible=!1),this.frustumCulled===!1&&(n.frustumCulled=!1),this.renderOrder!==0&&(n.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(n.instanceColor=this.instanceColor.toJSON()));function s(a,l){return a[l.uuid]===void 0&&(a[l.uuid]=l.toJSON(t)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?n.background=this.background.toJSON():this.background.isTexture&&(n.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(n.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){n.geometry=s(t.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l))for(let h=0,u=l.length;h<u;h++){const c=l[h];s(t.shapes,c)}else s(t.shapes,l)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(t.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let l=0,h=this.material.length;l<h;l++)a.push(s(t.materials,this.material[l]));n.material=a}else n.material=s(t.materials,this.material);if(this.children.length>0){n.children=[];for(let a=0;a<this.children.length;a++)n.children.push(this.children[a].toJSON(t).object)}if(this.animations.length>0){n.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];n.animations.push(s(t.animations,l))}}if(e){const a=o(t.geometries),l=o(t.materials),h=o(t.textures),u=o(t.images),c=o(t.shapes),f=o(t.skeletons),_=o(t.animations),y=o(t.nodes);a.length>0&&(i.geometries=a),l.length>0&&(i.materials=l),h.length>0&&(i.textures=h),u.length>0&&(i.images=u),c.length>0&&(i.shapes=c),f.length>0&&(i.skeletons=f),_.length>0&&(i.animations=_),y.length>0&&(i.nodes=y)}return i.object=n,i;function o(a){const l=[];for(const h in a){const u=a[h];delete u.metadata,l.push(u)}return l}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let i=0;i<t.children.length;i++){const n=t.children[i];this.add(n.clone())}return this}}Oe.DefaultUp=new G(0,1,0);Oe.DefaultMatrixAutoUpdate=!0;Oe.DefaultMatrixWorldAutoUpdate=!0;const Ke=new G,ci=new G,ys=new G,fi=new G,fn=new G,dn=new G,Wa=new G,xs=new G,vs=new G,bs=new G;class ri{constructor(t=new G,e=new G,i=new G){this.a=t,this.b=e,this.c=i}static getNormal(t,e,i,n){n.subVectors(i,e),Ke.subVectors(t,e),n.cross(Ke);const s=n.lengthSq();return s>0?n.multiplyScalar(1/Math.sqrt(s)):n.set(0,0,0)}static getBarycoord(t,e,i,n,s){Ke.subVectors(n,e),ci.subVectors(i,e),ys.subVectors(t,e);const o=Ke.dot(Ke),a=Ke.dot(ci),l=Ke.dot(ys),h=ci.dot(ci),u=ci.dot(ys),c=o*h-a*a;if(c===0)return s.set(-2,-1,-1);const f=1/c,_=(h*l-a*u)*f,y=(o*u-a*l)*f;return s.set(1-_-y,y,_)}static containsPoint(t,e,i,n){return this.getBarycoord(t,e,i,n,fi),fi.x>=0&&fi.y>=0&&fi.x+fi.y<=1}static getUV(t,e,i,n,s,o,a,l){return this.getBarycoord(t,e,i,n,fi),l.set(0,0),l.addScaledVector(s,fi.x),l.addScaledVector(o,fi.y),l.addScaledVector(a,fi.z),l}static isFrontFacing(t,e,i,n){return Ke.subVectors(i,e),ci.subVectors(t,e),Ke.cross(ci).dot(n)<0}set(t,e,i){return this.a.copy(t),this.b.copy(e),this.c.copy(i),this}setFromPointsAndIndices(t,e,i,n){return this.a.copy(t[e]),this.b.copy(t[i]),this.c.copy(t[n]),this}setFromAttributeAndIndices(t,e,i,n){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,i),this.c.fromBufferAttribute(t,n),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Ke.subVectors(this.c,this.b),ci.subVectors(this.a,this.b),Ke.cross(ci).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return ri.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return ri.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,i,n,s){return ri.getUV(t,this.a,this.b,this.c,e,i,n,s)}containsPoint(t){return ri.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return ri.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const i=this.a,n=this.b,s=this.c;let o,a;fn.subVectors(n,i),dn.subVectors(s,i),xs.subVectors(t,i);const l=fn.dot(xs),h=dn.dot(xs);if(l<=0&&h<=0)return e.copy(i);vs.subVectors(t,n);const u=fn.dot(vs),c=dn.dot(vs);if(u>=0&&c<=u)return e.copy(n);const f=l*c-u*h;if(f<=0&&l>=0&&u<=0)return o=l/(l-u),e.copy(i).addScaledVector(fn,o);bs.subVectors(t,s);const _=fn.dot(bs),y=dn.dot(bs);if(y>=0&&_<=y)return e.copy(s);const p=_*h-l*y;if(p<=0&&h>=0&&y<=0)return a=h/(h-y),e.copy(i).addScaledVector(dn,a);const m=u*y-_*c;if(m<=0&&c-u>=0&&_-y>=0)return Wa.subVectors(s,n),a=(c-u)/(c-u+(_-y)),e.copy(n).addScaledVector(Wa,a);const x=1/(m+p+f);return o=p*x,a=f*x,e.copy(i).addScaledVector(fn,o).addScaledVector(dn,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let Ph=0;class ar extends nn{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:Ph++}),this.uuid=Ai(),this.name="",this.type="Material",this.blending=An,this.side=ji,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=Bo,this.blendDst=No,this.blendEquation=wn,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=Bs,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=yh,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=rs,this.stencilZFail=rs,this.stencilZPass=rs,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const i=t[e];if(i===void 0){console.warn("THREE.Material: '"+e+"' parameter is undefined.");continue}const n=this[e];if(n===void 0){console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.");continue}n&&n.isColor?n.set(i):n&&n.isVector3&&i&&i.isVector3?n.copy(i):this[e]=i}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const i={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),this.roughness!==void 0&&(i.roughness=this.roughness),this.metalness!==void 0&&(i.metalness=this.metalness),this.sheen!==void 0&&(i.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(i.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(i.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(i.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(i.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(i.shininess=this.shininess),this.clearcoat!==void 0&&(i.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.iridescence!==void 0&&(i.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(i.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(i.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(i.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(i.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(t).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(t).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(t).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(t).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(t).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(i.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(i.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(i.combine=this.combine)),this.envMapIntensity!==void 0&&(i.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(i.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(i.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(i.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(i.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(i.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(i.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(i.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(i.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(i.size=this.size),this.shadowSide!==null&&(i.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(i.sizeAttenuation=this.sizeAttenuation),this.blending!==An&&(i.blending=this.blending),this.side!==ji&&(i.side=this.side),this.vertexColors&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),this.transparent===!0&&(i.transparent=this.transparent),i.depthFunc=this.depthFunc,i.depthTest=this.depthTest,i.depthWrite=this.depthWrite,i.colorWrite=this.colorWrite,i.stencilWrite=this.stencilWrite,i.stencilWriteMask=this.stencilWriteMask,i.stencilFunc=this.stencilFunc,i.stencilRef=this.stencilRef,i.stencilFuncMask=this.stencilFuncMask,i.stencilFail=this.stencilFail,i.stencilZFail=this.stencilZFail,i.stencilZPass=this.stencilZPass,this.rotation!==void 0&&this.rotation!==0&&(i.rotation=this.rotation),this.polygonOffset===!0&&(i.polygonOffset=!0),this.polygonOffsetFactor!==0&&(i.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(i.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(i.linewidth=this.linewidth),this.dashSize!==void 0&&(i.dashSize=this.dashSize),this.gapSize!==void 0&&(i.gapSize=this.gapSize),this.scale!==void 0&&(i.scale=this.scale),this.dithering===!0&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(i.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(i.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(i.wireframe=this.wireframe),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(i.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(i.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(i.flatShading=this.flatShading),this.visible===!1&&(i.visible=!1),this.toneMapped===!1&&(i.toneMapped=!1),this.fog===!1&&(i.fog=!1),Object.keys(this.userData).length>0&&(i.userData=this.userData);function n(s){const o=[];for(const a in s){const l=s[a];delete l.metadata,o.push(l)}return o}if(e){const s=n(t.textures),o=n(t.images);s.length>0&&(i.textures=s),o.length>0&&(i.images=o)}return i}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let i=null;if(e!==null){const n=e.length;i=new Array(n);for(let s=0;s!==n;++s)i[s]=e[s].clone()}return this.clippingPlanes=i,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}}class Ji extends ar{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new $t(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Uo,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const se=new G,xr=new Et;class ge{constructor(t,e,i=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=i,this.usage=ks,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,e,i){t*=this.itemSize,i*=e.itemSize;for(let n=0,s=this.itemSize;n<s;n++)this.array[t+n]=e.array[i+n];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,i=this.count;e<i;e++)xr.fromBufferAttribute(this,e),xr.applyMatrix3(t),this.setXY(e,xr.x,xr.y);else if(this.itemSize===3)for(let e=0,i=this.count;e<i;e++)se.fromBufferAttribute(this,e),se.applyMatrix3(t),this.setXYZ(e,se.x,se.y,se.z);return this}applyMatrix4(t){for(let e=0,i=this.count;e<i;e++)se.fromBufferAttribute(this,e),se.applyMatrix4(t),this.setXYZ(e,se.x,se.y,se.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)se.fromBufferAttribute(this,e),se.applyNormalMatrix(t),this.setXYZ(e,se.x,se.y,se.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)se.fromBufferAttribute(this,e),se.transformDirection(t),this.setXYZ(e,se.x,se.y,se.z);return this}set(t,e=0){return this.array.set(t,e),this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=Si(e,this.array)),e}setX(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=Si(e,this.array)),e}setY(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=Si(e,this.array)),e}setZ(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=Si(e,this.array)),e}setW(t,e){return this.normalized&&(e=jt(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,i){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),i=jt(i,this.array)),this.array[t+0]=e,this.array[t+1]=i,this}setXYZ(t,e,i,n){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),i=jt(i,this.array),n=jt(n,this.array)),this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this}setXYZW(t,e,i,n,s){return t*=this.itemSize,this.normalized&&(e=jt(e,this.array),i=jt(i,this.array),n=jt(n,this.array),s=jt(s,this.array)),this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==ks&&(t.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(t.updateRange=this.updateRange),t}copyColorsArray(){console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.")}copyVector2sArray(){console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.")}copyVector3sArray(){console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.")}copyVector4sArray(){console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.")}}class jo extends ge{constructor(t,e,i){super(new Uint16Array(t),e,i)}}class qo extends ge{constructor(t,e,i){super(new Uint32Array(t),e,i)}}class Xi extends ge{constructor(t,e,i){super(new Float32Array(t),e,i)}}let Ih=0;const Ge=new pe,Ss=new Oe,mn=new G,Ue=new rr,Un=new rr,me=new G;class _i extends nn{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:Ih++}),this.uuid=Ai(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(Vo(t)?qo:jo)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,i=0){this.groups.push({start:t,count:e,materialIndex:i})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const i=this.attributes.normal;if(i!==void 0){const s=new ze().getNormalMatrix(t);i.applyNormalMatrix(s),i.needsUpdate=!0}const n=this.attributes.tangent;return n!==void 0&&(n.transformDirection(t),n.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return Ge.makeRotationFromQuaternion(t),this.applyMatrix4(Ge),this}rotateX(t){return Ge.makeRotationX(t),this.applyMatrix4(Ge),this}rotateY(t){return Ge.makeRotationY(t),this.applyMatrix4(Ge),this}rotateZ(t){return Ge.makeRotationZ(t),this.applyMatrix4(Ge),this}translate(t,e,i){return Ge.makeTranslation(t,e,i),this.applyMatrix4(Ge),this}scale(t,e,i){return Ge.makeScale(t,e,i),this.applyMatrix4(Ge),this}lookAt(t){return Ss.lookAt(t),Ss.updateMatrix(),this.applyMatrix4(Ss.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(mn).negate(),this.translate(mn.x,mn.y,mn.z),this}setFromPoints(t){const e=[];for(let i=0,n=t.length;i<n;i++){const s=t[i];e.push(s.x,s.y,s.z||0)}return this.setAttribute("position",new Xi(e,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new rr);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new G(-1/0,-1/0,-1/0),new G(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let i=0,n=e.length;i<n;i++){const s=e[i];Ue.setFromBufferAttribute(s),this.morphTargetsRelative?(me.addVectors(this.boundingBox.min,Ue.min),this.boundingBox.expandByPoint(me),me.addVectors(this.boundingBox.max,Ue.max),this.boundingBox.expandByPoint(me)):(this.boundingBox.expandByPoint(Ue.min),this.boundingBox.expandByPoint(Ue.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new js);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new G,1/0);return}if(t){const i=this.boundingSphere.center;if(Ue.setFromBufferAttribute(t),e)for(let s=0,o=e.length;s<o;s++){const a=e[s];Un.setFromBufferAttribute(a),this.morphTargetsRelative?(me.addVectors(Ue.min,Un.min),Ue.expandByPoint(me),me.addVectors(Ue.max,Un.max),Ue.expandByPoint(me)):(Ue.expandByPoint(Un.min),Ue.expandByPoint(Un.max))}Ue.getCenter(i);let n=0;for(let s=0,o=t.count;s<o;s++)me.fromBufferAttribute(t,s),n=Math.max(n,i.distanceToSquared(me));if(e)for(let s=0,o=e.length;s<o;s++){const a=e[s],l=this.morphTargetsRelative;for(let h=0,u=a.count;h<u;h++)me.fromBufferAttribute(a,h),l&&(mn.fromBufferAttribute(t,h),me.add(mn)),n=Math.max(n,i.distanceToSquared(me))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const i=t.array,n=e.position.array,s=e.normal.array,o=e.uv.array,a=n.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new ge(new Float32Array(4*a),4));const l=this.getAttribute("tangent").array,h=[],u=[];for(let L=0;L<a;L++)h[L]=new G,u[L]=new G;const c=new G,f=new G,_=new G,y=new Et,p=new Et,m=new Et,x=new G,M=new G;function b(L,V,q){c.fromArray(n,L*3),f.fromArray(n,V*3),_.fromArray(n,q*3),y.fromArray(o,L*2),p.fromArray(o,V*2),m.fromArray(o,q*2),f.sub(c),_.sub(c),p.sub(y),m.sub(y);const O=1/(p.x*m.y-m.x*p.y);isFinite(O)&&(x.copy(f).multiplyScalar(m.y).addScaledVector(_,-p.y).multiplyScalar(O),M.copy(_).multiplyScalar(p.x).addScaledVector(f,-m.x).multiplyScalar(O),h[L].add(x),h[V].add(x),h[q].add(x),u[L].add(M),u[V].add(M),u[q].add(M))}let S=this.groups;S.length===0&&(S=[{start:0,count:i.length}]);for(let L=0,V=S.length;L<V;++L){const q=S[L],O=q.start,I=q.count;for(let k=O,$=O+I;k<$;k+=3)b(i[k+0],i[k+1],i[k+2])}const w=new G,E=new G,R=new G,v=new G;function D(L){R.fromArray(s,L*3),v.copy(R);const V=h[L];w.copy(V),w.sub(R.multiplyScalar(R.dot(V))).normalize(),E.crossVectors(v,V);const O=E.dot(u[L])<0?-1:1;l[L*4]=w.x,l[L*4+1]=w.y,l[L*4+2]=w.z,l[L*4+3]=O}for(let L=0,V=S.length;L<V;++L){const q=S[L],O=q.start,I=q.count;for(let k=O,$=O+I;k<$;k+=3)D(i[k+0]),D(i[k+1]),D(i[k+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let i=this.getAttribute("normal");if(i===void 0)i=new ge(new Float32Array(e.count*3),3),this.setAttribute("normal",i);else for(let f=0,_=i.count;f<_;f++)i.setXYZ(f,0,0,0);const n=new G,s=new G,o=new G,a=new G,l=new G,h=new G,u=new G,c=new G;if(t)for(let f=0,_=t.count;f<_;f+=3){const y=t.getX(f+0),p=t.getX(f+1),m=t.getX(f+2);n.fromBufferAttribute(e,y),s.fromBufferAttribute(e,p),o.fromBufferAttribute(e,m),u.subVectors(o,s),c.subVectors(n,s),u.cross(c),a.fromBufferAttribute(i,y),l.fromBufferAttribute(i,p),h.fromBufferAttribute(i,m),a.add(u),l.add(u),h.add(u),i.setXYZ(y,a.x,a.y,a.z),i.setXYZ(p,l.x,l.y,l.z),i.setXYZ(m,h.x,h.y,h.z)}else for(let f=0,_=e.count;f<_;f+=3)n.fromBufferAttribute(e,f+0),s.fromBufferAttribute(e,f+1),o.fromBufferAttribute(e,f+2),u.subVectors(o,s),c.subVectors(n,s),u.cross(c),i.setXYZ(f+0,u.x,u.y,u.z),i.setXYZ(f+1,u.x,u.y,u.z),i.setXYZ(f+2,u.x,u.y,u.z);this.normalizeNormals(),i.needsUpdate=!0}}merge(){return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead."),this}normalizeNormals(){const t=this.attributes.normal;for(let e=0,i=t.count;e<i;e++)me.fromBufferAttribute(t,e),me.normalize(),t.setXYZ(e,me.x,me.y,me.z)}toNonIndexed(){function t(a,l){const h=a.array,u=a.itemSize,c=a.normalized,f=new h.constructor(l.length*u);let _=0,y=0;for(let p=0,m=l.length;p<m;p++){a.isInterleavedBufferAttribute?_=l[p]*a.data.stride+a.offset:_=l[p]*u;for(let x=0;x<u;x++)f[y++]=h[_++]}return new ge(f,u,c)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new _i,i=this.index.array,n=this.attributes;for(const a in n){const l=n[a],h=t(l,i);e.setAttribute(a,h)}const s=this.morphAttributes;for(const a in s){const l=[],h=s[a];for(let u=0,c=h.length;u<c;u++){const f=h[u],_=t(f,i);l.push(_)}e.morphAttributes[a]=l}e.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,l=o.length;a<l;a++){const h=o[a];e.addGroup(h.start,h.count,h.materialIndex)}return e}toJSON(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const h in l)l[h]!==void 0&&(t[h]=l[h]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const i=this.attributes;for(const l in i){const h=i[l];t.data.attributes[l]=h.toJSON(t.data)}const n={};let s=!1;for(const l in this.morphAttributes){const h=this.morphAttributes[l],u=[];for(let c=0,f=h.length;c<f;c++){const _=h[c];u.push(_.toJSON(t.data))}u.length>0&&(n[l]=u,s=!0)}s&&(t.data.morphAttributes=n,t.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(t.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const i=t.index;i!==null&&this.setIndex(i.clone(e));const n=t.attributes;for(const h in n){const u=n[h];this.setAttribute(h,u.clone(e))}const s=t.morphAttributes;for(const h in s){const u=[],c=s[h];for(let f=0,_=c.length;f<_;f++)u.push(c[f].clone(e));this.morphAttributes[h]=u}this.morphTargetsRelative=t.morphTargetsRelative;const o=t.groups;for(let h=0,u=o.length;h<u;h++){const c=o[h];this.addGroup(c.start,c.count,c.materialIndex)}const a=t.boundingBox;a!==null&&(this.boundingBox=a.clone());const l=t.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,t.parameters!==void 0&&(this.parameters=Object.assign({},t.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}const Ha=new pe,pn=new Mh,Ms=new js,zn=new G,kn=new G,Vn=new G,ws=new G,vr=new G,br=new Et,Sr=new Et,Mr=new Et,Ts=new G,wr=new G;class si extends Oe{constructor(t=new _i,e=new Ji){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,i=Object.keys(e);if(i.length>0){const n=e[i[0]];if(n!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=n.length;s<o;s++){const a=n[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}getVertexPosition(t,e){const i=this.geometry,n=i.attributes.position,s=i.morphAttributes.position,o=i.morphTargetsRelative;e.fromBufferAttribute(n,t);const a=this.morphTargetInfluences;if(s&&a){vr.set(0,0,0);for(let l=0,h=s.length;l<h;l++){const u=a[l],c=s[l];u!==0&&(ws.fromBufferAttribute(c,t),o?vr.addScaledVector(ws,u):vr.addScaledVector(ws.sub(e),u))}e.add(vr)}return this.isSkinnedMesh&&this.boneTransform(t,e),e}raycast(t,e){const i=this.geometry,n=this.material,s=this.matrixWorld;if(n===void 0||(i.boundingSphere===null&&i.computeBoundingSphere(),Ms.copy(i.boundingSphere),Ms.applyMatrix4(s),t.ray.intersectsSphere(Ms)===!1)||(Ha.copy(s).invert(),pn.copy(t.ray).applyMatrix4(Ha),i.boundingBox!==null&&pn.intersectsBox(i.boundingBox)===!1))return;let o;const a=i.index,l=i.attributes.position,h=i.attributes.uv,u=i.attributes.uv2,c=i.groups,f=i.drawRange;if(a!==null)if(Array.isArray(n))for(let _=0,y=c.length;_<y;_++){const p=c[_],m=n[p.materialIndex],x=Math.max(p.start,f.start),M=Math.min(a.count,Math.min(p.start+p.count,f.start+f.count));for(let b=x,S=M;b<S;b+=3){const w=a.getX(b),E=a.getX(b+1),R=a.getX(b+2);o=Tr(this,m,t,pn,h,u,w,E,R),o&&(o.faceIndex=Math.floor(b/3),o.face.materialIndex=p.materialIndex,e.push(o))}}else{const _=Math.max(0,f.start),y=Math.min(a.count,f.start+f.count);for(let p=_,m=y;p<m;p+=3){const x=a.getX(p),M=a.getX(p+1),b=a.getX(p+2);o=Tr(this,n,t,pn,h,u,x,M,b),o&&(o.faceIndex=Math.floor(p/3),e.push(o))}}else if(l!==void 0)if(Array.isArray(n))for(let _=0,y=c.length;_<y;_++){const p=c[_],m=n[p.materialIndex],x=Math.max(p.start,f.start),M=Math.min(l.count,Math.min(p.start+p.count,f.start+f.count));for(let b=x,S=M;b<S;b+=3){const w=b,E=b+1,R=b+2;o=Tr(this,m,t,pn,h,u,w,E,R),o&&(o.faceIndex=Math.floor(b/3),o.face.materialIndex=p.materialIndex,e.push(o))}}else{const _=Math.max(0,f.start),y=Math.min(l.count,f.start+f.count);for(let p=_,m=y;p<m;p+=3){const x=p,M=p+1,b=p+2;o=Tr(this,n,t,pn,h,u,x,M,b),o&&(o.faceIndex=Math.floor(p/3),e.push(o))}}}}function Rh(r,t,e,i,n,s,o,a){let l;if(t.side===je?l=i.intersectTriangle(o,s,n,!0,a):l=i.intersectTriangle(n,s,o,t.side===ji,a),l===null)return null;wr.copy(a),wr.applyMatrix4(r.matrixWorld);const h=e.ray.origin.distanceTo(wr);return h<e.near||h>e.far?null:{distance:h,point:wr.clone(),object:r}}function Tr(r,t,e,i,n,s,o,a,l){r.getVertexPosition(o,zn),r.getVertexPosition(a,kn),r.getVertexPosition(l,Vn);const h=Rh(r,t,e,i,zn,kn,Vn,Ts);if(h){n&&(br.fromBufferAttribute(n,o),Sr.fromBufferAttribute(n,a),Mr.fromBufferAttribute(n,l),h.uv=ri.getUV(Ts,zn,kn,Vn,br,Sr,Mr,new Et)),s&&(br.fromBufferAttribute(s,o),Sr.fromBufferAttribute(s,a),Mr.fromBufferAttribute(s,l),h.uv2=ri.getUV(Ts,zn,kn,Vn,br,Sr,Mr,new Et));const u={a:o,b:a,c:l,normal:new G,materialIndex:0};ri.getNormal(zn,kn,Vn,u.normal),h.face=u}return h}class or extends _i{constructor(t=1,e=1,i=1,n=1,s=1,o=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:n,heightSegments:s,depthSegments:o};const a=this;n=Math.floor(n),s=Math.floor(s),o=Math.floor(o);const l=[],h=[],u=[],c=[];let f=0,_=0;y("z","y","x",-1,-1,i,e,t,o,s,0),y("z","y","x",1,-1,i,e,-t,o,s,1),y("x","z","y",1,1,t,i,e,n,o,2),y("x","z","y",1,-1,t,i,-e,n,o,3),y("x","y","z",1,-1,t,e,i,n,s,4),y("x","y","z",-1,-1,t,e,-i,n,s,5),this.setIndex(l),this.setAttribute("position",new Xi(h,3)),this.setAttribute("normal",new Xi(u,3)),this.setAttribute("uv",new Xi(c,2));function y(p,m,x,M,b,S,w,E,R,v,D){const L=S/R,V=w/v,q=S/2,O=w/2,I=E/2,k=R+1,$=v+1;let Q=0,B=0;const et=new G;for(let j=0;j<$;j++){const X=j*V-O;for(let H=0;H<k;H++){const ot=H*L-q;et[p]=ot*M,et[m]=X*b,et[x]=I,h.push(et.x,et.y,et.z),et[p]=0,et[m]=0,et[x]=E>0?1:-1,u.push(et.x,et.y,et.z),c.push(H/R),c.push(1-j/v),Q+=1}}for(let j=0;j<v;j++)for(let X=0;X<R;X++){const H=f+X+k*j,ot=f+X+k*(j+1),rt=f+(X+1)+k*(j+1),ct=f+(X+1)+k*j;l.push(H,ot,ct),l.push(ot,rt,ct),B+=6}a.addGroup(_,B,D),_+=B,f+=Q}}static fromJSON(t){return new or(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function In(r){const t={};for(const e in r){t[e]={};for(const i in r[e]){const n=r[e][i];n&&(n.isColor||n.isMatrix3||n.isMatrix4||n.isVector2||n.isVector3||n.isVector4||n.isTexture||n.isQuaternion)?t[e][i]=n.clone():Array.isArray(n)?t[e][i]=n.slice():t[e][i]=n}}return t}function Te(r){const t={};for(let e=0;e<r.length;e++){const i=In(r[e]);for(const n in i)t[n]=i[n]}return t}function Lh(r){const t=[];for(let e=0;e<r.length;e++)t.push(r[e].clone());return t}function Zo(r){return r.getRenderTarget()===null&&r.outputEncoding===qt?ii:er}const Oh={clone:In,merge:Te};var Fh=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,Bh=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class Qi extends ar{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=Fh,this.fragmentShader=Bh,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=In(t.uniforms),this.uniformsGroups=Lh(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const n in this.uniforms){const o=this.uniforms[n].value;o&&o.isTexture?e.uniforms[n]={type:"t",value:o.toJSON(t).uuid}:o&&o.isColor?e.uniforms[n]={type:"c",value:o.getHex()}:o&&o.isVector2?e.uniforms[n]={type:"v2",value:o.toArray()}:o&&o.isVector3?e.uniforms[n]={type:"v3",value:o.toArray()}:o&&o.isVector4?e.uniforms[n]={type:"v4",value:o.toArray()}:o&&o.isMatrix3?e.uniforms[n]={type:"m3",value:o.toArray()}:o&&o.isMatrix4?e.uniforms[n]={type:"m4",value:o.toArray()}:e.uniforms[n]={value:o}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;const i={};for(const n in this.extensions)this.extensions[n]===!0&&(i[n]=!0);return Object.keys(i).length>0&&(e.extensions=i),e}}class Ko extends Oe{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new pe,this.projectionMatrix=new pe,this.projectionMatrixInverse=new pe}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}class He extends Ko{constructor(t=50,e=1,i=.1,n=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=i,this.far=n,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=La*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(ss*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return La*2*Math.atan(Math.tan(ss*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,i,n,s,o){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(ss*.5*this.fov)/this.zoom,i=2*e,n=this.aspect*i,s=-.5*n;const o=this.view;if(this.view!==null&&this.view.enabled){const l=o.fullWidth,h=o.fullHeight;s+=o.offsetX*n/l,e-=o.offsetY*i/h,n*=o.width/l,i*=o.height/h}const a=this.filmOffset;a!==0&&(s+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+n,e,e-i,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const _n=-90,gn=1;class Nh extends Oe{constructor(t,e,i){super(),this.type="CubeCamera",this.renderTarget=i;const n=new He(_n,gn,t,e);n.layers=this.layers,n.up.set(0,1,0),n.lookAt(1,0,0),this.add(n);const s=new He(_n,gn,t,e);s.layers=this.layers,s.up.set(0,1,0),s.lookAt(-1,0,0),this.add(s);const o=new He(_n,gn,t,e);o.layers=this.layers,o.up.set(0,0,-1),o.lookAt(0,1,0),this.add(o);const a=new He(_n,gn,t,e);a.layers=this.layers,a.up.set(0,0,1),a.lookAt(0,-1,0),this.add(a);const l=new He(_n,gn,t,e);l.layers=this.layers,l.up.set(0,1,0),l.lookAt(0,0,1),this.add(l);const h=new He(_n,gn,t,e);h.layers=this.layers,h.up.set(0,1,0),h.lookAt(0,0,-1),this.add(h)}update(t,e){this.parent===null&&this.updateMatrixWorld();const i=this.renderTarget,[n,s,o,a,l,h]=this.children,u=t.getRenderTarget(),c=t.toneMapping,f=t.xr.enabled;t.toneMapping=pi,t.xr.enabled=!1;const _=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,t.setRenderTarget(i,0),t.render(e,n),t.setRenderTarget(i,1),t.render(e,s),t.setRenderTarget(i,2),t.render(e,o),t.setRenderTarget(i,3),t.render(e,a),t.setRenderTarget(i,4),t.render(e,l),i.texture.generateMipmaps=_,t.setRenderTarget(i,5),t.render(e,h),t.setRenderTarget(u),t.toneMapping=c,t.xr.enabled=f,i.texture.needsPMREMUpdate=!0}}class $o extends Le{constructor(t,e,i,n,s,o,a,l,h,u){t=t!==void 0?t:[],e=e!==void 0?e:Dn,super(t,e,i,n,s,o,a,l,h,u),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class Uh extends Ki{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const i={width:t,height:t,depth:1},n=[i,i,i,i,i,i];this.texture=new $o(n,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=e.generateMipmaps!==void 0?e.generateMipmaps:!1,this.texture.minFilter=e.minFilter!==void 0?e.minFilter:We}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.encoding=e.encoding,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const i={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},n=new or(5,5,5),s=new Qi({name:"CubemapFromEquirect",uniforms:In(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:je,blending:Ti});s.uniforms.tEquirect.value=e;const o=new si(n,s),a=e.minFilter;return e.minFilter===Qn&&(e.minFilter=We),new Nh(1,10,this).update(t,o),e.minFilter=a,o.geometry.dispose(),o.material.dispose(),this}clear(t,e,i,n){const s=t.getRenderTarget();for(let o=0;o<6;o++)t.setRenderTarget(this,o),t.clear(e,i,n);t.setRenderTarget(s)}}const As=new G,zh=new G,kh=new ze;class Oi{constructor(t=new G(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,i,n){return this.normal.set(t,e,i),this.constant=n,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,i){const n=As.subVectors(i,e).cross(zh.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(n,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){const i=t.delta(As),n=this.normal.dot(i);if(n===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/n;return s<0||s>1?null:e.copy(i).multiplyScalar(s).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return e<0&&i>0||i<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const i=e||kh.getNormalMatrix(t),n=this.coplanarPoint(As).applyMatrix4(t),s=this.normal.applyMatrix3(i).normalize();return this.constant=-n.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}const yn=new js,Ar=new G;class Jo{constructor(t=new Oi,e=new Oi,i=new Oi,n=new Oi,s=new Oi,o=new Oi){this.planes=[t,e,i,n,s,o]}set(t,e,i,n,s,o){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(i),a[3].copy(n),a[4].copy(s),a[5].copy(o),this}copy(t){const e=this.planes;for(let i=0;i<6;i++)e[i].copy(t.planes[i]);return this}setFromProjectionMatrix(t){const e=this.planes,i=t.elements,n=i[0],s=i[1],o=i[2],a=i[3],l=i[4],h=i[5],u=i[6],c=i[7],f=i[8],_=i[9],y=i[10],p=i[11],m=i[12],x=i[13],M=i[14],b=i[15];return e[0].setComponents(a-n,c-l,p-f,b-m).normalize(),e[1].setComponents(a+n,c+l,p+f,b+m).normalize(),e[2].setComponents(a+s,c+h,p+_,b+x).normalize(),e[3].setComponents(a-s,c-h,p-_,b-x).normalize(),e[4].setComponents(a-o,c-u,p-y,b-M).normalize(),e[5].setComponents(a+o,c+u,p+y,b+M).normalize(),this}intersectsObject(t){const e=t.geometry;return e.boundingSphere===null&&e.computeBoundingSphere(),yn.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(yn)}intersectsSprite(t){return yn.center.set(0,0,0),yn.radius=.7071067811865476,yn.applyMatrix4(t.matrixWorld),this.intersectsSphere(yn)}intersectsSphere(t){const e=this.planes,i=t.center,n=-t.radius;for(let s=0;s<6;s++)if(e[s].distanceToPoint(i)<n)return!1;return!0}intersectsBox(t){const e=this.planes;for(let i=0;i<6;i++){const n=e[i];if(Ar.x=n.normal.x>0?t.max.x:t.min.x,Ar.y=n.normal.y>0?t.max.y:t.min.y,Ar.z=n.normal.z>0?t.max.z:t.min.z,n.distanceToPoint(Ar)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function Qo(){let r=null,t=!1,e=null,i=null;function n(s,o){e(s,o),i=r.requestAnimationFrame(n)}return{start:function(){t!==!0&&e!==null&&(i=r.requestAnimationFrame(n),t=!0)},stop:function(){r.cancelAnimationFrame(i),t=!1},setAnimationLoop:function(s){e=s},setContext:function(s){r=s}}}function Vh(r,t){const e=t.isWebGL2,i=new WeakMap;function n(h,u){const c=h.array,f=h.usage,_=r.createBuffer();r.bindBuffer(u,_),r.bufferData(u,c,f),h.onUploadCallback();let y;if(c instanceof Float32Array)y=5126;else if(c instanceof Uint16Array)if(h.isFloat16BufferAttribute)if(e)y=5131;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else y=5123;else if(c instanceof Int16Array)y=5122;else if(c instanceof Uint32Array)y=5125;else if(c instanceof Int32Array)y=5124;else if(c instanceof Int8Array)y=5120;else if(c instanceof Uint8Array)y=5121;else if(c instanceof Uint8ClampedArray)y=5121;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+c);return{buffer:_,type:y,bytesPerElement:c.BYTES_PER_ELEMENT,version:h.version}}function s(h,u,c){const f=u.array,_=u.updateRange;r.bindBuffer(c,h),_.count===-1?r.bufferSubData(c,0,f):(e?r.bufferSubData(c,_.offset*f.BYTES_PER_ELEMENT,f,_.offset,_.count):r.bufferSubData(c,_.offset*f.BYTES_PER_ELEMENT,f.subarray(_.offset,_.offset+_.count)),_.count=-1),u.onUploadCallback()}function o(h){return h.isInterleavedBufferAttribute&&(h=h.data),i.get(h)}function a(h){h.isInterleavedBufferAttribute&&(h=h.data);const u=i.get(h);u&&(r.deleteBuffer(u.buffer),i.delete(h))}function l(h,u){if(h.isGLBufferAttribute){const f=i.get(h);(!f||f.version<h.version)&&i.set(h,{buffer:h.buffer,type:h.type,bytesPerElement:h.elementSize,version:h.version});return}h.isInterleavedBufferAttribute&&(h=h.data);const c=i.get(h);c===void 0?i.set(h,n(h,u)):c.version<h.version&&(s(c.buffer,h,u),c.version=h.version)}return{get:o,remove:a,update:l}}class Gr extends _i{constructor(t=1,e=1,i=1,n=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:n};const s=t/2,o=e/2,a=Math.floor(i),l=Math.floor(n),h=a+1,u=l+1,c=t/a,f=e/l,_=[],y=[],p=[],m=[];for(let x=0;x<u;x++){const M=x*f-o;for(let b=0;b<h;b++){const S=b*c-s;y.push(S,-M,0),p.push(0,0,1),m.push(b/a),m.push(1-x/l)}}for(let x=0;x<l;x++)for(let M=0;M<a;M++){const b=M+h*x,S=M+h*(x+1),w=M+1+h*(x+1),E=M+1+h*x;_.push(b,S,E),_.push(S,w,E)}this.setIndex(_),this.setAttribute("position",new Xi(y,3)),this.setAttribute("normal",new Xi(p,3)),this.setAttribute("uv",new Xi(m,2))}static fromJSON(t){return new Gr(t.width,t.height,t.widthSegments,t.heightSegments)}}var Gh=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`,Wh=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,Hh=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,Xh=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,Yh=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,jh=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,qh="vec3 transformed = vec3( position );",Zh=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,Kh=`vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
#ifdef USE_IRIDESCENCE
	vec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif`,$h=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			 return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float R21 = R12;
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,Jh=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,Qh=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,tu=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,eu=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,iu=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,nu=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,ru=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,su=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,au=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,ou=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`,lu=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,hu=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,uu=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,cu=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`,fu=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,du=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,mu="gl_FragColor = linearToOutputTexel( gl_FragColor );",pu=`vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,_u=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,gu=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,yu=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,xu=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,vu=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,bu=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,Su=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,Mu=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,wu=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,Tu=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,Au=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vUv2 );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,Eu=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,Du=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,Cu=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,Pu=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( PHYSICALLY_CORRECT_LIGHTS )
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#else
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,Iu=`#if defined( USE_ENVMAP )
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,Ru=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,Lu=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,Ou=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,Fu=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,Bu=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULARINTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;
		#endif
		#ifdef USE_SPECULARCOLORMAP
			specularColorFactor *= texture2D( specularColorMap, vUv ).rgb;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEENCOLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEENROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;
	#endif
#endif`,Nu=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	#ifdef USE_IRIDESCENCE
		reflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );
	#else
		reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
	#endif
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,Uu=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometry.viewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,zu=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,ku=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,Vu=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,Gu=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,Wu=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,Hu=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,Xu=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,Yu=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,ju=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,qu=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,Zu=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`,Ku=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,$u=`#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,Ju=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,Qu=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,tc=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,ec=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * faceDirection;
			bitangent = bitangent * faceDirection;
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`,ic=`#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,nc=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,rc=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,sc=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,ac=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
	}
#endif`,oc=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,lc=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
	#endif
#endif`,hc=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`,uc=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,cc=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,fc=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`,dc=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,mc=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,pc=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,_c=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,gc=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`,yc=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,xc=`#if NUM_SPOT_LIGHT_COORDS > 0
  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
  uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,vc=`#if NUM_SPOT_LIGHT_COORDS > 0
  uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,bc=`#if defined( USE_SHADOWMAP ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_COORDS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`,Sc=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,Mc=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,wc=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;
	mat4 getBoneMatrix( const in float i ) {
		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );
		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );
		y = dy * ( y + 0.5 );
		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
		mat4 bone = mat4( v1, v2, v3, v4 );
		return bone;
	}
#endif`,Tc=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,Ac=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,Ec=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,Dc=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,Cc=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,Pc=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,Ic=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );
#endif`,Rc=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		#ifdef texture2DLodEXT
			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#else
			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#endif
	}
	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,Lc=`#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`,Oc=`#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`,Fc=`#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`,Bc=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`,Nc=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`,Uc=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`,zc=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const kc=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,Vc=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Gc=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,Wc=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Hc=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,Xc=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Yc=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,jc=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,qc=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,Zc=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,Kc=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,$c=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Jc=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,Qc=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,tf=`#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,ef=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,nf=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,rf=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,sf=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,af=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,of=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`,lf=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,hf=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,uf=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,cf=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,ff=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULARINTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
	#ifdef USE_SPECULARCOLORMAP
		uniform sampler2D specularColorMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEENCOLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEENROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <bsdfs>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,df=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,mf=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,pf=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,_f=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,gf=`#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,yf=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,xf=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,vf=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,It={alphamap_fragment:Gh,alphamap_pars_fragment:Wh,alphatest_fragment:Hh,alphatest_pars_fragment:Xh,aomap_fragment:Yh,aomap_pars_fragment:jh,begin_vertex:qh,beginnormal_vertex:Zh,bsdfs:Kh,iridescence_fragment:$h,bumpmap_pars_fragment:Jh,clipping_planes_fragment:Qh,clipping_planes_pars_fragment:tu,clipping_planes_pars_vertex:eu,clipping_planes_vertex:iu,color_fragment:nu,color_pars_fragment:ru,color_pars_vertex:su,color_vertex:au,common:ou,cube_uv_reflection_fragment:lu,defaultnormal_vertex:hu,displacementmap_pars_vertex:uu,displacementmap_vertex:cu,emissivemap_fragment:fu,emissivemap_pars_fragment:du,encodings_fragment:mu,encodings_pars_fragment:pu,envmap_fragment:_u,envmap_common_pars_fragment:gu,envmap_pars_fragment:yu,envmap_pars_vertex:xu,envmap_physical_pars_fragment:Iu,envmap_vertex:vu,fog_vertex:bu,fog_pars_vertex:Su,fog_fragment:Mu,fog_pars_fragment:wu,gradientmap_pars_fragment:Tu,lightmap_fragment:Au,lightmap_pars_fragment:Eu,lights_lambert_fragment:Du,lights_lambert_pars_fragment:Cu,lights_pars_begin:Pu,lights_toon_fragment:Ru,lights_toon_pars_fragment:Lu,lights_phong_fragment:Ou,lights_phong_pars_fragment:Fu,lights_physical_fragment:Bu,lights_physical_pars_fragment:Nu,lights_fragment_begin:Uu,lights_fragment_maps:zu,lights_fragment_end:ku,logdepthbuf_fragment:Vu,logdepthbuf_pars_fragment:Gu,logdepthbuf_pars_vertex:Wu,logdepthbuf_vertex:Hu,map_fragment:Xu,map_pars_fragment:Yu,map_particle_fragment:ju,map_particle_pars_fragment:qu,metalnessmap_fragment:Zu,metalnessmap_pars_fragment:Ku,morphcolor_vertex:$u,morphnormal_vertex:Ju,morphtarget_pars_vertex:Qu,morphtarget_vertex:tc,normal_fragment_begin:ec,normal_fragment_maps:ic,normal_pars_fragment:nc,normal_pars_vertex:rc,normal_vertex:sc,normalmap_pars_fragment:ac,clearcoat_normal_fragment_begin:oc,clearcoat_normal_fragment_maps:lc,clearcoat_pars_fragment:hc,iridescence_pars_fragment:uc,output_fragment:cc,packing:fc,premultiplied_alpha_fragment:dc,project_vertex:mc,dithering_fragment:pc,dithering_pars_fragment:_c,roughnessmap_fragment:gc,roughnessmap_pars_fragment:yc,shadowmap_pars_fragment:xc,shadowmap_pars_vertex:vc,shadowmap_vertex:bc,shadowmask_pars_fragment:Sc,skinbase_vertex:Mc,skinning_pars_vertex:wc,skinning_vertex:Tc,skinnormal_vertex:Ac,specularmap_fragment:Ec,specularmap_pars_fragment:Dc,tonemapping_fragment:Cc,tonemapping_pars_fragment:Pc,transmission_fragment:Ic,transmission_pars_fragment:Rc,uv_pars_fragment:Lc,uv_pars_vertex:Oc,uv_vertex:Fc,uv2_pars_fragment:Bc,uv2_pars_vertex:Nc,uv2_vertex:Uc,worldpos_vertex:zc,background_vert:kc,background_frag:Vc,backgroundCube_vert:Gc,backgroundCube_frag:Wc,cube_vert:Hc,cube_frag:Xc,depth_vert:Yc,depth_frag:jc,distanceRGBA_vert:qc,distanceRGBA_frag:Zc,equirect_vert:Kc,equirect_frag:$c,linedashed_vert:Jc,linedashed_frag:Qc,meshbasic_vert:tf,meshbasic_frag:ef,meshlambert_vert:nf,meshlambert_frag:rf,meshmatcap_vert:sf,meshmatcap_frag:af,meshnormal_vert:of,meshnormal_frag:lf,meshphong_vert:hf,meshphong_frag:uf,meshphysical_vert:cf,meshphysical_frag:ff,meshtoon_vert:df,meshtoon_frag:mf,points_vert:pf,points_frag:_f,shadow_vert:gf,shadow_frag:yf,sprite_vert:xf,sprite_frag:vf},ut={common:{diffuse:{value:new $t(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new ze},uv2Transform:{value:new ze},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Et(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new $t(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new $t(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new ze}},sprite:{diffuse:{value:new $t(16777215)},opacity:{value:1},center:{value:new Et(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new ze}}},ni={basic:{uniforms:Te([ut.common,ut.specularmap,ut.envmap,ut.aomap,ut.lightmap,ut.fog]),vertexShader:It.meshbasic_vert,fragmentShader:It.meshbasic_frag},lambert:{uniforms:Te([ut.common,ut.specularmap,ut.envmap,ut.aomap,ut.lightmap,ut.emissivemap,ut.bumpmap,ut.normalmap,ut.displacementmap,ut.fog,ut.lights,{emissive:{value:new $t(0)}}]),vertexShader:It.meshlambert_vert,fragmentShader:It.meshlambert_frag},phong:{uniforms:Te([ut.common,ut.specularmap,ut.envmap,ut.aomap,ut.lightmap,ut.emissivemap,ut.bumpmap,ut.normalmap,ut.displacementmap,ut.fog,ut.lights,{emissive:{value:new $t(0)},specular:{value:new $t(1118481)},shininess:{value:30}}]),vertexShader:It.meshphong_vert,fragmentShader:It.meshphong_frag},standard:{uniforms:Te([ut.common,ut.envmap,ut.aomap,ut.lightmap,ut.emissivemap,ut.bumpmap,ut.normalmap,ut.displacementmap,ut.roughnessmap,ut.metalnessmap,ut.fog,ut.lights,{emissive:{value:new $t(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:It.meshphysical_vert,fragmentShader:It.meshphysical_frag},toon:{uniforms:Te([ut.common,ut.aomap,ut.lightmap,ut.emissivemap,ut.bumpmap,ut.normalmap,ut.displacementmap,ut.gradientmap,ut.fog,ut.lights,{emissive:{value:new $t(0)}}]),vertexShader:It.meshtoon_vert,fragmentShader:It.meshtoon_frag},matcap:{uniforms:Te([ut.common,ut.bumpmap,ut.normalmap,ut.displacementmap,ut.fog,{matcap:{value:null}}]),vertexShader:It.meshmatcap_vert,fragmentShader:It.meshmatcap_frag},points:{uniforms:Te([ut.points,ut.fog]),vertexShader:It.points_vert,fragmentShader:It.points_frag},dashed:{uniforms:Te([ut.common,ut.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:It.linedashed_vert,fragmentShader:It.linedashed_frag},depth:{uniforms:Te([ut.common,ut.displacementmap]),vertexShader:It.depth_vert,fragmentShader:It.depth_frag},normal:{uniforms:Te([ut.common,ut.bumpmap,ut.normalmap,ut.displacementmap,{opacity:{value:1}}]),vertexShader:It.meshnormal_vert,fragmentShader:It.meshnormal_frag},sprite:{uniforms:Te([ut.sprite,ut.fog]),vertexShader:It.sprite_vert,fragmentShader:It.sprite_frag},background:{uniforms:{uvTransform:{value:new ze},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:It.background_vert,fragmentShader:It.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:It.backgroundCube_vert,fragmentShader:It.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:It.cube_vert,fragmentShader:It.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:It.equirect_vert,fragmentShader:It.equirect_frag},distanceRGBA:{uniforms:Te([ut.common,ut.displacementmap,{referencePosition:{value:new G},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:It.distanceRGBA_vert,fragmentShader:It.distanceRGBA_frag},shadow:{uniforms:Te([ut.lights,ut.fog,{color:{value:new $t(0)},opacity:{value:1}}]),vertexShader:It.shadow_vert,fragmentShader:It.shadow_frag}};ni.physical={uniforms:Te([ni.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Et(1,1)},clearcoatNormalMap:{value:null},iridescence:{value:0},iridescenceMap:{value:null},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},sheen:{value:0},sheenColor:{value:new $t(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new Et},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new $t(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new $t(1,1,1)},specularColorMap:{value:null}}]),vertexShader:It.meshphysical_vert,fragmentShader:It.meshphysical_frag};const Er={r:0,b:0,g:0};function bf(r,t,e,i,n,s,o){const a=new $t(0);let l=s===!0?0:1,h,u,c=null,f=0,_=null;function y(m,x){let M=!1,b=x.isScene===!0?x.background:null;b&&b.isTexture&&(b=(x.backgroundBlurriness>0?e:t).get(b));const S=r.xr,w=S.getSession&&S.getSession();w&&w.environmentBlendMode==="additive"&&(b=null),b===null?p(a,l):b&&b.isColor&&(p(b,1),M=!0),(r.autoClear||M)&&r.clear(r.autoClearColor,r.autoClearDepth,r.autoClearStencil),b&&(b.isCubeTexture||b.mapping===Vr)?(u===void 0&&(u=new si(new or(1,1,1),new Qi({name:"BackgroundCubeMaterial",uniforms:In(ni.backgroundCube.uniforms),vertexShader:ni.backgroundCube.vertexShader,fragmentShader:ni.backgroundCube.fragmentShader,side:je,depthTest:!1,depthWrite:!1,fog:!1})),u.geometry.deleteAttribute("normal"),u.geometry.deleteAttribute("uv"),u.onBeforeRender=function(E,R,v){this.matrixWorld.copyPosition(v.matrixWorld)},Object.defineProperty(u.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),n.update(u)),u.material.uniforms.envMap.value=b,u.material.uniforms.flipEnvMap.value=b.isCubeTexture&&b.isRenderTargetTexture===!1?-1:1,u.material.uniforms.backgroundBlurriness.value=x.backgroundBlurriness,u.material.uniforms.backgroundIntensity.value=x.backgroundIntensity,u.material.toneMapped=b.encoding!==qt,(c!==b||f!==b.version||_!==r.toneMapping)&&(u.material.needsUpdate=!0,c=b,f=b.version,_=r.toneMapping),u.layers.enableAll(),m.unshift(u,u.geometry,u.material,0,0,null)):b&&b.isTexture&&(h===void 0&&(h=new si(new Gr(2,2),new Qi({name:"BackgroundMaterial",uniforms:In(ni.background.uniforms),vertexShader:ni.background.vertexShader,fragmentShader:ni.background.fragmentShader,side:ji,depthTest:!1,depthWrite:!1,fog:!1})),h.geometry.deleteAttribute("normal"),Object.defineProperty(h.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(h)),h.material.uniforms.t2D.value=b,h.material.uniforms.backgroundIntensity.value=x.backgroundIntensity,h.material.toneMapped=b.encoding!==qt,b.matrixAutoUpdate===!0&&b.updateMatrix(),h.material.uniforms.uvTransform.value.copy(b.matrix),(c!==b||f!==b.version||_!==r.toneMapping)&&(h.material.needsUpdate=!0,c=b,f=b.version,_=r.toneMapping),h.layers.enableAll(),m.unshift(h,h.geometry,h.material,0,0,null))}function p(m,x){m.getRGB(Er,Zo(r)),i.buffers.color.setClear(Er.r,Er.g,Er.b,x,o)}return{getClearColor:function(){return a},setClearColor:function(m,x=1){a.set(m),l=x,p(a,l)},getClearAlpha:function(){return l},setClearAlpha:function(m){l=m,p(a,l)},render:y}}function Sf(r,t,e,i){const n=r.getParameter(34921),s=i.isWebGL2?null:t.get("OES_vertex_array_object"),o=i.isWebGL2||s!==null,a={},l=m(null);let h=l,u=!1;function c(I,k,$,Q,B){let et=!1;if(o){const j=p(Q,$,k);h!==j&&(h=j,_(h.object)),et=x(I,Q,$,B),et&&M(I,Q,$,B)}else{const j=k.wireframe===!0;(h.geometry!==Q.id||h.program!==$.id||h.wireframe!==j)&&(h.geometry=Q.id,h.program=$.id,h.wireframe=j,et=!0)}B!==null&&e.update(B,34963),(et||u)&&(u=!1,v(I,k,$,Q),B!==null&&r.bindBuffer(34963,e.get(B).buffer))}function f(){return i.isWebGL2?r.createVertexArray():s.createVertexArrayOES()}function _(I){return i.isWebGL2?r.bindVertexArray(I):s.bindVertexArrayOES(I)}function y(I){return i.isWebGL2?r.deleteVertexArray(I):s.deleteVertexArrayOES(I)}function p(I,k,$){const Q=$.wireframe===!0;let B=a[I.id];B===void 0&&(B={},a[I.id]=B);let et=B[k.id];et===void 0&&(et={},B[k.id]=et);let j=et[Q];return j===void 0&&(j=m(f()),et[Q]=j),j}function m(I){const k=[],$=[],Q=[];for(let B=0;B<n;B++)k[B]=0,$[B]=0,Q[B]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:k,enabledAttributes:$,attributeDivisors:Q,object:I,attributes:{},index:null}}function x(I,k,$,Q){const B=h.attributes,et=k.attributes;let j=0;const X=$.getAttributes();for(const H in X)if(X[H].location>=0){const rt=B[H];let ct=et[H];if(ct===void 0&&(H==="instanceMatrix"&&I.instanceMatrix&&(ct=I.instanceMatrix),H==="instanceColor"&&I.instanceColor&&(ct=I.instanceColor)),rt===void 0||rt.attribute!==ct||ct&&rt.data!==ct.data)return!0;j++}return h.attributesNum!==j||h.index!==Q}function M(I,k,$,Q){const B={},et=k.attributes;let j=0;const X=$.getAttributes();for(const H in X)if(X[H].location>=0){let rt=et[H];rt===void 0&&(H==="instanceMatrix"&&I.instanceMatrix&&(rt=I.instanceMatrix),H==="instanceColor"&&I.instanceColor&&(rt=I.instanceColor));const ct={};ct.attribute=rt,rt&&rt.data&&(ct.data=rt.data),B[H]=ct,j++}h.attributes=B,h.attributesNum=j,h.index=Q}function b(){const I=h.newAttributes;for(let k=0,$=I.length;k<$;k++)I[k]=0}function S(I){w(I,0)}function w(I,k){const $=h.newAttributes,Q=h.enabledAttributes,B=h.attributeDivisors;$[I]=1,Q[I]===0&&(r.enableVertexAttribArray(I),Q[I]=1),B[I]!==k&&((i.isWebGL2?r:t.get("ANGLE_instanced_arrays"))[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](I,k),B[I]=k)}function E(){const I=h.newAttributes,k=h.enabledAttributes;for(let $=0,Q=k.length;$<Q;$++)k[$]!==I[$]&&(r.disableVertexAttribArray($),k[$]=0)}function R(I,k,$,Q,B,et){i.isWebGL2===!0&&($===5124||$===5125)?r.vertexAttribIPointer(I,k,$,B,et):r.vertexAttribPointer(I,k,$,Q,B,et)}function v(I,k,$,Q){if(i.isWebGL2===!1&&(I.isInstancedMesh||Q.isInstancedBufferGeometry)&&t.get("ANGLE_instanced_arrays")===null)return;b();const B=Q.attributes,et=$.getAttributes(),j=k.defaultAttributeValues;for(const X in et){const H=et[X];if(H.location>=0){let ot=B[X];if(ot===void 0&&(X==="instanceMatrix"&&I.instanceMatrix&&(ot=I.instanceMatrix),X==="instanceColor"&&I.instanceColor&&(ot=I.instanceColor)),ot!==void 0){const rt=ot.normalized,ct=ot.itemSize,Y=e.get(ot);if(Y===void 0)continue;const xt=Y.buffer,mt=Y.type,wt=Y.bytesPerElement;if(ot.isInterleavedBufferAttribute){const yt=ot.data,Wt=yt.stride,Pt=ot.offset;if(yt.isInstancedInterleavedBuffer){for(let Tt=0;Tt<H.locationSize;Tt++)w(H.location+Tt,yt.meshPerAttribute);I.isInstancedMesh!==!0&&Q._maxInstanceCount===void 0&&(Q._maxInstanceCount=yt.meshPerAttribute*yt.count)}else for(let Tt=0;Tt<H.locationSize;Tt++)S(H.location+Tt);r.bindBuffer(34962,xt);for(let Tt=0;Tt<H.locationSize;Tt++)R(H.location+Tt,ct/H.locationSize,mt,rt,Wt*wt,(Pt+ct/H.locationSize*Tt)*wt)}else{if(ot.isInstancedBufferAttribute){for(let yt=0;yt<H.locationSize;yt++)w(H.location+yt,ot.meshPerAttribute);I.isInstancedMesh!==!0&&Q._maxInstanceCount===void 0&&(Q._maxInstanceCount=ot.meshPerAttribute*ot.count)}else for(let yt=0;yt<H.locationSize;yt++)S(H.location+yt);r.bindBuffer(34962,xt);for(let yt=0;yt<H.locationSize;yt++)R(H.location+yt,ct/H.locationSize,mt,rt,ct*wt,ct/H.locationSize*yt*wt)}}else if(j!==void 0){const rt=j[X];if(rt!==void 0)switch(rt.length){case 2:r.vertexAttrib2fv(H.location,rt);break;case 3:r.vertexAttrib3fv(H.location,rt);break;case 4:r.vertexAttrib4fv(H.location,rt);break;default:r.vertexAttrib1fv(H.location,rt)}}}}E()}function D(){q();for(const I in a){const k=a[I];for(const $ in k){const Q=k[$];for(const B in Q)y(Q[B].object),delete Q[B];delete k[$]}delete a[I]}}function L(I){if(a[I.id]===void 0)return;const k=a[I.id];for(const $ in k){const Q=k[$];for(const B in Q)y(Q[B].object),delete Q[B];delete k[$]}delete a[I.id]}function V(I){for(const k in a){const $=a[k];if($[I.id]===void 0)continue;const Q=$[I.id];for(const B in Q)y(Q[B].object),delete Q[B];delete $[I.id]}}function q(){O(),u=!0,h!==l&&(h=l,_(h.object))}function O(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:c,reset:q,resetDefaultState:O,dispose:D,releaseStatesOfGeometry:L,releaseStatesOfProgram:V,initAttributes:b,enableAttribute:S,disableUnusedAttributes:E}}function Mf(r,t,e,i){const n=i.isWebGL2;let s;function o(h){s=h}function a(h,u){r.drawArrays(s,h,u),e.update(u,s,1)}function l(h,u,c){if(c===0)return;let f,_;if(n)f=r,_="drawArraysInstanced";else if(f=t.get("ANGLE_instanced_arrays"),_="drawArraysInstancedANGLE",f===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}f[_](s,h,u,c),e.update(u,s,c)}this.setMode=o,this.render=a,this.renderInstances=l}function wf(r,t,e){let i;function n(){if(i!==void 0)return i;if(t.has("EXT_texture_filter_anisotropic")===!0){const R=t.get("EXT_texture_filter_anisotropic");i=r.getParameter(R.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i}function s(R){if(R==="highp"){if(r.getShaderPrecisionFormat(35633,36338).precision>0&&r.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";R="mediump"}return R==="mediump"&&r.getShaderPrecisionFormat(35633,36337).precision>0&&r.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const o=typeof WebGL2RenderingContext<"u"&&r instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext<"u"&&r instanceof WebGL2ComputeRenderingContext;let a=e.precision!==void 0?e.precision:"highp";const l=s(a);l!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",l,"instead."),a=l);const h=o||t.has("WEBGL_draw_buffers"),u=e.logarithmicDepthBuffer===!0,c=r.getParameter(34930),f=r.getParameter(35660),_=r.getParameter(3379),y=r.getParameter(34076),p=r.getParameter(34921),m=r.getParameter(36347),x=r.getParameter(36348),M=r.getParameter(36349),b=f>0,S=o||t.has("OES_texture_float"),w=b&&S,E=o?r.getParameter(36183):0;return{isWebGL2:o,drawBuffers:h,getMaxAnisotropy:n,getMaxPrecision:s,precision:a,logarithmicDepthBuffer:u,maxTextures:c,maxVertexTextures:f,maxTextureSize:_,maxCubemapSize:y,maxAttributes:p,maxVertexUniforms:m,maxVaryings:x,maxFragmentUniforms:M,vertexTextures:b,floatFragmentTextures:S,floatVertexTextures:w,maxSamples:E}}function Tf(r){const t=this;let e=null,i=0,n=!1,s=!1;const o=new Oi,a=new ze,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(c,f,_){const y=c.length!==0||f||i!==0||n;return n=f,e=u(c,_,0),i=c.length,y},this.beginShadows=function(){s=!0,u(null)},this.endShadows=function(){s=!1,h()},this.setState=function(c,f,_){const y=c.clippingPlanes,p=c.clipIntersection,m=c.clipShadows,x=r.get(c);if(!n||y===null||y.length===0||s&&!m)s?u(null):h();else{const M=s?0:i,b=M*4;let S=x.clippingState||null;l.value=S,S=u(y,f,b,_);for(let w=0;w!==b;++w)S[w]=e[w];x.clippingState=S,this.numIntersection=p?this.numPlanes:0,this.numPlanes+=M}};function h(){l.value!==e&&(l.value=e,l.needsUpdate=i>0),t.numPlanes=i,t.numIntersection=0}function u(c,f,_,y){const p=c!==null?c.length:0;let m=null;if(p!==0){if(m=l.value,y!==!0||m===null){const x=_+p*4,M=f.matrixWorldInverse;a.getNormalMatrix(M),(m===null||m.length<x)&&(m=new Float32Array(x));for(let b=0,S=_;b!==p;++b,S+=4)o.copy(c[b]).applyMatrix4(M,a),o.normal.toArray(m,S),m[S+3]=o.constant}l.value=m,l.needsUpdate=!0}return t.numPlanes=p,t.numIntersection=0,m}}function Af(r){let t=new WeakMap;function e(o,a){return a===Ns?o.mapping=Dn:a===Us&&(o.mapping=Cn),o}function i(o){if(o&&o.isTexture&&o.isRenderTargetTexture===!1){const a=o.mapping;if(a===Ns||a===Us)if(t.has(o)){const l=t.get(o).texture;return e(l,o.mapping)}else{const l=o.image;if(l&&l.height>0){const h=new Uh(l.height/2);return h.fromEquirectangularTexture(r,o),t.set(o,h),o.addEventListener("dispose",n),e(h.texture,o.mapping)}else return null}}return o}function n(o){const a=o.target;a.removeEventListener("dispose",n);const l=t.get(a);l!==void 0&&(t.delete(a),l.dispose())}function s(){t=new WeakMap}return{get:i,dispose:s}}class Ef extends Ko{constructor(t=-1,e=1,i=1,n=-1,s=.1,o=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=i,this.bottom=n,this.near=s,this.far=o,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,i,n,s,o){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,n=(this.top+this.bottom)/2;let s=i-t,o=i+t,a=n+e,l=n-e;if(this.view!==null&&this.view.enabled){const h=(this.right-this.left)/this.view.fullWidth/this.zoom,u=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=h*this.view.offsetX,o=s+h*this.view.width,a-=u*this.view.offsetY,l=a-u*this.view.height}this.projectionMatrix.makeOrthographic(s,o,a,l,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}}const Tn=4,Xa=[.125,.215,.35,.446,.526,.582],Ui=20,Es=new Ef,Ya=new $t;let Ds=null;const Fi=(1+Math.sqrt(5))/2,xn=1/Fi,ja=[new G(1,1,1),new G(-1,1,1),new G(1,1,-1),new G(-1,1,-1),new G(0,Fi,xn),new G(0,Fi,-xn),new G(xn,0,Fi),new G(-xn,0,Fi),new G(Fi,xn,0),new G(-Fi,xn,0)];class qa{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,i=.1,n=100){Ds=this._renderer.getRenderTarget(),this._setSize(256);const s=this._allocateTargets();return s.depthBuffer=!0,this._sceneToCubeUV(t,i,n,s),e>0&&this._blur(s,0,0,e),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=$a(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=Ka(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Ds),t.scissorTest=!1,Dr(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===Dn||t.mapping===Cn?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Ds=this._renderer.getRenderTarget();const i=e||this._allocateTargets();return this._textureToCubeUV(t,i),this._applyPMREM(i),this._cleanup(i),i}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,i={magFilter:We,minFilter:We,generateMipmaps:!1,type:tr,format:ti,encoding:Zi,depthBuffer:!1},n=Za(t,e,i);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=Za(t,e,i);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=Df(s)),this._blurMaterial=Cf(s,t,e)}return n}_compileMaterial(t){const e=new si(this._lodPlanes[0],t);this._renderer.compile(e,Es)}_sceneToCubeUV(t,e,i,n){const a=new He(90,1,e,i),l=[1,-1,1,1,1,1],h=[1,1,1,-1,-1,-1],u=this._renderer,c=u.autoClear,f=u.toneMapping;u.getClearColor(Ya),u.toneMapping=pi,u.autoClear=!1;const _=new Ji({name:"PMREM.Background",side:je,depthWrite:!1,depthTest:!1}),y=new si(new or,_);let p=!1;const m=t.background;m?m.isColor&&(_.color.copy(m),t.background=null,p=!0):(_.color.copy(Ya),p=!0);for(let x=0;x<6;x++){const M=x%3;M===0?(a.up.set(0,l[x],0),a.lookAt(h[x],0,0)):M===1?(a.up.set(0,0,l[x]),a.lookAt(0,h[x],0)):(a.up.set(0,l[x],0),a.lookAt(0,0,h[x]));const b=this._cubeSize;Dr(n,M*b,x>2?b:0,b,b),u.setRenderTarget(n),p&&u.render(y,a),u.render(t,a)}y.geometry.dispose(),y.material.dispose(),u.toneMapping=f,u.autoClear=c,t.background=m}_textureToCubeUV(t,e){const i=this._renderer,n=t.mapping===Dn||t.mapping===Cn;n?(this._cubemapMaterial===null&&(this._cubemapMaterial=$a()),this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=Ka());const s=n?this._cubemapMaterial:this._equirectMaterial,o=new si(this._lodPlanes[0],s),a=s.uniforms;a.envMap.value=t;const l=this._cubeSize;Dr(e,0,0,3*l,2*l),i.setRenderTarget(e),i.render(o,Es)}_applyPMREM(t){const e=this._renderer,i=e.autoClear;e.autoClear=!1;for(let n=1;n<this._lodPlanes.length;n++){const s=Math.sqrt(this._sigmas[n]*this._sigmas[n]-this._sigmas[n-1]*this._sigmas[n-1]),o=ja[(n-1)%ja.length];this._blur(t,n-1,n,s,o)}e.autoClear=i}_blur(t,e,i,n,s){const o=this._pingPongRenderTarget;this._halfBlur(t,o,e,i,n,"latitudinal",s),this._halfBlur(o,t,i,i,n,"longitudinal",s)}_halfBlur(t,e,i,n,s,o,a){const l=this._renderer,h=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const u=3,c=new si(this._lodPlanes[n],h),f=h.uniforms,_=this._sizeLods[i]-1,y=isFinite(s)?Math.PI/(2*_):2*Math.PI/(2*Ui-1),p=s/y,m=isFinite(s)?1+Math.floor(u*p):Ui;m>Ui&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${m} samples when the maximum is set to ${Ui}`);const x=[];let M=0;for(let R=0;R<Ui;++R){const v=R/p,D=Math.exp(-v*v/2);x.push(D),R===0?M+=D:R<m&&(M+=2*D)}for(let R=0;R<x.length;R++)x[R]=x[R]/M;f.envMap.value=t.texture,f.samples.value=m,f.weights.value=x,f.latitudinal.value=o==="latitudinal",a&&(f.poleAxis.value=a);const{_lodMax:b}=this;f.dTheta.value=y,f.mipInt.value=b-i;const S=this._sizeLods[n],w=3*S*(n>b-Tn?n-b+Tn:0),E=4*(this._cubeSize-S);Dr(e,w,E,3*S,2*S),l.setRenderTarget(e),l.render(c,Es)}}function Df(r){const t=[],e=[],i=[];let n=r;const s=r-Tn+1+Xa.length;for(let o=0;o<s;o++){const a=Math.pow(2,n);e.push(a);let l=1/a;o>r-Tn?l=Xa[o-r+Tn-1]:o===0&&(l=0),i.push(l);const h=1/(a-2),u=-h,c=1+h,f=[u,u,c,u,c,c,u,u,c,c,u,c],_=6,y=6,p=3,m=2,x=1,M=new Float32Array(p*y*_),b=new Float32Array(m*y*_),S=new Float32Array(x*y*_);for(let E=0;E<_;E++){const R=E%3*2/3-1,v=E>2?0:-1,D=[R,v,0,R+2/3,v,0,R+2/3,v+1,0,R,v,0,R+2/3,v+1,0,R,v+1,0];M.set(D,p*y*E),b.set(f,m*y*E);const L=[E,E,E,E,E,E];S.set(L,x*y*E)}const w=new _i;w.setAttribute("position",new ge(M,p)),w.setAttribute("uv",new ge(b,m)),w.setAttribute("faceIndex",new ge(S,x)),t.push(w),n>Tn&&n--}return{lodPlanes:t,sizeLods:e,sigmas:i}}function Za(r,t,e){const i=new Ki(r,t,e);return i.texture.mapping=Vr,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function Dr(r,t,e,i,n){r.viewport.set(t,e,i,n),r.scissor.set(t,e,i,n)}function Cf(r,t,e){const i=new Float32Array(Ui),n=new G(0,1,0);return new Qi({name:"SphericalGaussianBlur",defines:{n:Ui,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/e,CUBEUV_MAX_MIP:`${r}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:n}},vertexShader:qs(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:Ti,depthTest:!1,depthWrite:!1})}function Ka(){return new Qi({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:qs(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:Ti,depthTest:!1,depthWrite:!1})}function $a(){return new Qi({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:qs(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:Ti,depthTest:!1,depthWrite:!1})}function qs(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function Pf(r){let t=new WeakMap,e=null;function i(a){if(a&&a.isTexture){const l=a.mapping,h=l===Ns||l===Us,u=l===Dn||l===Cn;if(h||u)if(a.isRenderTargetTexture&&a.needsPMREMUpdate===!0){a.needsPMREMUpdate=!1;let c=t.get(a);return e===null&&(e=new qa(r)),c=h?e.fromEquirectangular(a,c):e.fromCubemap(a,c),t.set(a,c),c.texture}else{if(t.has(a))return t.get(a).texture;{const c=a.image;if(h&&c&&c.height>0||u&&c&&n(c)){e===null&&(e=new qa(r));const f=h?e.fromEquirectangular(a):e.fromCubemap(a);return t.set(a,f),a.addEventListener("dispose",s),f.texture}else return null}}}return a}function n(a){let l=0;const h=6;for(let u=0;u<h;u++)a[u]!==void 0&&l++;return l===h}function s(a){const l=a.target;l.removeEventListener("dispose",s);const h=t.get(l);h!==void 0&&(t.delete(l),h.dispose())}function o(){t=new WeakMap,e!==null&&(e.dispose(),e=null)}return{get:i,dispose:o}}function If(r){const t={};function e(i){if(t[i]!==void 0)return t[i];let n;switch(i){case"WEBGL_depth_texture":n=r.getExtension("WEBGL_depth_texture")||r.getExtension("MOZ_WEBGL_depth_texture")||r.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=r.getExtension("EXT_texture_filter_anisotropic")||r.getExtension("MOZ_EXT_texture_filter_anisotropic")||r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=r.getExtension("WEBGL_compressed_texture_s3tc")||r.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=r.getExtension("WEBGL_compressed_texture_pvrtc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=r.getExtension(i)}return t[i]=n,n}return{has:function(i){return e(i)!==null},init:function(i){i.isWebGL2?e("EXT_color_buffer_float"):(e("WEBGL_depth_texture"),e("OES_texture_float"),e("OES_texture_half_float"),e("OES_texture_half_float_linear"),e("OES_standard_derivatives"),e("OES_element_index_uint"),e("OES_vertex_array_object"),e("ANGLE_instanced_arrays")),e("OES_texture_float_linear"),e("EXT_color_buffer_half_float"),e("WEBGL_multisampled_render_to_texture")},get:function(i){const n=e(i);return n===null&&console.warn("THREE.WebGLRenderer: "+i+" extension not supported."),n}}}function Rf(r,t,e,i){const n={},s=new WeakMap;function o(c){const f=c.target;f.index!==null&&t.remove(f.index);for(const y in f.attributes)t.remove(f.attributes[y]);f.removeEventListener("dispose",o),delete n[f.id];const _=s.get(f);_&&(t.remove(_),s.delete(f)),i.releaseStatesOfGeometry(f),f.isInstancedBufferGeometry===!0&&delete f._maxInstanceCount,e.memory.geometries--}function a(c,f){return n[f.id]===!0||(f.addEventListener("dispose",o),n[f.id]=!0,e.memory.geometries++),f}function l(c){const f=c.attributes;for(const y in f)t.update(f[y],34962);const _=c.morphAttributes;for(const y in _){const p=_[y];for(let m=0,x=p.length;m<x;m++)t.update(p[m],34962)}}function h(c){const f=[],_=c.index,y=c.attributes.position;let p=0;if(_!==null){const M=_.array;p=_.version;for(let b=0,S=M.length;b<S;b+=3){const w=M[b+0],E=M[b+1],R=M[b+2];f.push(w,E,E,R,R,w)}}else{const M=y.array;p=y.version;for(let b=0,S=M.length/3-1;b<S;b+=3){const w=b+0,E=b+1,R=b+2;f.push(w,E,E,R,R,w)}}const m=new(Vo(f)?qo:jo)(f,1);m.version=p;const x=s.get(c);x&&t.remove(x),s.set(c,m)}function u(c){const f=s.get(c);if(f){const _=c.index;_!==null&&f.version<_.version&&h(c)}else h(c);return s.get(c)}return{get:a,update:l,getWireframeAttribute:u}}function Lf(r,t,e,i){const n=i.isWebGL2;let s;function o(f){s=f}let a,l;function h(f){a=f.type,l=f.bytesPerElement}function u(f,_){r.drawElements(s,_,a,f*l),e.update(_,s,1)}function c(f,_,y){if(y===0)return;let p,m;if(n)p=r,m="drawElementsInstanced";else if(p=t.get("ANGLE_instanced_arrays"),m="drawElementsInstancedANGLE",p===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}p[m](s,_,a,f*l,y),e.update(_,s,y)}this.setMode=o,this.setIndex=h,this.render=u,this.renderInstances=c}function Of(r){const t={geometries:0,textures:0},e={frame:0,calls:0,triangles:0,points:0,lines:0};function i(s,o,a){switch(e.calls++,o){case 4:e.triangles+=a*(s/3);break;case 1:e.lines+=a*(s/2);break;case 3:e.lines+=a*(s-1);break;case 2:e.lines+=a*s;break;case 0:e.points+=a*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function n(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0}return{memory:t,render:e,programs:null,autoReset:!0,reset:n,update:i}}function Ff(r,t){return r[0]-t[0]}function Bf(r,t){return Math.abs(t[1])-Math.abs(r[1])}function Nf(r,t,e){const i={},n=new Float32Array(8),s=new WeakMap,o=new ye,a=[];for(let h=0;h<8;h++)a[h]=[h,0];function l(h,u,c,f){const _=h.morphTargetInfluences;if(t.isWebGL2===!0){const y=u.morphAttributes.position||u.morphAttributes.normal||u.morphAttributes.color,p=y!==void 0?y.length:0;let m=s.get(u);if(m===void 0||m.count!==p){let k=function(){O.dispose(),s.delete(u),u.removeEventListener("dispose",k)};m!==void 0&&m.texture.dispose();const b=u.morphAttributes.position!==void 0,S=u.morphAttributes.normal!==void 0,w=u.morphAttributes.color!==void 0,E=u.morphAttributes.position||[],R=u.morphAttributes.normal||[],v=u.morphAttributes.color||[];let D=0;b===!0&&(D=1),S===!0&&(D=2),w===!0&&(D=3);let L=u.attributes.position.count*D,V=1;L>t.maxTextureSize&&(V=Math.ceil(L/t.maxTextureSize),L=t.maxTextureSize);const q=new Float32Array(L*V*4*p),O=new Xo(q,L,V,p);O.type=Vi,O.needsUpdate=!0;const I=D*4;for(let $=0;$<p;$++){const Q=E[$],B=R[$],et=v[$],j=L*V*4*$;for(let X=0;X<Q.count;X++){const H=X*I;b===!0&&(o.fromBufferAttribute(Q,X),q[j+H+0]=o.x,q[j+H+1]=o.y,q[j+H+2]=o.z,q[j+H+3]=0),S===!0&&(o.fromBufferAttribute(B,X),q[j+H+4]=o.x,q[j+H+5]=o.y,q[j+H+6]=o.z,q[j+H+7]=0),w===!0&&(o.fromBufferAttribute(et,X),q[j+H+8]=o.x,q[j+H+9]=o.y,q[j+H+10]=o.z,q[j+H+11]=et.itemSize===4?o.w:1)}}m={count:p,texture:O,size:new Et(L,V)},s.set(u,m),u.addEventListener("dispose",k)}let x=0;for(let b=0;b<_.length;b++)x+=_[b];const M=u.morphTargetsRelative?1:1-x;f.getUniforms().setValue(r,"morphTargetBaseInfluence",M),f.getUniforms().setValue(r,"morphTargetInfluences",_),f.getUniforms().setValue(r,"morphTargetsTexture",m.texture,e),f.getUniforms().setValue(r,"morphTargetsTextureSize",m.size)}else{const y=_===void 0?0:_.length;let p=i[u.id];if(p===void 0||p.length!==y){p=[];for(let S=0;S<y;S++)p[S]=[S,0];i[u.id]=p}for(let S=0;S<y;S++){const w=p[S];w[0]=S,w[1]=_[S]}p.sort(Bf);for(let S=0;S<8;S++)S<y&&p[S][1]?(a[S][0]=p[S][0],a[S][1]=p[S][1]):(a[S][0]=Number.MAX_SAFE_INTEGER,a[S][1]=0);a.sort(Ff);const m=u.morphAttributes.position,x=u.morphAttributes.normal;let M=0;for(let S=0;S<8;S++){const w=a[S],E=w[0],R=w[1];E!==Number.MAX_SAFE_INTEGER&&R?(m&&u.getAttribute("morphTarget"+S)!==m[E]&&u.setAttribute("morphTarget"+S,m[E]),x&&u.getAttribute("morphNormal"+S)!==x[E]&&u.setAttribute("morphNormal"+S,x[E]),n[S]=R,M+=R):(m&&u.hasAttribute("morphTarget"+S)===!0&&u.deleteAttribute("morphTarget"+S),x&&u.hasAttribute("morphNormal"+S)===!0&&u.deleteAttribute("morphNormal"+S),n[S]=0)}const b=u.morphTargetsRelative?1:1-M;f.getUniforms().setValue(r,"morphTargetBaseInfluence",b),f.getUniforms().setValue(r,"morphTargetInfluences",n)}}return{update:l}}function Uf(r,t,e,i){let n=new WeakMap;function s(l){const h=i.render.frame,u=l.geometry,c=t.get(l,u);return n.get(c)!==h&&(t.update(c),n.set(c,h)),l.isInstancedMesh&&(l.hasEventListener("dispose",a)===!1&&l.addEventListener("dispose",a),e.update(l.instanceMatrix,34962),l.instanceColor!==null&&e.update(l.instanceColor,34962)),c}function o(){n=new WeakMap}function a(l){const h=l.target;h.removeEventListener("dispose",a),e.remove(h.instanceMatrix),h.instanceColor!==null&&e.remove(h.instanceColor)}return{update:s,dispose:o}}const tl=new Le,el=new Xo,il=new bh,nl=new $o,Ja=[],Qa=[],to=new Float32Array(16),eo=new Float32Array(9),io=new Float32Array(4);function Ln(r,t,e){const i=r[0];if(i<=0||i>0)return r;const n=t*e;let s=Ja[n];if(s===void 0&&(s=new Float32Array(n),Ja[n]=s),t!==0){i.toArray(s,0);for(let o=1,a=0;o!==t;++o)a+=e,r[o].toArray(s,a)}return s}function he(r,t){if(r.length!==t.length)return!1;for(let e=0,i=r.length;e<i;e++)if(r[e]!==t[e])return!1;return!0}function ue(r,t){for(let e=0,i=t.length;e<i;e++)r[e]=t[e]}function Wr(r,t){let e=Qa[t];e===void 0&&(e=new Int32Array(t),Qa[t]=e);for(let i=0;i!==t;++i)e[i]=r.allocateTextureUnit();return e}function zf(r,t){const e=this.cache;e[0]!==t&&(r.uniform1f(this.addr,t),e[0]=t)}function kf(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(he(e,t))return;r.uniform2fv(this.addr,t),ue(e,t)}}function Vf(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(t.r!==void 0)(e[0]!==t.r||e[1]!==t.g||e[2]!==t.b)&&(r.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(he(e,t))return;r.uniform3fv(this.addr,t),ue(e,t)}}function Gf(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(he(e,t))return;r.uniform4fv(this.addr,t),ue(e,t)}}function Wf(r,t){const e=this.cache,i=t.elements;if(i===void 0){if(he(e,t))return;r.uniformMatrix2fv(this.addr,!1,t),ue(e,t)}else{if(he(e,i))return;io.set(i),r.uniformMatrix2fv(this.addr,!1,io),ue(e,i)}}function Hf(r,t){const e=this.cache,i=t.elements;if(i===void 0){if(he(e,t))return;r.uniformMatrix3fv(this.addr,!1,t),ue(e,t)}else{if(he(e,i))return;eo.set(i),r.uniformMatrix3fv(this.addr,!1,eo),ue(e,i)}}function Xf(r,t){const e=this.cache,i=t.elements;if(i===void 0){if(he(e,t))return;r.uniformMatrix4fv(this.addr,!1,t),ue(e,t)}else{if(he(e,i))return;to.set(i),r.uniformMatrix4fv(this.addr,!1,to),ue(e,i)}}function Yf(r,t){const e=this.cache;e[0]!==t&&(r.uniform1i(this.addr,t),e[0]=t)}function jf(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2i(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(he(e,t))return;r.uniform2iv(this.addr,t),ue(e,t)}}function qf(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3i(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(he(e,t))return;r.uniform3iv(this.addr,t),ue(e,t)}}function Zf(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4i(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(he(e,t))return;r.uniform4iv(this.addr,t),ue(e,t)}}function Kf(r,t){const e=this.cache;e[0]!==t&&(r.uniform1ui(this.addr,t),e[0]=t)}function $f(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2ui(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(he(e,t))return;r.uniform2uiv(this.addr,t),ue(e,t)}}function Jf(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3ui(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(he(e,t))return;r.uniform3uiv(this.addr,t),ue(e,t)}}function Qf(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4ui(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(he(e,t))return;r.uniform4uiv(this.addr,t),ue(e,t)}}function td(r,t,e){const i=this.cache,n=e.allocateTextureUnit();i[0]!==n&&(r.uniform1i(this.addr,n),i[0]=n),e.setTexture2D(t||tl,n)}function ed(r,t,e){const i=this.cache,n=e.allocateTextureUnit();i[0]!==n&&(r.uniform1i(this.addr,n),i[0]=n),e.setTexture3D(t||il,n)}function id(r,t,e){const i=this.cache,n=e.allocateTextureUnit();i[0]!==n&&(r.uniform1i(this.addr,n),i[0]=n),e.setTextureCube(t||nl,n)}function nd(r,t,e){const i=this.cache,n=e.allocateTextureUnit();i[0]!==n&&(r.uniform1i(this.addr,n),i[0]=n),e.setTexture2DArray(t||el,n)}function rd(r){switch(r){case 5126:return zf;case 35664:return kf;case 35665:return Vf;case 35666:return Gf;case 35674:return Wf;case 35675:return Hf;case 35676:return Xf;case 5124:case 35670:return Yf;case 35667:case 35671:return jf;case 35668:case 35672:return qf;case 35669:case 35673:return Zf;case 5125:return Kf;case 36294:return $f;case 36295:return Jf;case 36296:return Qf;case 35678:case 36198:case 36298:case 36306:case 35682:return td;case 35679:case 36299:case 36307:return ed;case 35680:case 36300:case 36308:case 36293:return id;case 36289:case 36303:case 36311:case 36292:return nd}}function sd(r,t){r.uniform1fv(this.addr,t)}function ad(r,t){const e=Ln(t,this.size,2);r.uniform2fv(this.addr,e)}function od(r,t){const e=Ln(t,this.size,3);r.uniform3fv(this.addr,e)}function ld(r,t){const e=Ln(t,this.size,4);r.uniform4fv(this.addr,e)}function hd(r,t){const e=Ln(t,this.size,4);r.uniformMatrix2fv(this.addr,!1,e)}function ud(r,t){const e=Ln(t,this.size,9);r.uniformMatrix3fv(this.addr,!1,e)}function cd(r,t){const e=Ln(t,this.size,16);r.uniformMatrix4fv(this.addr,!1,e)}function fd(r,t){r.uniform1iv(this.addr,t)}function dd(r,t){r.uniform2iv(this.addr,t)}function md(r,t){r.uniform3iv(this.addr,t)}function pd(r,t){r.uniform4iv(this.addr,t)}function _d(r,t){r.uniform1uiv(this.addr,t)}function gd(r,t){r.uniform2uiv(this.addr,t)}function yd(r,t){r.uniform3uiv(this.addr,t)}function xd(r,t){r.uniform4uiv(this.addr,t)}function vd(r,t,e){const i=this.cache,n=t.length,s=Wr(e,n);he(i,s)||(r.uniform1iv(this.addr,s),ue(i,s));for(let o=0;o!==n;++o)e.setTexture2D(t[o]||tl,s[o])}function bd(r,t,e){const i=this.cache,n=t.length,s=Wr(e,n);he(i,s)||(r.uniform1iv(this.addr,s),ue(i,s));for(let o=0;o!==n;++o)e.setTexture3D(t[o]||il,s[o])}function Sd(r,t,e){const i=this.cache,n=t.length,s=Wr(e,n);he(i,s)||(r.uniform1iv(this.addr,s),ue(i,s));for(let o=0;o!==n;++o)e.setTextureCube(t[o]||nl,s[o])}function Md(r,t,e){const i=this.cache,n=t.length,s=Wr(e,n);he(i,s)||(r.uniform1iv(this.addr,s),ue(i,s));for(let o=0;o!==n;++o)e.setTexture2DArray(t[o]||el,s[o])}function wd(r){switch(r){case 5126:return sd;case 35664:return ad;case 35665:return od;case 35666:return ld;case 35674:return hd;case 35675:return ud;case 35676:return cd;case 5124:case 35670:return fd;case 35667:case 35671:return dd;case 35668:case 35672:return md;case 35669:case 35673:return pd;case 5125:return _d;case 36294:return gd;case 36295:return yd;case 36296:return xd;case 35678:case 36198:case 36298:case 36306:case 35682:return vd;case 35679:case 36299:case 36307:return bd;case 35680:case 36300:case 36308:case 36293:return Sd;case 36289:case 36303:case 36311:case 36292:return Md}}class Td{constructor(t,e,i){this.id=t,this.addr=i,this.cache=[],this.setValue=rd(e.type)}}class Ad{constructor(t,e,i){this.id=t,this.addr=i,this.cache=[],this.size=e.size,this.setValue=wd(e.type)}}class Ed{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,i){const n=this.seq;for(let s=0,o=n.length;s!==o;++s){const a=n[s];a.setValue(t,e[a.id],i)}}}const Cs=/(\w+)(\])?(\[|\.)?/g;function no(r,t){r.seq.push(t),r.map[t.id]=t}function Dd(r,t,e){const i=r.name,n=i.length;for(Cs.lastIndex=0;;){const s=Cs.exec(i),o=Cs.lastIndex;let a=s[1];const l=s[2]==="]",h=s[3];if(l&&(a=a|0),h===void 0||h==="["&&o+2===n){no(e,h===void 0?new Td(a,r,t):new Ad(a,r,t));break}else{let c=e.map[a];c===void 0&&(c=new Ed(a),no(e,c)),e=c}}}class Lr{constructor(t,e){this.seq=[],this.map={};const i=t.getProgramParameter(e,35718);for(let n=0;n<i;++n){const s=t.getActiveUniform(e,n),o=t.getUniformLocation(e,s.name);Dd(s,o,this)}}setValue(t,e,i,n){const s=this.map[e];s!==void 0&&s.setValue(t,i,n)}setOptional(t,e,i){const n=e[i];n!==void 0&&this.setValue(t,i,n)}static upload(t,e,i,n){for(let s=0,o=e.length;s!==o;++s){const a=e[s],l=i[a.id];l.needsUpdate!==!1&&a.setValue(t,l.value,n)}}static seqWithValue(t,e){const i=[];for(let n=0,s=t.length;n!==s;++n){const o=t[n];o.id in e&&i.push(o)}return i}}function ro(r,t,e){const i=r.createShader(t);return r.shaderSource(i,e),r.compileShader(i),i}let Cd=0;function Pd(r,t){const e=r.split(`
`),i=[],n=Math.max(t-6,0),s=Math.min(t+6,e.length);for(let o=n;o<s;o++){const a=o+1;i.push(`${a===t?">":" "} ${a}: ${e[o]}`)}return i.join(`
`)}function Id(r){switch(r){case Zi:return["Linear","( value )"];case qt:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",r),["Linear","( value )"]}}function so(r,t,e){const i=r.getShaderParameter(t,35713),n=r.getShaderInfoLog(t).trim();if(i&&n==="")return"";const s=/ERROR: 0:(\d+)/.exec(n);if(s){const o=parseInt(s[1]);return e.toUpperCase()+`

`+n+`

`+Pd(r.getShaderSource(t),o)}else return n}function Rd(r,t){const e=Id(t);return"vec4 "+r+"( vec4 value ) { return LinearTo"+e[0]+e[1]+"; }"}function Ld(r,t){let e;switch(t){case jl:e="Linear";break;case ql:e="Reinhard";break;case Zl:e="OptimizedCineon";break;case Kl:e="ACESFilmic";break;case $l:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+r+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}function Od(r){return[r.extensionDerivatives||r.envMapCubeUVHeight||r.bumpMap||r.tangentSpaceNormalMap||r.clearcoatNormalMap||r.flatShading||r.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(r.extensionFragDepth||r.logarithmicDepthBuffer)&&r.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",r.extensionDrawBuffers&&r.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(r.extensionShaderTextureLOD||r.envMap||r.transmission)&&r.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Yn).join(`
`)}function Fd(r){const t=[];for(const e in r){const i=r[e];i!==!1&&t.push("#define "+e+" "+i)}return t.join(`
`)}function Bd(r,t){const e={},i=r.getProgramParameter(t,35721);for(let n=0;n<i;n++){const s=r.getActiveAttrib(t,n),o=s.name;let a=1;s.type===35674&&(a=2),s.type===35675&&(a=3),s.type===35676&&(a=4),e[o]={type:s.type,location:r.getAttribLocation(t,o),locationSize:a}}return e}function Yn(r){return r!==""}function ao(r,t){const e=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return r.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,e).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function oo(r,t){return r.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const Nd=/^[ \t]*#include +<([\w\d./]+)>/gm;function Ws(r){return r.replace(Nd,Ud)}function Ud(r,t){const e=It[t];if(e===void 0)throw new Error("Can not resolve #include <"+t+">");return Ws(e)}const zd=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function lo(r){return r.replace(zd,kd)}function kd(r,t,e,i){let n="";for(let s=parseInt(t);s<parseInt(e);s++)n+=i.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return n}function ho(r){let t="precision "+r.precision+` float;
precision `+r.precision+" int;";return r.precision==="highp"?t+=`
#define HIGH_PRECISION`:r.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:r.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function Vd(r){let t="SHADOWMAP_TYPE_BASIC";return r.shadowMapType===Fo?t="SHADOWMAP_TYPE_PCF":r.shadowMapType===Tl?t="SHADOWMAP_TYPE_PCF_SOFT":r.shadowMapType===Xn&&(t="SHADOWMAP_TYPE_VSM"),t}function Gd(r){let t="ENVMAP_TYPE_CUBE";if(r.envMap)switch(r.envMapMode){case Dn:case Cn:t="ENVMAP_TYPE_CUBE";break;case Vr:t="ENVMAP_TYPE_CUBE_UV";break}return t}function Wd(r){let t="ENVMAP_MODE_REFLECTION";if(r.envMap)switch(r.envMapMode){case Cn:t="ENVMAP_MODE_REFRACTION";break}return t}function Hd(r){let t="ENVMAP_BLENDING_NONE";if(r.envMap)switch(r.combine){case Uo:t="ENVMAP_BLENDING_MULTIPLY";break;case Xl:t="ENVMAP_BLENDING_MIX";break;case Yl:t="ENVMAP_BLENDING_ADD";break}return t}function Xd(r){const t=r.envMapCubeUVHeight;if(t===null)return null;const e=Math.log2(t)-2,i=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,e),7*16)),texelHeight:i,maxMip:e}}function Yd(r,t,e,i){const n=r.getContext(),s=e.defines;let o=e.vertexShader,a=e.fragmentShader;const l=Vd(e),h=Gd(e),u=Wd(e),c=Hd(e),f=Xd(e),_=e.isWebGL2?"":Od(e),y=Fd(s),p=n.createProgram();let m,x,M=e.glslVersion?"#version "+e.glslVersion+`
`:"";e.isRawShaderMaterial?(m=[y].filter(Yn).join(`
`),m.length>0&&(m+=`
`),x=[_,y].filter(Yn).join(`
`),x.length>0&&(x+=`
`)):(m=[ho(e),"#define SHADER_NAME "+e.shaderName,y,e.instancing?"#define USE_INSTANCING":"",e.instancingColor?"#define USE_INSTANCING_COLOR":"",e.supportsVertexTextures?"#define VERTEX_TEXTURES":"",e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+u:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMap&&e.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",e.normalMap&&e.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.displacementMap&&e.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",e.specularColorMap?"#define USE_SPECULARCOLORMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.sheenColorMap?"#define USE_SHEENCOLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",e.vertexTangents?"#define USE_TANGENT":"",e.vertexColors?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUvs?"#define USE_UV":"",e.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals&&e.flatShading===!1?"#define USE_MORPHNORMALS":"",e.morphColors&&e.isWebGL2?"#define USE_MORPHCOLORS":"",e.morphTargetsCount>0&&e.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",e.morphTargetsCount>0&&e.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+e.morphTextureStride:"",e.morphTargetsCount>0&&e.isWebGL2?"#define MORPHTARGETS_COUNT "+e.morphTargetsCount:"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.logarithmicDepthBuffer&&e.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(Yn).join(`
`),x=[_,ho(e),"#define SHADER_NAME "+e.shaderName,y,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.matcap?"#define USE_MATCAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+h:"",e.envMap?"#define "+u:"",e.envMap?"#define "+c:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMap&&e.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",e.normalMap&&e.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",e.clearcoat?"#define USE_CLEARCOAT":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.iridescence?"#define USE_IRIDESCENCE":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",e.specularColorMap?"#define USE_SPECULARCOLORMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaTest?"#define USE_ALPHATEST":"",e.sheen?"#define USE_SHEEN":"",e.sheenColorMap?"#define USE_SHEENCOLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",e.vertexTangents?"#define USE_TANGENT":"",e.vertexColors||e.instancingColor?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUvs?"#define USE_UV":"",e.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",e.gradientMap?"#define USE_GRADIENTMAP":"",e.flatShading?"#define FLAT_SHADED":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",e.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.logarithmicDepthBuffer&&e.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",e.toneMapping!==pi?"#define TONE_MAPPING":"",e.toneMapping!==pi?It.tonemapping_pars_fragment:"",e.toneMapping!==pi?Ld("toneMapping",e.toneMapping):"",e.dithering?"#define DITHERING":"",e.opaque?"#define OPAQUE":"",It.encodings_pars_fragment,Rd("linearToOutputTexel",e.outputEncoding),e.useDepthPacking?"#define DEPTH_PACKING "+e.depthPacking:"",`
`].filter(Yn).join(`
`)),o=Ws(o),o=ao(o,e),o=oo(o,e),a=Ws(a),a=ao(a,e),a=oo(a,e),o=lo(o),a=lo(a),e.isWebGL2&&e.isRawShaderMaterial!==!0&&(M=`#version 300 es
`,m=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+m,x=["#define varying in",e.glslVersion===Ra?"":"layout(location = 0) out highp vec4 pc_fragColor;",e.glslVersion===Ra?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+x);const b=M+m+o,S=M+x+a,w=ro(n,35633,b),E=ro(n,35632,S);if(n.attachShader(p,w),n.attachShader(p,E),e.index0AttributeName!==void 0?n.bindAttribLocation(p,0,e.index0AttributeName):e.morphTargets===!0&&n.bindAttribLocation(p,0,"position"),n.linkProgram(p),r.debug.checkShaderErrors){const D=n.getProgramInfoLog(p).trim(),L=n.getShaderInfoLog(w).trim(),V=n.getShaderInfoLog(E).trim();let q=!0,O=!0;if(n.getProgramParameter(p,35714)===!1){q=!1;const I=so(n,w,"vertex"),k=so(n,E,"fragment");console.error("THREE.WebGLProgram: Shader Error "+n.getError()+" - VALIDATE_STATUS "+n.getProgramParameter(p,35715)+`

Program Info Log: `+D+`
`+I+`
`+k)}else D!==""?console.warn("THREE.WebGLProgram: Program Info Log:",D):(L===""||V==="")&&(O=!1);O&&(this.diagnostics={runnable:q,programLog:D,vertexShader:{log:L,prefix:m},fragmentShader:{log:V,prefix:x}})}n.deleteShader(w),n.deleteShader(E);let R;this.getUniforms=function(){return R===void 0&&(R=new Lr(n,p)),R};let v;return this.getAttributes=function(){return v===void 0&&(v=Bd(n,p)),v},this.destroy=function(){i.releaseStatesOfProgram(this),n.deleteProgram(p),this.program=void 0},this.name=e.shaderName,this.id=Cd++,this.cacheKey=t,this.usedTimes=1,this.program=p,this.vertexShader=w,this.fragmentShader=E,this}let jd=0;class qd{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,i=t.fragmentShader,n=this._getShaderStage(e),s=this._getShaderStage(i),o=this._getShaderCacheForMaterial(t);return o.has(n)===!1&&(o.add(n),n.usedTimes++),o.has(s)===!1&&(o.add(s),s.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const i of e)i.usedTimes--,i.usedTimes===0&&this.shaderCache.delete(i.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let i=e.get(t);return i===void 0&&(i=new Set,e.set(t,i)),i}_getShaderStage(t){const e=this.shaderCache;let i=e.get(t);return i===void 0&&(i=new Zd(t),e.set(t,i)),i}}class Zd{constructor(t){this.id=jd++,this.code=t,this.usedTimes=0}}function Kd(r,t,e,i,n,s,o){const a=new Yo,l=new qd,h=[],u=n.isWebGL2,c=n.logarithmicDepthBuffer,f=n.vertexTextures;let _=n.precision;const y={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function p(v,D,L,V,q){const O=V.fog,I=q.geometry,k=v.isMeshStandardMaterial?V.environment:null,$=(v.isMeshStandardMaterial?e:t).get(v.envMap||k),Q=$&&$.mapping===Vr?$.image.height:null,B=y[v.type];v.precision!==null&&(_=n.getMaxPrecision(v.precision),_!==v.precision&&console.warn("THREE.WebGLProgram.getParameters:",v.precision,"not supported, using",_,"instead."));const et=I.morphAttributes.position||I.morphAttributes.normal||I.morphAttributes.color,j=et!==void 0?et.length:0;let X=0;I.morphAttributes.position!==void 0&&(X=1),I.morphAttributes.normal!==void 0&&(X=2),I.morphAttributes.color!==void 0&&(X=3);let H,ot,rt,ct;if(B){const Wt=ni[B];H=Wt.vertexShader,ot=Wt.fragmentShader}else H=v.vertexShader,ot=v.fragmentShader,l.update(v),rt=l.getVertexShaderID(v),ct=l.getFragmentShaderID(v);const Y=r.getRenderTarget(),xt=v.alphaTest>0,mt=v.clearcoat>0,wt=v.iridescence>0;return{isWebGL2:u,shaderID:B,shaderName:v.type,vertexShader:H,fragmentShader:ot,defines:v.defines,customVertexShaderID:rt,customFragmentShaderID:ct,isRawShaderMaterial:v.isRawShaderMaterial===!0,glslVersion:v.glslVersion,precision:_,instancing:q.isInstancedMesh===!0,instancingColor:q.isInstancedMesh===!0&&q.instanceColor!==null,supportsVertexTextures:f,outputEncoding:Y===null?r.outputEncoding:Y.isXRRenderTarget===!0?Y.texture.encoding:Zi,map:!!v.map,matcap:!!v.matcap,envMap:!!$,envMapMode:$&&$.mapping,envMapCubeUVHeight:Q,lightMap:!!v.lightMap,aoMap:!!v.aoMap,emissiveMap:!!v.emissiveMap,bumpMap:!!v.bumpMap,normalMap:!!v.normalMap,objectSpaceNormalMap:v.normalMapType===gh,tangentSpaceNormalMap:v.normalMapType===_h,decodeVideoTexture:!!v.map&&v.map.isVideoTexture===!0&&v.map.encoding===qt,clearcoat:mt,clearcoatMap:mt&&!!v.clearcoatMap,clearcoatRoughnessMap:mt&&!!v.clearcoatRoughnessMap,clearcoatNormalMap:mt&&!!v.clearcoatNormalMap,iridescence:wt,iridescenceMap:wt&&!!v.iridescenceMap,iridescenceThicknessMap:wt&&!!v.iridescenceThicknessMap,displacementMap:!!v.displacementMap,roughnessMap:!!v.roughnessMap,metalnessMap:!!v.metalnessMap,specularMap:!!v.specularMap,specularIntensityMap:!!v.specularIntensityMap,specularColorMap:!!v.specularColorMap,opaque:v.transparent===!1&&v.blending===An,alphaMap:!!v.alphaMap,alphaTest:xt,gradientMap:!!v.gradientMap,sheen:v.sheen>0,sheenColorMap:!!v.sheenColorMap,sheenRoughnessMap:!!v.sheenRoughnessMap,transmission:v.transmission>0,transmissionMap:!!v.transmissionMap,thicknessMap:!!v.thicknessMap,combine:v.combine,vertexTangents:!!v.normalMap&&!!I.attributes.tangent,vertexColors:v.vertexColors,vertexAlphas:v.vertexColors===!0&&!!I.attributes.color&&I.attributes.color.itemSize===4,vertexUvs:!!v.map||!!v.bumpMap||!!v.normalMap||!!v.specularMap||!!v.alphaMap||!!v.emissiveMap||!!v.roughnessMap||!!v.metalnessMap||!!v.clearcoatMap||!!v.clearcoatRoughnessMap||!!v.clearcoatNormalMap||!!v.iridescenceMap||!!v.iridescenceThicknessMap||!!v.displacementMap||!!v.transmissionMap||!!v.thicknessMap||!!v.specularIntensityMap||!!v.specularColorMap||!!v.sheenColorMap||!!v.sheenRoughnessMap,uvsVertexOnly:!(v.map||v.bumpMap||v.normalMap||v.specularMap||v.alphaMap||v.emissiveMap||v.roughnessMap||v.metalnessMap||v.clearcoatNormalMap||v.iridescenceMap||v.iridescenceThicknessMap||v.transmission>0||v.transmissionMap||v.thicknessMap||v.specularIntensityMap||v.specularColorMap||v.sheen>0||v.sheenColorMap||v.sheenRoughnessMap)&&!!v.displacementMap,fog:!!O,useFog:v.fog===!0,fogExp2:O&&O.isFogExp2,flatShading:!!v.flatShading,sizeAttenuation:v.sizeAttenuation,logarithmicDepthBuffer:c,skinning:q.isSkinnedMesh===!0,morphTargets:I.morphAttributes.position!==void 0,morphNormals:I.morphAttributes.normal!==void 0,morphColors:I.morphAttributes.color!==void 0,morphTargetsCount:j,morphTextureStride:X,numDirLights:D.directional.length,numPointLights:D.point.length,numSpotLights:D.spot.length,numSpotLightMaps:D.spotLightMap.length,numRectAreaLights:D.rectArea.length,numHemiLights:D.hemi.length,numDirLightShadows:D.directionalShadowMap.length,numPointLightShadows:D.pointShadowMap.length,numSpotLightShadows:D.spotShadowMap.length,numSpotLightShadowsWithMaps:D.numSpotLightShadowsWithMaps,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:v.dithering,shadowMapEnabled:r.shadowMap.enabled&&L.length>0,shadowMapType:r.shadowMap.type,toneMapping:v.toneMapped?r.toneMapping:pi,physicallyCorrectLights:r.physicallyCorrectLights,premultipliedAlpha:v.premultipliedAlpha,doubleSided:v.side===nr,flipSided:v.side===je,useDepthPacking:!!v.depthPacking,depthPacking:v.depthPacking||0,index0AttributeName:v.index0AttributeName,extensionDerivatives:v.extensions&&v.extensions.derivatives,extensionFragDepth:v.extensions&&v.extensions.fragDepth,extensionDrawBuffers:v.extensions&&v.extensions.drawBuffers,extensionShaderTextureLOD:v.extensions&&v.extensions.shaderTextureLOD,rendererExtensionFragDepth:u||i.has("EXT_frag_depth"),rendererExtensionDrawBuffers:u||i.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:u||i.has("EXT_shader_texture_lod"),customProgramCacheKey:v.customProgramCacheKey()}}function m(v){const D=[];if(v.shaderID?D.push(v.shaderID):(D.push(v.customVertexShaderID),D.push(v.customFragmentShaderID)),v.defines!==void 0)for(const L in v.defines)D.push(L),D.push(v.defines[L]);return v.isRawShaderMaterial===!1&&(x(D,v),M(D,v),D.push(r.outputEncoding)),D.push(v.customProgramCacheKey),D.join()}function x(v,D){v.push(D.precision),v.push(D.outputEncoding),v.push(D.envMapMode),v.push(D.envMapCubeUVHeight),v.push(D.combine),v.push(D.vertexUvs),v.push(D.fogExp2),v.push(D.sizeAttenuation),v.push(D.morphTargetsCount),v.push(D.morphAttributeCount),v.push(D.numDirLights),v.push(D.numPointLights),v.push(D.numSpotLights),v.push(D.numSpotLightMaps),v.push(D.numHemiLights),v.push(D.numRectAreaLights),v.push(D.numDirLightShadows),v.push(D.numPointLightShadows),v.push(D.numSpotLightShadows),v.push(D.numSpotLightShadowsWithMaps),v.push(D.shadowMapType),v.push(D.toneMapping),v.push(D.numClippingPlanes),v.push(D.numClipIntersection),v.push(D.depthPacking)}function M(v,D){a.disableAll(),D.isWebGL2&&a.enable(0),D.supportsVertexTextures&&a.enable(1),D.instancing&&a.enable(2),D.instancingColor&&a.enable(3),D.map&&a.enable(4),D.matcap&&a.enable(5),D.envMap&&a.enable(6),D.lightMap&&a.enable(7),D.aoMap&&a.enable(8),D.emissiveMap&&a.enable(9),D.bumpMap&&a.enable(10),D.normalMap&&a.enable(11),D.objectSpaceNormalMap&&a.enable(12),D.tangentSpaceNormalMap&&a.enable(13),D.clearcoat&&a.enable(14),D.clearcoatMap&&a.enable(15),D.clearcoatRoughnessMap&&a.enable(16),D.clearcoatNormalMap&&a.enable(17),D.iridescence&&a.enable(18),D.iridescenceMap&&a.enable(19),D.iridescenceThicknessMap&&a.enable(20),D.displacementMap&&a.enable(21),D.specularMap&&a.enable(22),D.roughnessMap&&a.enable(23),D.metalnessMap&&a.enable(24),D.gradientMap&&a.enable(25),D.alphaMap&&a.enable(26),D.alphaTest&&a.enable(27),D.vertexColors&&a.enable(28),D.vertexAlphas&&a.enable(29),D.vertexUvs&&a.enable(30),D.vertexTangents&&a.enable(31),D.uvsVertexOnly&&a.enable(32),v.push(a.mask),a.disableAll(),D.fog&&a.enable(0),D.useFog&&a.enable(1),D.flatShading&&a.enable(2),D.logarithmicDepthBuffer&&a.enable(3),D.skinning&&a.enable(4),D.morphTargets&&a.enable(5),D.morphNormals&&a.enable(6),D.morphColors&&a.enable(7),D.premultipliedAlpha&&a.enable(8),D.shadowMapEnabled&&a.enable(9),D.physicallyCorrectLights&&a.enable(10),D.doubleSided&&a.enable(11),D.flipSided&&a.enable(12),D.useDepthPacking&&a.enable(13),D.dithering&&a.enable(14),D.specularIntensityMap&&a.enable(15),D.specularColorMap&&a.enable(16),D.transmission&&a.enable(17),D.transmissionMap&&a.enable(18),D.thicknessMap&&a.enable(19),D.sheen&&a.enable(20),D.sheenColorMap&&a.enable(21),D.sheenRoughnessMap&&a.enable(22),D.decodeVideoTexture&&a.enable(23),D.opaque&&a.enable(24),v.push(a.mask)}function b(v){const D=y[v.type];let L;if(D){const V=ni[D];L=Oh.clone(V.uniforms)}else L=v.uniforms;return L}function S(v,D){let L;for(let V=0,q=h.length;V<q;V++){const O=h[V];if(O.cacheKey===D){L=O,++L.usedTimes;break}}return L===void 0&&(L=new Yd(r,D,v,s),h.push(L)),L}function w(v){if(--v.usedTimes===0){const D=h.indexOf(v);h[D]=h[h.length-1],h.pop(),v.destroy()}}function E(v){l.remove(v)}function R(){l.dispose()}return{getParameters:p,getProgramCacheKey:m,getUniforms:b,acquireProgram:S,releaseProgram:w,releaseShaderCache:E,programs:h,dispose:R}}function $d(){let r=new WeakMap;function t(s){let o=r.get(s);return o===void 0&&(o={},r.set(s,o)),o}function e(s){r.delete(s)}function i(s,o,a){r.get(s)[o]=a}function n(){r=new WeakMap}return{get:t,remove:e,update:i,dispose:n}}function Jd(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.material.id!==t.material.id?r.material.id-t.material.id:r.z!==t.z?r.z-t.z:r.id-t.id}function uo(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.z!==t.z?t.z-r.z:r.id-t.id}function co(){const r=[];let t=0;const e=[],i=[],n=[];function s(){t=0,e.length=0,i.length=0,n.length=0}function o(c,f,_,y,p,m){let x=r[t];return x===void 0?(x={id:c.id,object:c,geometry:f,material:_,groupOrder:y,renderOrder:c.renderOrder,z:p,group:m},r[t]=x):(x.id=c.id,x.object=c,x.geometry=f,x.material=_,x.groupOrder=y,x.renderOrder=c.renderOrder,x.z=p,x.group=m),t++,x}function a(c,f,_,y,p,m){const x=o(c,f,_,y,p,m);_.transmission>0?i.push(x):_.transparent===!0?n.push(x):e.push(x)}function l(c,f,_,y,p,m){const x=o(c,f,_,y,p,m);_.transmission>0?i.unshift(x):_.transparent===!0?n.unshift(x):e.unshift(x)}function h(c,f){e.length>1&&e.sort(c||Jd),i.length>1&&i.sort(f||uo),n.length>1&&n.sort(f||uo)}function u(){for(let c=t,f=r.length;c<f;c++){const _=r[c];if(_.id===null)break;_.id=null,_.object=null,_.geometry=null,_.material=null,_.group=null}}return{opaque:e,transmissive:i,transparent:n,init:s,push:a,unshift:l,finish:u,sort:h}}function Qd(){let r=new WeakMap;function t(i,n){const s=r.get(i);let o;return s===void 0?(o=new co,r.set(i,[o])):n>=s.length?(o=new co,s.push(o)):o=s[n],o}function e(){r=new WeakMap}return{get:t,dispose:e}}function tm(){const r={};return{get:function(t){if(r[t.id]!==void 0)return r[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new G,color:new $t};break;case"SpotLight":e={position:new G,direction:new G,color:new $t,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new G,color:new $t,distance:0,decay:0};break;case"HemisphereLight":e={direction:new G,skyColor:new $t,groundColor:new $t};break;case"RectAreaLight":e={color:new $t,position:new G,halfWidth:new G,halfHeight:new G};break}return r[t.id]=e,e}}}function em(){const r={};return{get:function(t){if(r[t.id]!==void 0)return r[t.id];let e;switch(t.type){case"DirectionalLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Et};break;case"SpotLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Et};break;case"PointLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Et,shadowCameraNear:1,shadowCameraFar:1e3};break}return r[t.id]=e,e}}}let im=0;function nm(r,t){return(t.castShadow?2:0)-(r.castShadow?2:0)+(t.map?1:0)-(r.map?1:0)}function rm(r,t){const e=new tm,i=em(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0};for(let u=0;u<9;u++)n.probe.push(new G);const s=new G,o=new pe,a=new pe;function l(u,c){let f=0,_=0,y=0;for(let V=0;V<9;V++)n.probe[V].set(0,0,0);let p=0,m=0,x=0,M=0,b=0,S=0,w=0,E=0,R=0,v=0;u.sort(nm);const D=c!==!0?Math.PI:1;for(let V=0,q=u.length;V<q;V++){const O=u[V],I=O.color,k=O.intensity,$=O.distance,Q=O.shadow&&O.shadow.map?O.shadow.map.texture:null;if(O.isAmbientLight)f+=I.r*k*D,_+=I.g*k*D,y+=I.b*k*D;else if(O.isLightProbe)for(let B=0;B<9;B++)n.probe[B].addScaledVector(O.sh.coefficients[B],k);else if(O.isDirectionalLight){const B=e.get(O);if(B.color.copy(O.color).multiplyScalar(O.intensity*D),O.castShadow){const et=O.shadow,j=i.get(O);j.shadowBias=et.bias,j.shadowNormalBias=et.normalBias,j.shadowRadius=et.radius,j.shadowMapSize=et.mapSize,n.directionalShadow[p]=j,n.directionalShadowMap[p]=Q,n.directionalShadowMatrix[p]=O.shadow.matrix,S++}n.directional[p]=B,p++}else if(O.isSpotLight){const B=e.get(O);B.position.setFromMatrixPosition(O.matrixWorld),B.color.copy(I).multiplyScalar(k*D),B.distance=$,B.coneCos=Math.cos(O.angle),B.penumbraCos=Math.cos(O.angle*(1-O.penumbra)),B.decay=O.decay,n.spot[x]=B;const et=O.shadow;if(O.map&&(n.spotLightMap[R]=O.map,R++,et.updateMatrices(O),O.castShadow&&v++),n.spotLightMatrix[x]=et.matrix,O.castShadow){const j=i.get(O);j.shadowBias=et.bias,j.shadowNormalBias=et.normalBias,j.shadowRadius=et.radius,j.shadowMapSize=et.mapSize,n.spotShadow[x]=j,n.spotShadowMap[x]=Q,E++}x++}else if(O.isRectAreaLight){const B=e.get(O);B.color.copy(I).multiplyScalar(k),B.halfWidth.set(O.width*.5,0,0),B.halfHeight.set(0,O.height*.5,0),n.rectArea[M]=B,M++}else if(O.isPointLight){const B=e.get(O);if(B.color.copy(O.color).multiplyScalar(O.intensity*D),B.distance=O.distance,B.decay=O.decay,O.castShadow){const et=O.shadow,j=i.get(O);j.shadowBias=et.bias,j.shadowNormalBias=et.normalBias,j.shadowRadius=et.radius,j.shadowMapSize=et.mapSize,j.shadowCameraNear=et.camera.near,j.shadowCameraFar=et.camera.far,n.pointShadow[m]=j,n.pointShadowMap[m]=Q,n.pointShadowMatrix[m]=O.shadow.matrix,w++}n.point[m]=B,m++}else if(O.isHemisphereLight){const B=e.get(O);B.skyColor.copy(O.color).multiplyScalar(k*D),B.groundColor.copy(O.groundColor).multiplyScalar(k*D),n.hemi[b]=B,b++}}M>0&&(t.isWebGL2||r.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=ut.LTC_FLOAT_1,n.rectAreaLTC2=ut.LTC_FLOAT_2):r.has("OES_texture_half_float_linear")===!0?(n.rectAreaLTC1=ut.LTC_HALF_1,n.rectAreaLTC2=ut.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),n.ambient[0]=f,n.ambient[1]=_,n.ambient[2]=y;const L=n.hash;(L.directionalLength!==p||L.pointLength!==m||L.spotLength!==x||L.rectAreaLength!==M||L.hemiLength!==b||L.numDirectionalShadows!==S||L.numPointShadows!==w||L.numSpotShadows!==E||L.numSpotMaps!==R)&&(n.directional.length=p,n.spot.length=x,n.rectArea.length=M,n.point.length=m,n.hemi.length=b,n.directionalShadow.length=S,n.directionalShadowMap.length=S,n.pointShadow.length=w,n.pointShadowMap.length=w,n.spotShadow.length=E,n.spotShadowMap.length=E,n.directionalShadowMatrix.length=S,n.pointShadowMatrix.length=w,n.spotLightMatrix.length=E+R-v,n.spotLightMap.length=R,n.numSpotLightShadowsWithMaps=v,L.directionalLength=p,L.pointLength=m,L.spotLength=x,L.rectAreaLength=M,L.hemiLength=b,L.numDirectionalShadows=S,L.numPointShadows=w,L.numSpotShadows=E,L.numSpotMaps=R,n.version=im++)}function h(u,c){let f=0,_=0,y=0,p=0,m=0;const x=c.matrixWorldInverse;for(let M=0,b=u.length;M<b;M++){const S=u[M];if(S.isDirectionalLight){const w=n.directional[f];w.direction.setFromMatrixPosition(S.matrixWorld),s.setFromMatrixPosition(S.target.matrixWorld),w.direction.sub(s),w.direction.transformDirection(x),f++}else if(S.isSpotLight){const w=n.spot[y];w.position.setFromMatrixPosition(S.matrixWorld),w.position.applyMatrix4(x),w.direction.setFromMatrixPosition(S.matrixWorld),s.setFromMatrixPosition(S.target.matrixWorld),w.direction.sub(s),w.direction.transformDirection(x),y++}else if(S.isRectAreaLight){const w=n.rectArea[p];w.position.setFromMatrixPosition(S.matrixWorld),w.position.applyMatrix4(x),a.identity(),o.copy(S.matrixWorld),o.premultiply(x),a.extractRotation(o),w.halfWidth.set(S.width*.5,0,0),w.halfHeight.set(0,S.height*.5,0),w.halfWidth.applyMatrix4(a),w.halfHeight.applyMatrix4(a),p++}else if(S.isPointLight){const w=n.point[_];w.position.setFromMatrixPosition(S.matrixWorld),w.position.applyMatrix4(x),_++}else if(S.isHemisphereLight){const w=n.hemi[m];w.direction.setFromMatrixPosition(S.matrixWorld),w.direction.transformDirection(x),m++}}}return{setup:l,setupView:h,state:n}}function fo(r,t){const e=new rm(r,t),i=[],n=[];function s(){i.length=0,n.length=0}function o(c){i.push(c)}function a(c){n.push(c)}function l(c){e.setup(i,c)}function h(c){e.setupView(i,c)}return{init:s,state:{lightsArray:i,shadowsArray:n,lights:e},setupLights:l,setupLightsView:h,pushLight:o,pushShadow:a}}function sm(r,t){let e=new WeakMap;function i(s,o=0){const a=e.get(s);let l;return a===void 0?(l=new fo(r,t),e.set(s,[l])):o>=a.length?(l=new fo(r,t),a.push(l)):l=a[o],l}function n(){e=new WeakMap}return{get:i,dispose:n}}class am extends ar{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=mh,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class om extends ar{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.referencePosition=new G,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}const lm=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,hm=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function um(r,t,e){let i=new Jo;const n=new Et,s=new Et,o=new ye,a=new am({depthPacking:ph}),l=new om,h={},u=e.maxTextureSize,c={0:je,1:ji,2:nr},f=new Qi({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Et},radius:{value:4}},vertexShader:lm,fragmentShader:hm}),_=f.clone();_.defines.HORIZONTAL_PASS=1;const y=new _i;y.setAttribute("position",new ge(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const p=new si(y,f),m=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Fo,this.render=function(S,w,E){if(m.enabled===!1||m.autoUpdate===!1&&m.needsUpdate===!1||S.length===0)return;const R=r.getRenderTarget(),v=r.getActiveCubeFace(),D=r.getActiveMipmapLevel(),L=r.state;L.setBlending(Ti),L.buffers.color.setClear(1,1,1,1),L.buffers.depth.setTest(!0),L.setScissorTest(!1);for(let V=0,q=S.length;V<q;V++){const O=S[V],I=O.shadow;if(I===void 0){console.warn("THREE.WebGLShadowMap:",O,"has no shadow.");continue}if(I.autoUpdate===!1&&I.needsUpdate===!1)continue;n.copy(I.mapSize);const k=I.getFrameExtents();if(n.multiply(k),s.copy(I.mapSize),(n.x>u||n.y>u)&&(n.x>u&&(s.x=Math.floor(u/k.x),n.x=s.x*k.x,I.mapSize.x=s.x),n.y>u&&(s.y=Math.floor(u/k.y),n.y=s.y*k.y,I.mapSize.y=s.y)),I.map===null){const Q=this.type!==Xn?{minFilter:Ee,magFilter:Ee}:{};I.map=new Ki(n.x,n.y,Q),I.map.texture.name=O.name+".shadowMap",I.camera.updateProjectionMatrix()}r.setRenderTarget(I.map),r.clear();const $=I.getViewportCount();for(let Q=0;Q<$;Q++){const B=I.getViewport(Q);o.set(s.x*B.x,s.y*B.y,s.x*B.z,s.y*B.w),L.viewport(o),I.updateMatrices(O,Q),i=I.getFrustum(),b(w,E,I.camera,O,this.type)}I.isPointLightShadow!==!0&&this.type===Xn&&x(I,E),I.needsUpdate=!1}m.needsUpdate=!1,r.setRenderTarget(R,v,D)};function x(S,w){const E=t.update(p);f.defines.VSM_SAMPLES!==S.blurSamples&&(f.defines.VSM_SAMPLES=S.blurSamples,_.defines.VSM_SAMPLES=S.blurSamples,f.needsUpdate=!0,_.needsUpdate=!0),S.mapPass===null&&(S.mapPass=new Ki(n.x,n.y)),f.uniforms.shadow_pass.value=S.map.texture,f.uniforms.resolution.value=S.mapSize,f.uniforms.radius.value=S.radius,r.setRenderTarget(S.mapPass),r.clear(),r.renderBufferDirect(w,null,E,f,p,null),_.uniforms.shadow_pass.value=S.mapPass.texture,_.uniforms.resolution.value=S.mapSize,_.uniforms.radius.value=S.radius,r.setRenderTarget(S.map),r.clear(),r.renderBufferDirect(w,null,E,_,p,null)}function M(S,w,E,R,v,D){let L=null;const V=E.isPointLight===!0?S.customDistanceMaterial:S.customDepthMaterial;if(V!==void 0)L=V;else if(L=E.isPointLight===!0?l:a,r.localClippingEnabled&&w.clipShadows===!0&&Array.isArray(w.clippingPlanes)&&w.clippingPlanes.length!==0||w.displacementMap&&w.displacementScale!==0||w.alphaMap&&w.alphaTest>0||w.map&&w.alphaTest>0){const q=L.uuid,O=w.uuid;let I=h[q];I===void 0&&(I={},h[q]=I);let k=I[O];k===void 0&&(k=L.clone(),I[O]=k),L=k}return L.visible=w.visible,L.wireframe=w.wireframe,D===Xn?L.side=w.shadowSide!==null?w.shadowSide:w.side:L.side=w.shadowSide!==null?w.shadowSide:c[w.side],L.alphaMap=w.alphaMap,L.alphaTest=w.alphaTest,L.map=w.map,L.clipShadows=w.clipShadows,L.clippingPlanes=w.clippingPlanes,L.clipIntersection=w.clipIntersection,L.displacementMap=w.displacementMap,L.displacementScale=w.displacementScale,L.displacementBias=w.displacementBias,L.wireframeLinewidth=w.wireframeLinewidth,L.linewidth=w.linewidth,E.isPointLight===!0&&L.isMeshDistanceMaterial===!0&&(L.referencePosition.setFromMatrixPosition(E.matrixWorld),L.nearDistance=R,L.farDistance=v),L}function b(S,w,E,R,v){if(S.visible===!1)return;if(S.layers.test(w.layers)&&(S.isMesh||S.isLine||S.isPoints)&&(S.castShadow||S.receiveShadow&&v===Xn)&&(!S.frustumCulled||i.intersectsObject(S))){S.modelViewMatrix.multiplyMatrices(E.matrixWorldInverse,S.matrixWorld);const V=t.update(S),q=S.material;if(Array.isArray(q)){const O=V.groups;for(let I=0,k=O.length;I<k;I++){const $=O[I],Q=q[$.materialIndex];if(Q&&Q.visible){const B=M(S,Q,R,E.near,E.far,v);r.renderBufferDirect(E,null,V,B,S,$)}}}else if(q.visible){const O=M(S,q,R,E.near,E.far,v);r.renderBufferDirect(E,null,V,O,S,null)}}const L=S.children;for(let V=0,q=L.length;V<q;V++)b(L[V],w,E,R,v)}}function cm(r,t,e){const i=e.isWebGL2;function n(){let F=!1;const K=new ye;let at=null;const _t=new ye(0,0,0,0);return{setMask:function(St){at!==St&&!F&&(r.colorMask(St,St,St,St),at=St)},setLocked:function(St){F=St},setClear:function(St,Ht,fe,xe,Ei){Ei===!0&&(St*=xe,Ht*=xe,fe*=xe),K.set(St,Ht,fe,xe),_t.equals(K)===!1&&(r.clearColor(St,Ht,fe,xe),_t.copy(K))},reset:function(){F=!1,at=null,_t.set(-1,0,0,0)}}}function s(){let F=!1,K=null,at=null,_t=null;return{setTest:function(St){St?xt(2929):mt(2929)},setMask:function(St){K!==St&&!F&&(r.depthMask(St),K=St)},setFunc:function(St){if(at!==St){switch(St){case Ul:r.depthFunc(512);break;case zl:r.depthFunc(519);break;case kl:r.depthFunc(513);break;case Bs:r.depthFunc(515);break;case Vl:r.depthFunc(514);break;case Gl:r.depthFunc(518);break;case Wl:r.depthFunc(516);break;case Hl:r.depthFunc(517);break;default:r.depthFunc(515)}at=St}},setLocked:function(St){F=St},setClear:function(St){_t!==St&&(r.clearDepth(St),_t=St)},reset:function(){F=!1,K=null,at=null,_t=null}}}function o(){let F=!1,K=null,at=null,_t=null,St=null,Ht=null,fe=null,xe=null,Ei=null;return{setTest:function(Zt){F||(Zt?xt(2960):mt(2960))},setMask:function(Zt){K!==Zt&&!F&&(r.stencilMask(Zt),K=Zt)},setFunc:function(Zt,ai,Ve){(at!==Zt||_t!==ai||St!==Ve)&&(r.stencilFunc(Zt,ai,Ve),at=Zt,_t=ai,St=Ve)},setOp:function(Zt,ai,Ve){(Ht!==Zt||fe!==ai||xe!==Ve)&&(r.stencilOp(Zt,ai,Ve),Ht=Zt,fe=ai,xe=Ve)},setLocked:function(Zt){F=Zt},setClear:function(Zt){Ei!==Zt&&(r.clearStencil(Zt),Ei=Zt)},reset:function(){F=!1,K=null,at=null,_t=null,St=null,Ht=null,fe=null,xe=null,Ei=null}}}const a=new n,l=new s,h=new o,u=new WeakMap,c=new WeakMap;let f={},_={},y=new WeakMap,p=[],m=null,x=!1,M=null,b=null,S=null,w=null,E=null,R=null,v=null,D=!1,L=null,V=null,q=null,O=null,I=null;const k=r.getParameter(35661);let $=!1,Q=0;const B=r.getParameter(7938);B.indexOf("WebGL")!==-1?(Q=parseFloat(/^WebGL (\d)/.exec(B)[1]),$=Q>=1):B.indexOf("OpenGL ES")!==-1&&(Q=parseFloat(/^OpenGL ES (\d)/.exec(B)[1]),$=Q>=2);let et=null,j={};const X=r.getParameter(3088),H=r.getParameter(2978),ot=new ye().fromArray(X),rt=new ye().fromArray(H);function ct(F,K,at){const _t=new Uint8Array(4),St=r.createTexture();r.bindTexture(F,St),r.texParameteri(F,10241,9728),r.texParameteri(F,10240,9728);for(let Ht=0;Ht<at;Ht++)r.texImage2D(K+Ht,0,6408,1,1,0,6408,5121,_t);return St}const Y={};Y[3553]=ct(3553,3553,1),Y[34067]=ct(34067,34069,6),a.setClear(0,0,0,1),l.setClear(1),h.setClear(0),xt(2929),l.setFunc(Bs),oe(!1),be(sa),xt(2884),ce(Ti);function xt(F){f[F]!==!0&&(r.enable(F),f[F]=!0)}function mt(F){f[F]!==!1&&(r.disable(F),f[F]=!1)}function wt(F,K){return _[F]!==K?(r.bindFramebuffer(F,K),_[F]=K,i&&(F===36009&&(_[36160]=K),F===36160&&(_[36009]=K)),!0):!1}function yt(F,K){let at=p,_t=!1;if(F)if(at=y.get(K),at===void 0&&(at=[],y.set(K,at)),F.isWebGLMultipleRenderTargets){const St=F.texture;if(at.length!==St.length||at[0]!==36064){for(let Ht=0,fe=St.length;Ht<fe;Ht++)at[Ht]=36064+Ht;at.length=St.length,_t=!0}}else at[0]!==36064&&(at[0]=36064,_t=!0);else at[0]!==1029&&(at[0]=1029,_t=!0);_t&&(e.isWebGL2?r.drawBuffers(at):t.get("WEBGL_draw_buffers").drawBuffersWEBGL(at))}function Wt(F){return m!==F?(r.useProgram(F),m=F,!0):!1}const Pt={[wn]:32774,[El]:32778,[Dl]:32779};if(i)Pt[la]=32775,Pt[ha]=32776;else{const F=t.get("EXT_blend_minmax");F!==null&&(Pt[la]=F.MIN_EXT,Pt[ha]=F.MAX_EXT)}const Tt={[Cl]:0,[Pl]:1,[Il]:768,[Bo]:770,[Nl]:776,[Fl]:774,[Ll]:772,[Rl]:769,[No]:771,[Bl]:775,[Ol]:773};function ce(F,K,at,_t,St,Ht,fe,xe){if(F===Ti){x===!0&&(mt(3042),x=!1);return}if(x===!1&&(xt(3042),x=!0),F!==Al){if(F!==M||xe!==D){if((b!==wn||E!==wn)&&(r.blendEquation(32774),b=wn,E=wn),xe)switch(F){case An:r.blendFuncSeparate(1,771,1,771);break;case Fs:r.blendFunc(1,1);break;case aa:r.blendFuncSeparate(0,769,0,1);break;case oa:r.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",F);break}else switch(F){case An:r.blendFuncSeparate(770,771,1,771);break;case Fs:r.blendFunc(770,1);break;case aa:r.blendFuncSeparate(0,769,0,1);break;case oa:r.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",F);break}S=null,w=null,R=null,v=null,M=F,D=xe}return}St=St||K,Ht=Ht||at,fe=fe||_t,(K!==b||St!==E)&&(r.blendEquationSeparate(Pt[K],Pt[St]),b=K,E=St),(at!==S||_t!==w||Ht!==R||fe!==v)&&(r.blendFuncSeparate(Tt[at],Tt[_t],Tt[Ht],Tt[fe]),S=at,w=_t,R=Ht,v=fe),M=F,D=!1}function ae(F,K){F.side===nr?mt(2884):xt(2884);let at=F.side===je;K&&(at=!at),oe(at),F.blending===An&&F.transparent===!1?ce(Ti):ce(F.blending,F.blendEquation,F.blendSrc,F.blendDst,F.blendEquationAlpha,F.blendSrcAlpha,F.blendDstAlpha,F.premultipliedAlpha),l.setFunc(F.depthFunc),l.setTest(F.depthTest),l.setMask(F.depthWrite),a.setMask(F.colorWrite);const _t=F.stencilWrite;h.setTest(_t),_t&&(h.setMask(F.stencilWriteMask),h.setFunc(F.stencilFunc,F.stencilRef,F.stencilFuncMask),h.setOp(F.stencilFail,F.stencilZFail,F.stencilZPass)),Xt(F.polygonOffset,F.polygonOffsetFactor,F.polygonOffsetUnits),F.alphaToCoverage===!0?xt(32926):mt(32926)}function oe(F){L!==F&&(F?r.frontFace(2304):r.frontFace(2305),L=F)}function be(F){F!==Ml?(xt(2884),F!==V&&(F===sa?r.cullFace(1029):F===wl?r.cullFace(1028):r.cullFace(1032))):mt(2884),V=F}function ie(F){F!==q&&($&&r.lineWidth(F),q=F)}function Xt(F,K,at){F?(xt(32823),(O!==K||I!==at)&&(r.polygonOffset(K,at),O=K,I=at)):mt(32823)}function ke(F){F?xt(3089):mt(3089)}function De(F){F===void 0&&(F=33984+k-1),et!==F&&(r.activeTexture(F),et=F)}function C(F,K,at){at===void 0&&(et===null?at=33984+k-1:at=et);let _t=j[at];_t===void 0&&(_t={type:void 0,texture:void 0},j[at]=_t),(_t.type!==F||_t.texture!==K)&&(et!==at&&(r.activeTexture(at),et=at),r.bindTexture(F,K||Y[F]),_t.type=F,_t.texture=K)}function T(){const F=j[et];F!==void 0&&F.type!==void 0&&(r.bindTexture(F.type,null),F.type=void 0,F.texture=void 0)}function Z(){try{r.compressedTexImage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function lt(){try{r.compressedTexImage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function ht(){try{r.texSubImage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function ft(){try{r.texSubImage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function At(){try{r.compressedTexSubImage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function P(){try{r.compressedTexSubImage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function N(){try{r.texStorage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function pt(){try{r.texStorage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function gt(){try{r.texImage2D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function dt(){try{r.texImage3D.apply(r,arguments)}catch(F){console.error("THREE.WebGLState:",F)}}function bt(F){ot.equals(F)===!1&&(r.scissor(F.x,F.y,F.z,F.w),ot.copy(F))}function vt(F){rt.equals(F)===!1&&(r.viewport(F.x,F.y,F.z,F.w),rt.copy(F))}function Bt(F,K){let at=c.get(K);at===void 0&&(at=new WeakMap,c.set(K,at));let _t=at.get(F);_t===void 0&&(_t=r.getUniformBlockIndex(K,F.name),at.set(F,_t))}function Ut(F,K){const _t=c.get(K).get(F);u.get(K)!==_t&&(r.uniformBlockBinding(K,_t,F.__bindingPointIndex),u.set(K,_t))}function Yt(){r.disable(3042),r.disable(2884),r.disable(2929),r.disable(32823),r.disable(3089),r.disable(2960),r.disable(32926),r.blendEquation(32774),r.blendFunc(1,0),r.blendFuncSeparate(1,0,1,0),r.colorMask(!0,!0,!0,!0),r.clearColor(0,0,0,0),r.depthMask(!0),r.depthFunc(513),r.clearDepth(1),r.stencilMask(4294967295),r.stencilFunc(519,0,4294967295),r.stencilOp(7680,7680,7680),r.clearStencil(0),r.cullFace(1029),r.frontFace(2305),r.polygonOffset(0,0),r.activeTexture(33984),r.bindFramebuffer(36160,null),i===!0&&(r.bindFramebuffer(36009,null),r.bindFramebuffer(36008,null)),r.useProgram(null),r.lineWidth(1),r.scissor(0,0,r.canvas.width,r.canvas.height),r.viewport(0,0,r.canvas.width,r.canvas.height),f={},et=null,j={},_={},y=new WeakMap,p=[],m=null,x=!1,M=null,b=null,S=null,w=null,E=null,R=null,v=null,D=!1,L=null,V=null,q=null,O=null,I=null,ot.set(0,0,r.canvas.width,r.canvas.height),rt.set(0,0,r.canvas.width,r.canvas.height),a.reset(),l.reset(),h.reset()}return{buffers:{color:a,depth:l,stencil:h},enable:xt,disable:mt,bindFramebuffer:wt,drawBuffers:yt,useProgram:Wt,setBlending:ce,setMaterial:ae,setFlipSided:oe,setCullFace:be,setLineWidth:ie,setPolygonOffset:Xt,setScissorTest:ke,activeTexture:De,bindTexture:C,unbindTexture:T,compressedTexImage2D:Z,compressedTexImage3D:lt,texImage2D:gt,texImage3D:dt,updateUBOMapping:Bt,uniformBlockBinding:Ut,texStorage2D:N,texStorage3D:pt,texSubImage2D:ht,texSubImage3D:ft,compressedTexSubImage2D:At,compressedTexSubImage3D:P,scissor:bt,viewport:vt,reset:Yt}}function fm(r,t,e,i,n,s,o){const a=n.isWebGL2,l=n.maxTextures,h=n.maxCubemapSize,u=n.maxTextureSize,c=n.maxSamples,f=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,_=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),y=new WeakMap;let p;const m=new WeakMap;let x=!1;try{x=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function M(C,T){return x?new OffscreenCanvas(C,T):ir("canvas")}function b(C,T,Z,lt){let ht=1;if((C.width>lt||C.height>lt)&&(ht=lt/Math.max(C.width,C.height)),ht<1||T===!0)if(typeof HTMLImageElement<"u"&&C instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&C instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&C instanceof ImageBitmap){const ft=T?Gs:Math.floor,At=ft(ht*C.width),P=ft(ht*C.height);p===void 0&&(p=M(At,P));const N=Z?M(At,P):p;return N.width=At,N.height=P,N.getContext("2d").drawImage(C,0,0,At,P),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+C.width+"x"+C.height+") to ("+At+"x"+P+")."),N}else return"data"in C&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+C.width+"x"+C.height+")."),C;return C}function S(C){return Oa(C.width)&&Oa(C.height)}function w(C){return a?!1:C.wrapS!==Qe||C.wrapT!==Qe||C.minFilter!==Ee&&C.minFilter!==We}function E(C,T){return C.generateMipmaps&&T&&C.minFilter!==Ee&&C.minFilter!==We}function R(C){r.generateMipmap(C)}function v(C,T,Z,lt,ht=!1){if(a===!1)return T;if(C!==null){if(r[C]!==void 0)return r[C];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+C+"'")}let ft=T;return T===6403&&(Z===5126&&(ft=33326),Z===5131&&(ft=33325),Z===5121&&(ft=33321)),T===33319&&(Z===5126&&(ft=33328),Z===5131&&(ft=33327),Z===5121&&(ft=33323)),T===6408&&(Z===5126&&(ft=34836),Z===5131&&(ft=34842),Z===5121&&(ft=lt===qt&&ht===!1?35907:32856),Z===32819&&(ft=32854),Z===32820&&(ft=32855)),(ft===33325||ft===33326||ft===33327||ft===33328||ft===34842||ft===34836)&&t.get("EXT_color_buffer_float"),ft}function D(C,T,Z){return E(C,Z)===!0||C.isFramebufferTexture&&C.minFilter!==Ee&&C.minFilter!==We?Math.log2(Math.max(T.width,T.height))+1:C.mipmaps!==void 0&&C.mipmaps.length>0?C.mipmaps.length:C.isCompressedTexture&&Array.isArray(C.image)?T.mipmaps.length:1}function L(C){return C===Ee||C===ua||C===Qr?9728:9729}function V(C){const T=C.target;T.removeEventListener("dispose",V),O(T),T.isVideoTexture&&y.delete(T)}function q(C){const T=C.target;T.removeEventListener("dispose",q),k(T)}function O(C){const T=i.get(C);if(T.__webglInit===void 0)return;const Z=C.source,lt=m.get(Z);if(lt){const ht=lt[T.__cacheKey];ht.usedTimes--,ht.usedTimes===0&&I(C),Object.keys(lt).length===0&&m.delete(Z)}i.remove(C)}function I(C){const T=i.get(C);r.deleteTexture(T.__webglTexture);const Z=C.source,lt=m.get(Z);delete lt[T.__cacheKey],o.memory.textures--}function k(C){const T=C.texture,Z=i.get(C),lt=i.get(T);if(lt.__webglTexture!==void 0&&(r.deleteTexture(lt.__webglTexture),o.memory.textures--),C.depthTexture&&C.depthTexture.dispose(),C.isWebGLCubeRenderTarget)for(let ht=0;ht<6;ht++)r.deleteFramebuffer(Z.__webglFramebuffer[ht]),Z.__webglDepthbuffer&&r.deleteRenderbuffer(Z.__webglDepthbuffer[ht]);else{if(r.deleteFramebuffer(Z.__webglFramebuffer),Z.__webglDepthbuffer&&r.deleteRenderbuffer(Z.__webglDepthbuffer),Z.__webglMultisampledFramebuffer&&r.deleteFramebuffer(Z.__webglMultisampledFramebuffer),Z.__webglColorRenderbuffer)for(let ht=0;ht<Z.__webglColorRenderbuffer.length;ht++)Z.__webglColorRenderbuffer[ht]&&r.deleteRenderbuffer(Z.__webglColorRenderbuffer[ht]);Z.__webglDepthRenderbuffer&&r.deleteRenderbuffer(Z.__webglDepthRenderbuffer)}if(C.isWebGLMultipleRenderTargets)for(let ht=0,ft=T.length;ht<ft;ht++){const At=i.get(T[ht]);At.__webglTexture&&(r.deleteTexture(At.__webglTexture),o.memory.textures--),i.remove(T[ht])}i.remove(T),i.remove(C)}let $=0;function Q(){$=0}function B(){const C=$;return C>=l&&console.warn("THREE.WebGLTextures: Trying to use "+C+" texture units while this GPU supports only "+l),$+=1,C}function et(C){const T=[];return T.push(C.wrapS),T.push(C.wrapT),T.push(C.wrapR||0),T.push(C.magFilter),T.push(C.minFilter),T.push(C.anisotropy),T.push(C.internalFormat),T.push(C.format),T.push(C.type),T.push(C.generateMipmaps),T.push(C.premultiplyAlpha),T.push(C.flipY),T.push(C.unpackAlignment),T.push(C.encoding),T.join()}function j(C,T){const Z=i.get(C);if(C.isVideoTexture&&ke(C),C.isRenderTargetTexture===!1&&C.version>0&&Z.__version!==C.version){const lt=C.image;if(lt===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(lt.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{mt(Z,C,T);return}}e.bindTexture(3553,Z.__webglTexture,33984+T)}function X(C,T){const Z=i.get(C);if(C.version>0&&Z.__version!==C.version){mt(Z,C,T);return}e.bindTexture(35866,Z.__webglTexture,33984+T)}function H(C,T){const Z=i.get(C);if(C.version>0&&Z.__version!==C.version){mt(Z,C,T);return}e.bindTexture(32879,Z.__webglTexture,33984+T)}function ot(C,T){const Z=i.get(C);if(C.version>0&&Z.__version!==C.version){wt(Z,C,T);return}e.bindTexture(34067,Z.__webglTexture,33984+T)}const rt={[Jn]:10497,[Qe]:33071,[zs]:33648},ct={[Ee]:9728,[ua]:9984,[Qr]:9986,[We]:9729,[Jl]:9985,[Qn]:9987};function Y(C,T,Z){if(Z?(r.texParameteri(C,10242,rt[T.wrapS]),r.texParameteri(C,10243,rt[T.wrapT]),(C===32879||C===35866)&&r.texParameteri(C,32882,rt[T.wrapR]),r.texParameteri(C,10240,ct[T.magFilter]),r.texParameteri(C,10241,ct[T.minFilter])):(r.texParameteri(C,10242,33071),r.texParameteri(C,10243,33071),(C===32879||C===35866)&&r.texParameteri(C,32882,33071),(T.wrapS!==Qe||T.wrapT!==Qe)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),r.texParameteri(C,10240,L(T.magFilter)),r.texParameteri(C,10241,L(T.minFilter)),T.minFilter!==Ee&&T.minFilter!==We&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),t.has("EXT_texture_filter_anisotropic")===!0){const lt=t.get("EXT_texture_filter_anisotropic");if(T.magFilter===Ee||T.minFilter!==Qr&&T.minFilter!==Qn||T.type===Vi&&t.has("OES_texture_float_linear")===!1||a===!1&&T.type===tr&&t.has("OES_texture_half_float_linear")===!1)return;(T.anisotropy>1||i.get(T).__currentAnisotropy)&&(r.texParameterf(C,lt.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(T.anisotropy,n.getMaxAnisotropy())),i.get(T).__currentAnisotropy=T.anisotropy)}}function xt(C,T){let Z=!1;C.__webglInit===void 0&&(C.__webglInit=!0,T.addEventListener("dispose",V));const lt=T.source;let ht=m.get(lt);ht===void 0&&(ht={},m.set(lt,ht));const ft=et(T);if(ft!==C.__cacheKey){ht[ft]===void 0&&(ht[ft]={texture:r.createTexture(),usedTimes:0},o.memory.textures++,Z=!0),ht[ft].usedTimes++;const At=ht[C.__cacheKey];At!==void 0&&(ht[C.__cacheKey].usedTimes--,At.usedTimes===0&&I(T)),C.__cacheKey=ft,C.__webglTexture=ht[ft].texture}return Z}function mt(C,T,Z){let lt=3553;(T.isDataArrayTexture||T.isCompressedArrayTexture)&&(lt=35866),T.isData3DTexture&&(lt=32879);const ht=xt(C,T),ft=T.source;e.bindTexture(lt,C.__webglTexture,33984+Z);const At=i.get(ft);if(ft.version!==At.__version||ht===!0){e.activeTexture(33984+Z),r.pixelStorei(37440,T.flipY),r.pixelStorei(37441,T.premultiplyAlpha),r.pixelStorei(3317,T.unpackAlignment),r.pixelStorei(37443,0);const P=w(T)&&S(T.image)===!1;let N=b(T.image,P,!1,u);N=De(T,N);const pt=S(N)||a,gt=s.convert(T.format,T.encoding);let dt=s.convert(T.type),bt=v(T.internalFormat,gt,dt,T.encoding,T.isVideoTexture);Y(lt,T,pt);let vt;const Bt=T.mipmaps,Ut=a&&T.isVideoTexture!==!0,Yt=At.__version===void 0||ht===!0,F=D(T,N,pt);if(T.isDepthTexture)bt=6402,a?T.type===Vi?bt=36012:T.type===ki?bt=33190:T.type===En?bt=35056:bt=33189:T.type===Vi&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),T.format===Wi&&bt===6402&&T.type!==ko&&T.type!==ki&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),T.type=ki,dt=s.convert(T.type)),T.format===Pn&&bt===6402&&(bt=34041,T.type!==En&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),T.type=En,dt=s.convert(T.type))),Yt&&(Ut?e.texStorage2D(3553,1,bt,N.width,N.height):e.texImage2D(3553,0,bt,N.width,N.height,0,gt,dt,null));else if(T.isDataTexture)if(Bt.length>0&&pt){Ut&&Yt&&e.texStorage2D(3553,F,bt,Bt[0].width,Bt[0].height);for(let K=0,at=Bt.length;K<at;K++)vt=Bt[K],Ut?e.texSubImage2D(3553,K,0,0,vt.width,vt.height,gt,dt,vt.data):e.texImage2D(3553,K,bt,vt.width,vt.height,0,gt,dt,vt.data);T.generateMipmaps=!1}else Ut?(Yt&&e.texStorage2D(3553,F,bt,N.width,N.height),e.texSubImage2D(3553,0,0,0,N.width,N.height,gt,dt,N.data)):e.texImage2D(3553,0,bt,N.width,N.height,0,gt,dt,N.data);else if(T.isCompressedTexture)if(T.isCompressedArrayTexture){Ut&&Yt&&e.texStorage3D(35866,F,bt,Bt[0].width,Bt[0].height,N.depth);for(let K=0,at=Bt.length;K<at;K++)vt=Bt[K],T.format!==ti?gt!==null?Ut?e.compressedTexSubImage3D(35866,K,0,0,0,vt.width,vt.height,N.depth,gt,vt.data,0,0):e.compressedTexImage3D(35866,K,bt,vt.width,vt.height,N.depth,0,vt.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Ut?e.texSubImage3D(35866,K,0,0,0,vt.width,vt.height,N.depth,gt,dt,vt.data):e.texImage3D(35866,K,bt,vt.width,vt.height,N.depth,0,gt,dt,vt.data)}else{Ut&&Yt&&e.texStorage2D(3553,F,bt,Bt[0].width,Bt[0].height);for(let K=0,at=Bt.length;K<at;K++)vt=Bt[K],T.format!==ti?gt!==null?Ut?e.compressedTexSubImage2D(3553,K,0,0,vt.width,vt.height,gt,vt.data):e.compressedTexImage2D(3553,K,bt,vt.width,vt.height,0,vt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Ut?e.texSubImage2D(3553,K,0,0,vt.width,vt.height,gt,dt,vt.data):e.texImage2D(3553,K,bt,vt.width,vt.height,0,gt,dt,vt.data)}else if(T.isDataArrayTexture)Ut?(Yt&&e.texStorage3D(35866,F,bt,N.width,N.height,N.depth),e.texSubImage3D(35866,0,0,0,0,N.width,N.height,N.depth,gt,dt,N.data)):e.texImage3D(35866,0,bt,N.width,N.height,N.depth,0,gt,dt,N.data);else if(T.isData3DTexture)Ut?(Yt&&e.texStorage3D(32879,F,bt,N.width,N.height,N.depth),e.texSubImage3D(32879,0,0,0,0,N.width,N.height,N.depth,gt,dt,N.data)):e.texImage3D(32879,0,bt,N.width,N.height,N.depth,0,gt,dt,N.data);else if(T.isFramebufferTexture){if(Yt)if(Ut)e.texStorage2D(3553,F,bt,N.width,N.height);else{let K=N.width,at=N.height;for(let _t=0;_t<F;_t++)e.texImage2D(3553,_t,bt,K,at,0,gt,dt,null),K>>=1,at>>=1}}else if(Bt.length>0&&pt){Ut&&Yt&&e.texStorage2D(3553,F,bt,Bt[0].width,Bt[0].height);for(let K=0,at=Bt.length;K<at;K++)vt=Bt[K],Ut?e.texSubImage2D(3553,K,0,0,gt,dt,vt):e.texImage2D(3553,K,bt,gt,dt,vt);T.generateMipmaps=!1}else Ut?(Yt&&e.texStorage2D(3553,F,bt,N.width,N.height),e.texSubImage2D(3553,0,0,0,gt,dt,N)):e.texImage2D(3553,0,bt,gt,dt,N);E(T,pt)&&R(lt),At.__version=ft.version,T.onUpdate&&T.onUpdate(T)}C.__version=T.version}function wt(C,T,Z){if(T.image.length!==6)return;const lt=xt(C,T),ht=T.source;e.bindTexture(34067,C.__webglTexture,33984+Z);const ft=i.get(ht);if(ht.version!==ft.__version||lt===!0){e.activeTexture(33984+Z),r.pixelStorei(37440,T.flipY),r.pixelStorei(37441,T.premultiplyAlpha),r.pixelStorei(3317,T.unpackAlignment),r.pixelStorei(37443,0);const At=T.isCompressedTexture||T.image[0].isCompressedTexture,P=T.image[0]&&T.image[0].isDataTexture,N=[];for(let K=0;K<6;K++)!At&&!P?N[K]=b(T.image[K],!1,!0,h):N[K]=P?T.image[K].image:T.image[K],N[K]=De(T,N[K]);const pt=N[0],gt=S(pt)||a,dt=s.convert(T.format,T.encoding),bt=s.convert(T.type),vt=v(T.internalFormat,dt,bt,T.encoding),Bt=a&&T.isVideoTexture!==!0,Ut=ft.__version===void 0||lt===!0;let Yt=D(T,pt,gt);Y(34067,T,gt);let F;if(At){Bt&&Ut&&e.texStorage2D(34067,Yt,vt,pt.width,pt.height);for(let K=0;K<6;K++){F=N[K].mipmaps;for(let at=0;at<F.length;at++){const _t=F[at];T.format!==ti?dt!==null?Bt?e.compressedTexSubImage2D(34069+K,at,0,0,_t.width,_t.height,dt,_t.data):e.compressedTexImage2D(34069+K,at,vt,_t.width,_t.height,0,_t.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):Bt?e.texSubImage2D(34069+K,at,0,0,_t.width,_t.height,dt,bt,_t.data):e.texImage2D(34069+K,at,vt,_t.width,_t.height,0,dt,bt,_t.data)}}}else{F=T.mipmaps,Bt&&Ut&&(F.length>0&&Yt++,e.texStorage2D(34067,Yt,vt,N[0].width,N[0].height));for(let K=0;K<6;K++)if(P){Bt?e.texSubImage2D(34069+K,0,0,0,N[K].width,N[K].height,dt,bt,N[K].data):e.texImage2D(34069+K,0,vt,N[K].width,N[K].height,0,dt,bt,N[K].data);for(let at=0;at<F.length;at++){const St=F[at].image[K].image;Bt?e.texSubImage2D(34069+K,at+1,0,0,St.width,St.height,dt,bt,St.data):e.texImage2D(34069+K,at+1,vt,St.width,St.height,0,dt,bt,St.data)}}else{Bt?e.texSubImage2D(34069+K,0,0,0,dt,bt,N[K]):e.texImage2D(34069+K,0,vt,dt,bt,N[K]);for(let at=0;at<F.length;at++){const _t=F[at];Bt?e.texSubImage2D(34069+K,at+1,0,0,dt,bt,_t.image[K]):e.texImage2D(34069+K,at+1,vt,dt,bt,_t.image[K])}}}E(T,gt)&&R(34067),ft.__version=ht.version,T.onUpdate&&T.onUpdate(T)}C.__version=T.version}function yt(C,T,Z,lt,ht){const ft=s.convert(Z.format,Z.encoding),At=s.convert(Z.type),P=v(Z.internalFormat,ft,At,Z.encoding);i.get(T).__hasExternalTextures||(ht===32879||ht===35866?e.texImage3D(ht,0,P,T.width,T.height,T.depth,0,ft,At,null):e.texImage2D(ht,0,P,T.width,T.height,0,ft,At,null)),e.bindFramebuffer(36160,C),Xt(T)?f.framebufferTexture2DMultisampleEXT(36160,lt,ht,i.get(Z).__webglTexture,0,ie(T)):(ht===3553||ht>=34069&&ht<=34074)&&r.framebufferTexture2D(36160,lt,ht,i.get(Z).__webglTexture,0),e.bindFramebuffer(36160,null)}function Wt(C,T,Z){if(r.bindRenderbuffer(36161,C),T.depthBuffer&&!T.stencilBuffer){let lt=33189;if(Z||Xt(T)){const ht=T.depthTexture;ht&&ht.isDepthTexture&&(ht.type===Vi?lt=36012:ht.type===ki&&(lt=33190));const ft=ie(T);Xt(T)?f.renderbufferStorageMultisampleEXT(36161,ft,lt,T.width,T.height):r.renderbufferStorageMultisample(36161,ft,lt,T.width,T.height)}else r.renderbufferStorage(36161,lt,T.width,T.height);r.framebufferRenderbuffer(36160,36096,36161,C)}else if(T.depthBuffer&&T.stencilBuffer){const lt=ie(T);Z&&Xt(T)===!1?r.renderbufferStorageMultisample(36161,lt,35056,T.width,T.height):Xt(T)?f.renderbufferStorageMultisampleEXT(36161,lt,35056,T.width,T.height):r.renderbufferStorage(36161,34041,T.width,T.height),r.framebufferRenderbuffer(36160,33306,36161,C)}else{const lt=T.isWebGLMultipleRenderTargets===!0?T.texture:[T.texture];for(let ht=0;ht<lt.length;ht++){const ft=lt[ht],At=s.convert(ft.format,ft.encoding),P=s.convert(ft.type),N=v(ft.internalFormat,At,P,ft.encoding),pt=ie(T);Z&&Xt(T)===!1?r.renderbufferStorageMultisample(36161,pt,N,T.width,T.height):Xt(T)?f.renderbufferStorageMultisampleEXT(36161,pt,N,T.width,T.height):r.renderbufferStorage(36161,N,T.width,T.height)}}r.bindRenderbuffer(36161,null)}function Pt(C,T){if(T&&T.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(36160,C),!(T.depthTexture&&T.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!i.get(T.depthTexture).__webglTexture||T.depthTexture.image.width!==T.width||T.depthTexture.image.height!==T.height)&&(T.depthTexture.image.width=T.width,T.depthTexture.image.height=T.height,T.depthTexture.needsUpdate=!0),j(T.depthTexture,0);const lt=i.get(T.depthTexture).__webglTexture,ht=ie(T);if(T.depthTexture.format===Wi)Xt(T)?f.framebufferTexture2DMultisampleEXT(36160,36096,3553,lt,0,ht):r.framebufferTexture2D(36160,36096,3553,lt,0);else if(T.depthTexture.format===Pn)Xt(T)?f.framebufferTexture2DMultisampleEXT(36160,33306,3553,lt,0,ht):r.framebufferTexture2D(36160,33306,3553,lt,0);else throw new Error("Unknown depthTexture format")}function Tt(C){const T=i.get(C),Z=C.isWebGLCubeRenderTarget===!0;if(C.depthTexture&&!T.__autoAllocateDepthBuffer){if(Z)throw new Error("target.depthTexture not supported in Cube render targets");Pt(T.__webglFramebuffer,C)}else if(Z){T.__webglDepthbuffer=[];for(let lt=0;lt<6;lt++)e.bindFramebuffer(36160,T.__webglFramebuffer[lt]),T.__webglDepthbuffer[lt]=r.createRenderbuffer(),Wt(T.__webglDepthbuffer[lt],C,!1)}else e.bindFramebuffer(36160,T.__webglFramebuffer),T.__webglDepthbuffer=r.createRenderbuffer(),Wt(T.__webglDepthbuffer,C,!1);e.bindFramebuffer(36160,null)}function ce(C,T,Z){const lt=i.get(C);T!==void 0&&yt(lt.__webglFramebuffer,C,C.texture,36064,3553),Z!==void 0&&Tt(C)}function ae(C){const T=C.texture,Z=i.get(C),lt=i.get(T);C.addEventListener("dispose",q),C.isWebGLMultipleRenderTargets!==!0&&(lt.__webglTexture===void 0&&(lt.__webglTexture=r.createTexture()),lt.__version=T.version,o.memory.textures++);const ht=C.isWebGLCubeRenderTarget===!0,ft=C.isWebGLMultipleRenderTargets===!0,At=S(C)||a;if(ht){Z.__webglFramebuffer=[];for(let P=0;P<6;P++)Z.__webglFramebuffer[P]=r.createFramebuffer()}else{if(Z.__webglFramebuffer=r.createFramebuffer(),ft)if(n.drawBuffers){const P=C.texture;for(let N=0,pt=P.length;N<pt;N++){const gt=i.get(P[N]);gt.__webglTexture===void 0&&(gt.__webglTexture=r.createTexture(),o.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(a&&C.samples>0&&Xt(C)===!1){const P=ft?T:[T];Z.__webglMultisampledFramebuffer=r.createFramebuffer(),Z.__webglColorRenderbuffer=[],e.bindFramebuffer(36160,Z.__webglMultisampledFramebuffer);for(let N=0;N<P.length;N++){const pt=P[N];Z.__webglColorRenderbuffer[N]=r.createRenderbuffer(),r.bindRenderbuffer(36161,Z.__webglColorRenderbuffer[N]);const gt=s.convert(pt.format,pt.encoding),dt=s.convert(pt.type),bt=v(pt.internalFormat,gt,dt,pt.encoding,C.isXRRenderTarget===!0),vt=ie(C);r.renderbufferStorageMultisample(36161,vt,bt,C.width,C.height),r.framebufferRenderbuffer(36160,36064+N,36161,Z.__webglColorRenderbuffer[N])}r.bindRenderbuffer(36161,null),C.depthBuffer&&(Z.__webglDepthRenderbuffer=r.createRenderbuffer(),Wt(Z.__webglDepthRenderbuffer,C,!0)),e.bindFramebuffer(36160,null)}}if(ht){e.bindTexture(34067,lt.__webglTexture),Y(34067,T,At);for(let P=0;P<6;P++)yt(Z.__webglFramebuffer[P],C,T,36064,34069+P);E(T,At)&&R(34067),e.unbindTexture()}else if(ft){const P=C.texture;for(let N=0,pt=P.length;N<pt;N++){const gt=P[N],dt=i.get(gt);e.bindTexture(3553,dt.__webglTexture),Y(3553,gt,At),yt(Z.__webglFramebuffer,C,gt,36064+N,3553),E(gt,At)&&R(3553)}e.unbindTexture()}else{let P=3553;(C.isWebGL3DRenderTarget||C.isWebGLArrayRenderTarget)&&(a?P=C.isWebGL3DRenderTarget?32879:35866:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),e.bindTexture(P,lt.__webglTexture),Y(P,T,At),yt(Z.__webglFramebuffer,C,T,36064,P),E(T,At)&&R(P),e.unbindTexture()}C.depthBuffer&&Tt(C)}function oe(C){const T=S(C)||a,Z=C.isWebGLMultipleRenderTargets===!0?C.texture:[C.texture];for(let lt=0,ht=Z.length;lt<ht;lt++){const ft=Z[lt];if(E(ft,T)){const At=C.isWebGLCubeRenderTarget?34067:3553,P=i.get(ft).__webglTexture;e.bindTexture(At,P),R(At),e.unbindTexture()}}}function be(C){if(a&&C.samples>0&&Xt(C)===!1){const T=C.isWebGLMultipleRenderTargets?C.texture:[C.texture],Z=C.width,lt=C.height;let ht=16384;const ft=[],At=C.stencilBuffer?33306:36096,P=i.get(C),N=C.isWebGLMultipleRenderTargets===!0;if(N)for(let pt=0;pt<T.length;pt++)e.bindFramebuffer(36160,P.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(36160,36064+pt,36161,null),e.bindFramebuffer(36160,P.__webglFramebuffer),r.framebufferTexture2D(36009,36064+pt,3553,null,0);e.bindFramebuffer(36008,P.__webglMultisampledFramebuffer),e.bindFramebuffer(36009,P.__webglFramebuffer);for(let pt=0;pt<T.length;pt++){ft.push(36064+pt),C.depthBuffer&&ft.push(At);const gt=P.__ignoreDepthValues!==void 0?P.__ignoreDepthValues:!1;if(gt===!1&&(C.depthBuffer&&(ht|=256),C.stencilBuffer&&(ht|=1024)),N&&r.framebufferRenderbuffer(36008,36064,36161,P.__webglColorRenderbuffer[pt]),gt===!0&&(r.invalidateFramebuffer(36008,[At]),r.invalidateFramebuffer(36009,[At])),N){const dt=i.get(T[pt]).__webglTexture;r.framebufferTexture2D(36009,36064,3553,dt,0)}r.blitFramebuffer(0,0,Z,lt,0,0,Z,lt,ht,9728),_&&r.invalidateFramebuffer(36008,ft)}if(e.bindFramebuffer(36008,null),e.bindFramebuffer(36009,null),N)for(let pt=0;pt<T.length;pt++){e.bindFramebuffer(36160,P.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(36160,36064+pt,36161,P.__webglColorRenderbuffer[pt]);const gt=i.get(T[pt]).__webglTexture;e.bindFramebuffer(36160,P.__webglFramebuffer),r.framebufferTexture2D(36009,36064+pt,3553,gt,0)}e.bindFramebuffer(36009,P.__webglMultisampledFramebuffer)}}function ie(C){return Math.min(c,C.samples)}function Xt(C){const T=i.get(C);return a&&C.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&T.__useRenderToTexture!==!1}function ke(C){const T=o.render.frame;y.get(C)!==T&&(y.set(C,T),C.update())}function De(C,T){const Z=C.encoding,lt=C.format,ht=C.type;return C.isCompressedTexture===!0||C.isVideoTexture===!0||C.format===Vs||Z!==Zi&&(Z===qt?a===!1?t.has("EXT_sRGB")===!0&&lt===ti?(C.format=Vs,C.minFilter=We,C.generateMipmaps=!1):T=Wo.sRGBToLinear(T):(lt!==ti||ht!==qi)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",Z)),T}this.allocateTextureUnit=B,this.resetTextureUnits=Q,this.setTexture2D=j,this.setTexture2DArray=X,this.setTexture3D=H,this.setTextureCube=ot,this.rebindTextures=ce,this.setupRenderTarget=ae,this.updateRenderTargetMipmap=oe,this.updateMultisampleRenderTarget=be,this.setupDepthRenderbuffer=Tt,this.setupFrameBufferTexture=yt,this.useMultisampledRTT=Xt}function dm(r,t,e){const i=e.isWebGL2;function n(s,o=null){let a;if(s===qi)return 5121;if(s===ih)return 32819;if(s===nh)return 32820;if(s===Ql)return 5120;if(s===th)return 5122;if(s===ko)return 5123;if(s===eh)return 5124;if(s===ki)return 5125;if(s===Vi)return 5126;if(s===tr)return i?5131:(a=t.get("OES_texture_half_float"),a!==null?a.HALF_FLOAT_OES:null);if(s===rh)return 6406;if(s===ti)return 6408;if(s===ah)return 6409;if(s===oh)return 6410;if(s===Wi)return 6402;if(s===Pn)return 34041;if(s===sh)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),6408;if(s===Vs)return a=t.get("EXT_sRGB"),a!==null?a.SRGB_ALPHA_EXT:null;if(s===lh)return 6403;if(s===hh)return 36244;if(s===uh)return 33319;if(s===ch)return 33320;if(s===fh)return 36249;if(s===ts||s===es||s===is||s===ns)if(o===qt)if(a=t.get("WEBGL_compressed_texture_s3tc_srgb"),a!==null){if(s===ts)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(s===es)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(s===is)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(s===ns)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(a=t.get("WEBGL_compressed_texture_s3tc"),a!==null){if(s===ts)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(s===es)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(s===is)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(s===ns)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(s===ca||s===fa||s===da||s===ma)if(a=t.get("WEBGL_compressed_texture_pvrtc"),a!==null){if(s===ca)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(s===fa)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(s===da)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(s===ma)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(s===dh)return a=t.get("WEBGL_compressed_texture_etc1"),a!==null?a.COMPRESSED_RGB_ETC1_WEBGL:null;if(s===pa||s===_a)if(a=t.get("WEBGL_compressed_texture_etc"),a!==null){if(s===pa)return o===qt?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(s===_a)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(s===ga||s===ya||s===xa||s===va||s===ba||s===Sa||s===Ma||s===wa||s===Ta||s===Aa||s===Ea||s===Da||s===Ca||s===Pa)if(a=t.get("WEBGL_compressed_texture_astc"),a!==null){if(s===ga)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(s===ya)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(s===xa)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(s===va)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(s===ba)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(s===Sa)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(s===Ma)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(s===wa)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(s===Ta)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(s===Aa)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(s===Ea)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(s===Da)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(s===Ca)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(s===Pa)return o===qt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(s===Ia)if(a=t.get("EXT_texture_compression_bptc"),a!==null){if(s===Ia)return o===qt?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;return s===En?i?34042:(a=t.get("WEBGL_depth_texture"),a!==null?a.UNSIGNED_INT_24_8_WEBGL:null):r[s]!==void 0?r[s]:null}return{convert:n}}class mm extends He{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}class Gi extends Oe{constructor(){super(),this.isGroup=!0,this.type="Group"}}const pm={type:"move"};class Ps{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Gi,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Gi,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new G,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new G),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Gi,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new G,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new G),this._grip}dispatchEvent(t){return this._targetRay!==null&&this._targetRay.dispatchEvent(t),this._grip!==null&&this._grip.dispatchEvent(t),this._hand!==null&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const i of t.hand.values())this._getHandJoint(e,i)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(t,e,i){let n=null,s=null,o=null;const a=this._targetRay,l=this._grip,h=this._hand;if(t&&e.session.visibilityState!=="visible-blurred"){if(h&&t.hand){o=!0;for(const p of t.hand.values()){const m=e.getJointPose(p,i),x=this._getHandJoint(h,p);m!==null&&(x.matrix.fromArray(m.transform.matrix),x.matrix.decompose(x.position,x.rotation,x.scale),x.jointRadius=m.radius),x.visible=m!==null}const u=h.joints["index-finger-tip"],c=h.joints["thumb-tip"],f=u.position.distanceTo(c.position),_=.02,y=.005;h.inputState.pinching&&f>_+y?(h.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!h.inputState.pinching&&f<=_-y&&(h.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else l!==null&&t.gripSpace&&(s=e.getPose(t.gripSpace,i),s!==null&&(l.matrix.fromArray(s.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),s.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(s.linearVelocity)):l.hasLinearVelocity=!1,s.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(s.angularVelocity)):l.hasAngularVelocity=!1));a!==null&&(n=e.getPose(t.targetRaySpace,i),n===null&&s!==null&&(n=s),n!==null&&(a.matrix.fromArray(n.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),n.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(n.linearVelocity)):a.hasLinearVelocity=!1,n.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(n.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(pm)))}return a!==null&&(a.visible=n!==null),l!==null&&(l.visible=s!==null),h!==null&&(h.visible=o!==null),this}_getHandJoint(t,e){if(t.joints[e.jointName]===void 0){const i=new Gi;i.matrixAutoUpdate=!1,i.visible=!1,t.joints[e.jointName]=i,t.add(i)}return t.joints[e.jointName]}}class _m extends Le{constructor(t,e,i,n,s,o,a,l,h,u){if(u=u!==void 0?u:Wi,u!==Wi&&u!==Pn)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");i===void 0&&u===Wi&&(i=ki),i===void 0&&u===Pn&&(i=En),super(null,n,s,o,a,l,u,i,h),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=a!==void 0?a:Ee,this.minFilter=l!==void 0?l:Ee,this.flipY=!1,this.generateMipmaps=!1}}class gm extends nn{constructor(t,e){super();const i=this;let n=null,s=1,o=null,a="local-floor",l=null,h=null,u=null,c=null,f=null,_=null;const y=e.getContextAttributes();let p=null,m=null;const x=[],M=[],b=new Set,S=new Map,w=new He;w.layers.enable(1),w.viewport=new ye;const E=new He;E.layers.enable(2),E.viewport=new ye;const R=[w,E],v=new mm;v.layers.enable(1),v.layers.enable(2);let D=null,L=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(X){let H=x[X];return H===void 0&&(H=new Ps,x[X]=H),H.getTargetRaySpace()},this.getControllerGrip=function(X){let H=x[X];return H===void 0&&(H=new Ps,x[X]=H),H.getGripSpace()},this.getHand=function(X){let H=x[X];return H===void 0&&(H=new Ps,x[X]=H),H.getHandSpace()};function V(X){const H=M.indexOf(X.inputSource);if(H===-1)return;const ot=x[H];ot!==void 0&&ot.dispatchEvent({type:X.type,data:X.inputSource})}function q(){n.removeEventListener("select",V),n.removeEventListener("selectstart",V),n.removeEventListener("selectend",V),n.removeEventListener("squeeze",V),n.removeEventListener("squeezestart",V),n.removeEventListener("squeezeend",V),n.removeEventListener("end",q),n.removeEventListener("inputsourceschange",O);for(let X=0;X<x.length;X++){const H=M[X];H!==null&&(M[X]=null,x[X].disconnect(H))}D=null,L=null,t.setRenderTarget(p),f=null,c=null,u=null,n=null,m=null,j.stop(),i.isPresenting=!1,i.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(X){s=X,i.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(X){a=X,i.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||o},this.setReferenceSpace=function(X){l=X},this.getBaseLayer=function(){return c!==null?c:f},this.getBinding=function(){return u},this.getFrame=function(){return _},this.getSession=function(){return n},this.setSession=async function(X){if(n=X,n!==null){if(p=t.getRenderTarget(),n.addEventListener("select",V),n.addEventListener("selectstart",V),n.addEventListener("selectend",V),n.addEventListener("squeeze",V),n.addEventListener("squeezestart",V),n.addEventListener("squeezeend",V),n.addEventListener("end",q),n.addEventListener("inputsourceschange",O),y.xrCompatible!==!0&&await e.makeXRCompatible(),n.renderState.layers===void 0||t.capabilities.isWebGL2===!1){const H={antialias:n.renderState.layers===void 0?y.antialias:!0,alpha:y.alpha,depth:y.depth,stencil:y.stencil,framebufferScaleFactor:s};f=new XRWebGLLayer(n,e,H),n.updateRenderState({baseLayer:f}),m=new Ki(f.framebufferWidth,f.framebufferHeight,{format:ti,type:qi,encoding:t.outputEncoding,stencilBuffer:y.stencil})}else{let H=null,ot=null,rt=null;y.depth&&(rt=y.stencil?35056:33190,H=y.stencil?Pn:Wi,ot=y.stencil?En:ki);const ct={colorFormat:32856,depthFormat:rt,scaleFactor:s};u=new XRWebGLBinding(n,e),c=u.createProjectionLayer(ct),n.updateRenderState({layers:[c]}),m=new Ki(c.textureWidth,c.textureHeight,{format:ti,type:qi,depthTexture:new _m(c.textureWidth,c.textureHeight,ot,void 0,void 0,void 0,void 0,void 0,void 0,H),stencilBuffer:y.stencil,encoding:t.outputEncoding,samples:y.antialias?4:0});const Y=t.properties.get(m);Y.__ignoreDepthValues=c.ignoreDepthValues}m.isXRRenderTarget=!0,this.setFoveation(1),l=null,o=await n.requestReferenceSpace(a),j.setContext(n),j.start(),i.isPresenting=!0,i.dispatchEvent({type:"sessionstart"})}};function O(X){for(let H=0;H<X.removed.length;H++){const ot=X.removed[H],rt=M.indexOf(ot);rt>=0&&(M[rt]=null,x[rt].disconnect(ot))}for(let H=0;H<X.added.length;H++){const ot=X.added[H];let rt=M.indexOf(ot);if(rt===-1){for(let Y=0;Y<x.length;Y++)if(Y>=M.length){M.push(ot),rt=Y;break}else if(M[Y]===null){M[Y]=ot,rt=Y;break}if(rt===-1)break}const ct=x[rt];ct&&ct.connect(ot)}}const I=new G,k=new G;function $(X,H,ot){I.setFromMatrixPosition(H.matrixWorld),k.setFromMatrixPosition(ot.matrixWorld);const rt=I.distanceTo(k),ct=H.projectionMatrix.elements,Y=ot.projectionMatrix.elements,xt=ct[14]/(ct[10]-1),mt=ct[14]/(ct[10]+1),wt=(ct[9]+1)/ct[5],yt=(ct[9]-1)/ct[5],Wt=(ct[8]-1)/ct[0],Pt=(Y[8]+1)/Y[0],Tt=xt*Wt,ce=xt*Pt,ae=rt/(-Wt+Pt),oe=ae*-Wt;H.matrixWorld.decompose(X.position,X.quaternion,X.scale),X.translateX(oe),X.translateZ(ae),X.matrixWorld.compose(X.position,X.quaternion,X.scale),X.matrixWorldInverse.copy(X.matrixWorld).invert();const be=xt+ae,ie=mt+ae,Xt=Tt-oe,ke=ce+(rt-oe),De=wt*mt/ie*be,C=yt*mt/ie*be;X.projectionMatrix.makePerspective(Xt,ke,De,C,be,ie)}function Q(X,H){H===null?X.matrixWorld.copy(X.matrix):X.matrixWorld.multiplyMatrices(H.matrixWorld,X.matrix),X.matrixWorldInverse.copy(X.matrixWorld).invert()}this.updateCamera=function(X){if(n===null)return;v.near=E.near=w.near=X.near,v.far=E.far=w.far=X.far,(D!==v.near||L!==v.far)&&(n.updateRenderState({depthNear:v.near,depthFar:v.far}),D=v.near,L=v.far);const H=X.parent,ot=v.cameras;Q(v,H);for(let ct=0;ct<ot.length;ct++)Q(ot[ct],H);v.matrixWorld.decompose(v.position,v.quaternion,v.scale),X.matrix.copy(v.matrix),X.matrix.decompose(X.position,X.quaternion,X.scale);const rt=X.children;for(let ct=0,Y=rt.length;ct<Y;ct++)rt[ct].updateMatrixWorld(!0);ot.length===2?$(v,w,E):v.projectionMatrix.copy(w.projectionMatrix)},this.getCamera=function(){return v},this.getFoveation=function(){if(c!==null)return c.fixedFoveation;if(f!==null)return f.fixedFoveation},this.setFoveation=function(X){c!==null&&(c.fixedFoveation=X),f!==null&&f.fixedFoveation!==void 0&&(f.fixedFoveation=X)},this.getPlanes=function(){return b};let B=null;function et(X,H){if(h=H.getViewerPose(l||o),_=H,h!==null){const ot=h.views;f!==null&&(t.setRenderTargetFramebuffer(m,f.framebuffer),t.setRenderTarget(m));let rt=!1;ot.length!==v.cameras.length&&(v.cameras.length=0,rt=!0);for(let ct=0;ct<ot.length;ct++){const Y=ot[ct];let xt=null;if(f!==null)xt=f.getViewport(Y);else{const wt=u.getViewSubImage(c,Y);xt=wt.viewport,ct===0&&(t.setRenderTargetTextures(m,wt.colorTexture,c.ignoreDepthValues?void 0:wt.depthStencilTexture),t.setRenderTarget(m))}let mt=R[ct];mt===void 0&&(mt=new He,mt.layers.enable(ct),mt.viewport=new ye,R[ct]=mt),mt.matrix.fromArray(Y.transform.matrix),mt.projectionMatrix.fromArray(Y.projectionMatrix),mt.viewport.set(xt.x,xt.y,xt.width,xt.height),ct===0&&v.matrix.copy(mt.matrix),rt===!0&&v.cameras.push(mt)}}for(let ot=0;ot<x.length;ot++){const rt=M[ot],ct=x[ot];rt!==null&&ct!==void 0&&ct.update(rt,H,l||o)}if(B&&B(X,H),H.detectedPlanes){i.dispatchEvent({type:"planesdetected",data:H.detectedPlanes});let ot=null;for(const rt of b)H.detectedPlanes.has(rt)||(ot===null&&(ot=[]),ot.push(rt));if(ot!==null)for(const rt of ot)b.delete(rt),S.delete(rt),i.dispatchEvent({type:"planeremoved",data:rt});for(const rt of H.detectedPlanes)if(!b.has(rt))b.add(rt),S.set(rt,H.lastChangedTime),i.dispatchEvent({type:"planeadded",data:rt});else{const ct=S.get(rt);rt.lastChangedTime>ct&&(S.set(rt,rt.lastChangedTime),i.dispatchEvent({type:"planechanged",data:rt}))}}_=null}const j=new Qo;j.setAnimationLoop(et),this.setAnimationLoop=function(X){B=X},this.dispose=function(){}}}function ym(r,t){function e(p,m){m.color.getRGB(p.fogColor.value,Zo(r)),m.isFog?(p.fogNear.value=m.near,p.fogFar.value=m.far):m.isFogExp2&&(p.fogDensity.value=m.density)}function i(p,m,x,M,b){m.isMeshBasicMaterial||m.isMeshLambertMaterial?n(p,m):m.isMeshToonMaterial?(n(p,m),u(p,m)):m.isMeshPhongMaterial?(n(p,m),h(p,m)):m.isMeshStandardMaterial?(n(p,m),c(p,m),m.isMeshPhysicalMaterial&&f(p,m,b)):m.isMeshMatcapMaterial?(n(p,m),_(p,m)):m.isMeshDepthMaterial?n(p,m):m.isMeshDistanceMaterial?(n(p,m),y(p,m)):m.isMeshNormalMaterial?n(p,m):m.isLineBasicMaterial?(s(p,m),m.isLineDashedMaterial&&o(p,m)):m.isPointsMaterial?a(p,m,x,M):m.isSpriteMaterial?l(p,m):m.isShadowMaterial?(p.color.value.copy(m.color),p.opacity.value=m.opacity):m.isShaderMaterial&&(m.uniformsNeedUpdate=!1)}function n(p,m){p.opacity.value=m.opacity,m.color&&p.diffuse.value.copy(m.color),m.emissive&&p.emissive.value.copy(m.emissive).multiplyScalar(m.emissiveIntensity),m.map&&(p.map.value=m.map),m.alphaMap&&(p.alphaMap.value=m.alphaMap),m.bumpMap&&(p.bumpMap.value=m.bumpMap,p.bumpScale.value=m.bumpScale,m.side===je&&(p.bumpScale.value*=-1)),m.displacementMap&&(p.displacementMap.value=m.displacementMap,p.displacementScale.value=m.displacementScale,p.displacementBias.value=m.displacementBias),m.emissiveMap&&(p.emissiveMap.value=m.emissiveMap),m.normalMap&&(p.normalMap.value=m.normalMap,p.normalScale.value.copy(m.normalScale),m.side===je&&p.normalScale.value.negate()),m.specularMap&&(p.specularMap.value=m.specularMap),m.alphaTest>0&&(p.alphaTest.value=m.alphaTest);const x=t.get(m).envMap;if(x&&(p.envMap.value=x,p.flipEnvMap.value=x.isCubeTexture&&x.isRenderTargetTexture===!1?-1:1,p.reflectivity.value=m.reflectivity,p.ior.value=m.ior,p.refractionRatio.value=m.refractionRatio),m.lightMap){p.lightMap.value=m.lightMap;const S=r.physicallyCorrectLights!==!0?Math.PI:1;p.lightMapIntensity.value=m.lightMapIntensity*S}m.aoMap&&(p.aoMap.value=m.aoMap,p.aoMapIntensity.value=m.aoMapIntensity);let M;m.map?M=m.map:m.specularMap?M=m.specularMap:m.displacementMap?M=m.displacementMap:m.normalMap?M=m.normalMap:m.bumpMap?M=m.bumpMap:m.roughnessMap?M=m.roughnessMap:m.metalnessMap?M=m.metalnessMap:m.alphaMap?M=m.alphaMap:m.emissiveMap?M=m.emissiveMap:m.clearcoatMap?M=m.clearcoatMap:m.clearcoatNormalMap?M=m.clearcoatNormalMap:m.clearcoatRoughnessMap?M=m.clearcoatRoughnessMap:m.iridescenceMap?M=m.iridescenceMap:m.iridescenceThicknessMap?M=m.iridescenceThicknessMap:m.specularIntensityMap?M=m.specularIntensityMap:m.specularColorMap?M=m.specularColorMap:m.transmissionMap?M=m.transmissionMap:m.thicknessMap?M=m.thicknessMap:m.sheenColorMap?M=m.sheenColorMap:m.sheenRoughnessMap&&(M=m.sheenRoughnessMap),M!==void 0&&(M.isWebGLRenderTarget&&(M=M.texture),M.matrixAutoUpdate===!0&&M.updateMatrix(),p.uvTransform.value.copy(M.matrix));let b;m.aoMap?b=m.aoMap:m.lightMap&&(b=m.lightMap),b!==void 0&&(b.isWebGLRenderTarget&&(b=b.texture),b.matrixAutoUpdate===!0&&b.updateMatrix(),p.uv2Transform.value.copy(b.matrix))}function s(p,m){p.diffuse.value.copy(m.color),p.opacity.value=m.opacity}function o(p,m){p.dashSize.value=m.dashSize,p.totalSize.value=m.dashSize+m.gapSize,p.scale.value=m.scale}function a(p,m,x,M){p.diffuse.value.copy(m.color),p.opacity.value=m.opacity,p.size.value=m.size*x,p.scale.value=M*.5,m.map&&(p.map.value=m.map),m.alphaMap&&(p.alphaMap.value=m.alphaMap),m.alphaTest>0&&(p.alphaTest.value=m.alphaTest);let b;m.map?b=m.map:m.alphaMap&&(b=m.alphaMap),b!==void 0&&(b.matrixAutoUpdate===!0&&b.updateMatrix(),p.uvTransform.value.copy(b.matrix))}function l(p,m){p.diffuse.value.copy(m.color),p.opacity.value=m.opacity,p.rotation.value=m.rotation,m.map&&(p.map.value=m.map),m.alphaMap&&(p.alphaMap.value=m.alphaMap),m.alphaTest>0&&(p.alphaTest.value=m.alphaTest);let x;m.map?x=m.map:m.alphaMap&&(x=m.alphaMap),x!==void 0&&(x.matrixAutoUpdate===!0&&x.updateMatrix(),p.uvTransform.value.copy(x.matrix))}function h(p,m){p.specular.value.copy(m.specular),p.shininess.value=Math.max(m.shininess,1e-4)}function u(p,m){m.gradientMap&&(p.gradientMap.value=m.gradientMap)}function c(p,m){p.roughness.value=m.roughness,p.metalness.value=m.metalness,m.roughnessMap&&(p.roughnessMap.value=m.roughnessMap),m.metalnessMap&&(p.metalnessMap.value=m.metalnessMap),t.get(m).envMap&&(p.envMapIntensity.value=m.envMapIntensity)}function f(p,m,x){p.ior.value=m.ior,m.sheen>0&&(p.sheenColor.value.copy(m.sheenColor).multiplyScalar(m.sheen),p.sheenRoughness.value=m.sheenRoughness,m.sheenColorMap&&(p.sheenColorMap.value=m.sheenColorMap),m.sheenRoughnessMap&&(p.sheenRoughnessMap.value=m.sheenRoughnessMap)),m.clearcoat>0&&(p.clearcoat.value=m.clearcoat,p.clearcoatRoughness.value=m.clearcoatRoughness,m.clearcoatMap&&(p.clearcoatMap.value=m.clearcoatMap),m.clearcoatRoughnessMap&&(p.clearcoatRoughnessMap.value=m.clearcoatRoughnessMap),m.clearcoatNormalMap&&(p.clearcoatNormalScale.value.copy(m.clearcoatNormalScale),p.clearcoatNormalMap.value=m.clearcoatNormalMap,m.side===je&&p.clearcoatNormalScale.value.negate())),m.iridescence>0&&(p.iridescence.value=m.iridescence,p.iridescenceIOR.value=m.iridescenceIOR,p.iridescenceThicknessMinimum.value=m.iridescenceThicknessRange[0],p.iridescenceThicknessMaximum.value=m.iridescenceThicknessRange[1],m.iridescenceMap&&(p.iridescenceMap.value=m.iridescenceMap),m.iridescenceThicknessMap&&(p.iridescenceThicknessMap.value=m.iridescenceThicknessMap)),m.transmission>0&&(p.transmission.value=m.transmission,p.transmissionSamplerMap.value=x.texture,p.transmissionSamplerSize.value.set(x.width,x.height),m.transmissionMap&&(p.transmissionMap.value=m.transmissionMap),p.thickness.value=m.thickness,m.thicknessMap&&(p.thicknessMap.value=m.thicknessMap),p.attenuationDistance.value=m.attenuationDistance,p.attenuationColor.value.copy(m.attenuationColor)),p.specularIntensity.value=m.specularIntensity,p.specularColor.value.copy(m.specularColor),m.specularIntensityMap&&(p.specularIntensityMap.value=m.specularIntensityMap),m.specularColorMap&&(p.specularColorMap.value=m.specularColorMap)}function _(p,m){m.matcap&&(p.matcap.value=m.matcap)}function y(p,m){p.referencePosition.value.copy(m.referencePosition),p.nearDistance.value=m.nearDistance,p.farDistance.value=m.farDistance}return{refreshFogUniforms:e,refreshMaterialUniforms:i}}function xm(r,t,e,i){let n={},s={},o=[];const a=e.isWebGL2?r.getParameter(35375):0;function l(M,b){const S=b.program;i.uniformBlockBinding(M,S)}function h(M,b){let S=n[M.id];S===void 0&&(y(M),S=u(M),n[M.id]=S,M.addEventListener("dispose",m));const w=b.program;i.updateUBOMapping(M,w);const E=t.render.frame;s[M.id]!==E&&(f(M),s[M.id]=E)}function u(M){const b=c();M.__bindingPointIndex=b;const S=r.createBuffer(),w=M.__size,E=M.usage;return r.bindBuffer(35345,S),r.bufferData(35345,w,E),r.bindBuffer(35345,null),r.bindBufferBase(35345,b,S),S}function c(){for(let M=0;M<a;M++)if(o.indexOf(M)===-1)return o.push(M),M;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function f(M){const b=n[M.id],S=M.uniforms,w=M.__cache;r.bindBuffer(35345,b);for(let E=0,R=S.length;E<R;E++){const v=S[E];if(_(v,E,w)===!0){const D=v.__offset,L=Array.isArray(v.value)?v.value:[v.value];let V=0;for(let q=0;q<L.length;q++){const O=L[q],I=p(O);typeof O=="number"?(v.__data[0]=O,r.bufferSubData(35345,D+V,v.__data)):O.isMatrix3?(v.__data[0]=O.elements[0],v.__data[1]=O.elements[1],v.__data[2]=O.elements[2],v.__data[3]=O.elements[0],v.__data[4]=O.elements[3],v.__data[5]=O.elements[4],v.__data[6]=O.elements[5],v.__data[7]=O.elements[0],v.__data[8]=O.elements[6],v.__data[9]=O.elements[7],v.__data[10]=O.elements[8],v.__data[11]=O.elements[0]):(O.toArray(v.__data,V),V+=I.storage/Float32Array.BYTES_PER_ELEMENT)}r.bufferSubData(35345,D,v.__data)}}r.bindBuffer(35345,null)}function _(M,b,S){const w=M.value;if(S[b]===void 0){if(typeof w=="number")S[b]=w;else{const E=Array.isArray(w)?w:[w],R=[];for(let v=0;v<E.length;v++)R.push(E[v].clone());S[b]=R}return!0}else if(typeof w=="number"){if(S[b]!==w)return S[b]=w,!0}else{const E=Array.isArray(S[b])?S[b]:[S[b]],R=Array.isArray(w)?w:[w];for(let v=0;v<E.length;v++){const D=E[v];if(D.equals(R[v])===!1)return D.copy(R[v]),!0}}return!1}function y(M){const b=M.uniforms;let S=0;const w=16;let E=0;for(let R=0,v=b.length;R<v;R++){const D=b[R],L={boundary:0,storage:0},V=Array.isArray(D.value)?D.value:[D.value];for(let q=0,O=V.length;q<O;q++){const I=V[q],k=p(I);L.boundary+=k.boundary,L.storage+=k.storage}if(D.__data=new Float32Array(L.storage/Float32Array.BYTES_PER_ELEMENT),D.__offset=S,R>0){E=S%w;const q=w-E;E!==0&&q-L.boundary<0&&(S+=w-E,D.__offset=S)}S+=L.storage}return E=S%w,E>0&&(S+=w-E),M.__size=S,M.__cache={},this}function p(M){const b={boundary:0,storage:0};return typeof M=="number"?(b.boundary=4,b.storage=4):M.isVector2?(b.boundary=8,b.storage=8):M.isVector3||M.isColor?(b.boundary=16,b.storage=12):M.isVector4?(b.boundary=16,b.storage=16):M.isMatrix3?(b.boundary=48,b.storage=48):M.isMatrix4?(b.boundary=64,b.storage=64):M.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",M),b}function m(M){const b=M.target;b.removeEventListener("dispose",m);const S=o.indexOf(b.__bindingPointIndex);o.splice(S,1),r.deleteBuffer(n[b.id]),delete n[b.id],delete s[b.id]}function x(){for(const M in n)r.deleteBuffer(n[M]);o=[],n={},s={}}return{bind:l,update:h,dispose:x}}function vm(){const r=ir("canvas");return r.style.display="block",r}function rl(r={}){this.isWebGLRenderer=!0;const t=r.canvas!==void 0?r.canvas:vm(),e=r.context!==void 0?r.context:null,i=r.depth!==void 0?r.depth:!0,n=r.stencil!==void 0?r.stencil:!0,s=r.antialias!==void 0?r.antialias:!1,o=r.premultipliedAlpha!==void 0?r.premultipliedAlpha:!0,a=r.preserveDrawingBuffer!==void 0?r.preserveDrawingBuffer:!1,l=r.powerPreference!==void 0?r.powerPreference:"default",h=r.failIfMajorPerformanceCaveat!==void 0?r.failIfMajorPerformanceCaveat:!1;let u;e!==null?u=e.getContextAttributes().alpha:u=r.alpha!==void 0?r.alpha:!1;let c=null,f=null;const _=[],y=[];this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=Zi,this.physicallyCorrectLights=!1,this.toneMapping=pi,this.toneMappingExposure=1;const p=this;let m=!1,x=0,M=0,b=null,S=-1,w=null;const E=new ye,R=new ye;let v=null,D=t.width,L=t.height,V=1,q=null,O=null;const I=new ye(0,0,D,L),k=new ye(0,0,D,L);let $=!1;const Q=new Jo;let B=!1,et=!1,j=null;const X=new pe,H=new Et,ot=new G,rt={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function ct(){return b===null?V:1}let Y=e;function xt(A,W){for(let J=0;J<A.length;J++){const U=A[J],tt=t.getContext(U,W);if(tt!==null)return tt}return null}try{const A={alpha:!0,depth:i,stencil:n,antialias:s,premultipliedAlpha:o,preserveDrawingBuffer:a,powerPreference:l,failIfMajorPerformanceCaveat:h};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${Ys}`),t.addEventListener("webglcontextlost",bt,!1),t.addEventListener("webglcontextrestored",vt,!1),t.addEventListener("webglcontextcreationerror",Bt,!1),Y===null){const W=["webgl2","webgl","experimental-webgl"];if(p.isWebGL1Renderer===!0&&W.shift(),Y=xt(W,A),Y===null)throw xt(W)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}Y.getShaderPrecisionFormat===void 0&&(Y.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(A){throw console.error("THREE.WebGLRenderer: "+A.message),A}let mt,wt,yt,Wt,Pt,Tt,ce,ae,oe,be,ie,Xt,ke,De,C,T,Z,lt,ht,ft,At,P,N,pt;function gt(){mt=new If(Y),wt=new wf(Y,mt,r),mt.init(wt),P=new dm(Y,mt,wt),yt=new cm(Y,mt,wt),Wt=new Of,Pt=new $d,Tt=new fm(Y,mt,yt,Pt,wt,P,Wt),ce=new Af(p),ae=new Pf(p),oe=new Vh(Y,wt),N=new Sf(Y,mt,oe,wt),be=new Rf(Y,oe,Wt,N),ie=new Uf(Y,be,oe,Wt),ht=new Nf(Y,wt,Tt),T=new Tf(Pt),Xt=new Kd(p,ce,ae,mt,wt,N,T),ke=new ym(p,Pt),De=new Qd,C=new sm(mt,wt),lt=new bf(p,ce,ae,yt,ie,u,o),Z=new um(p,ie,wt),pt=new xm(Y,Wt,wt,yt),ft=new Mf(Y,mt,Wt,wt),At=new Lf(Y,mt,Wt,wt),Wt.programs=Xt.programs,p.capabilities=wt,p.extensions=mt,p.properties=Pt,p.renderLists=De,p.shadowMap=Z,p.state=yt,p.info=Wt}gt();const dt=new gm(p,Y);this.xr=dt,this.getContext=function(){return Y},this.getContextAttributes=function(){return Y.getContextAttributes()},this.forceContextLoss=function(){const A=mt.get("WEBGL_lose_context");A&&A.loseContext()},this.forceContextRestore=function(){const A=mt.get("WEBGL_lose_context");A&&A.restoreContext()},this.getPixelRatio=function(){return V},this.setPixelRatio=function(A){A!==void 0&&(V=A,this.setSize(D,L,!1))},this.getSize=function(A){return A.set(D,L)},this.setSize=function(A,W,J){if(dt.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}D=A,L=W,t.width=Math.floor(A*V),t.height=Math.floor(W*V),J!==!1&&(t.style.width=A+"px",t.style.height=W+"px"),this.setViewport(0,0,A,W)},this.getDrawingBufferSize=function(A){return A.set(D*V,L*V).floor()},this.setDrawingBufferSize=function(A,W,J){D=A,L=W,V=J,t.width=Math.floor(A*J),t.height=Math.floor(W*J),this.setViewport(0,0,A,W)},this.getCurrentViewport=function(A){return A.copy(E)},this.getViewport=function(A){return A.copy(I)},this.setViewport=function(A,W,J,U){A.isVector4?I.set(A.x,A.y,A.z,A.w):I.set(A,W,J,U),yt.viewport(E.copy(I).multiplyScalar(V).floor())},this.getScissor=function(A){return A.copy(k)},this.setScissor=function(A,W,J,U){A.isVector4?k.set(A.x,A.y,A.z,A.w):k.set(A,W,J,U),yt.scissor(R.copy(k).multiplyScalar(V).floor())},this.getScissorTest=function(){return $},this.setScissorTest=function(A){yt.setScissorTest($=A)},this.setOpaqueSort=function(A){q=A},this.setTransparentSort=function(A){O=A},this.getClearColor=function(A){return A.copy(lt.getClearColor())},this.setClearColor=function(){lt.setClearColor.apply(lt,arguments)},this.getClearAlpha=function(){return lt.getClearAlpha()},this.setClearAlpha=function(){lt.setClearAlpha.apply(lt,arguments)},this.clear=function(A=!0,W=!0,J=!0){let U=0;A&&(U|=16384),W&&(U|=256),J&&(U|=1024),Y.clear(U)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",bt,!1),t.removeEventListener("webglcontextrestored",vt,!1),t.removeEventListener("webglcontextcreationerror",Bt,!1),De.dispose(),C.dispose(),Pt.dispose(),ce.dispose(),ae.dispose(),ie.dispose(),N.dispose(),pt.dispose(),Xt.dispose(),dt.dispose(),dt.removeEventListener("sessionstart",_t),dt.removeEventListener("sessionend",St),j&&(j.dispose(),j=null),Ht.stop()};function bt(A){A.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),m=!0}function vt(){console.log("THREE.WebGLRenderer: Context Restored."),m=!1;const A=Wt.autoReset,W=Z.enabled,J=Z.autoUpdate,U=Z.needsUpdate,tt=Z.type;gt(),Wt.autoReset=A,Z.enabled=W,Z.autoUpdate=J,Z.needsUpdate=U,Z.type=tt}function Bt(A){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",A.statusMessage)}function Ut(A){const W=A.target;W.removeEventListener("dispose",Ut),Yt(W)}function Yt(A){F(A),Pt.remove(A)}function F(A){const W=Pt.get(A).programs;W!==void 0&&(W.forEach(function(J){Xt.releaseProgram(J)}),A.isShaderMaterial&&Xt.releaseShaderCache(A))}this.renderBufferDirect=function(A,W,J,U,tt,Mt){W===null&&(W=rt);const Ct=tt.isMesh&&tt.matrixWorld.determinant()<0,Lt=gl(A,W,J,U,tt);yt.setMaterial(U,Ct);let Ot=J.index,Gt=1;U.wireframe===!0&&(Ot=be.getWireframeAttribute(J),Gt=2);const zt=J.drawRange,kt=J.attributes.position;let ne=zt.start*Gt,Fe=(zt.start+zt.count)*Gt;Mt!==null&&(ne=Math.max(ne,Mt.start*Gt),Fe=Math.min(Fe,(Mt.start+Mt.count)*Gt)),Ot!==null?(ne=Math.max(ne,0),Fe=Math.min(Fe,Ot.count)):kt!=null&&(ne=Math.max(ne,0),Fe=Math.min(Fe,kt.count));const oi=Fe-ne;if(oi<0||oi===1/0)return;N.setup(tt,U,Lt,J,Ot);let Di,re=ft;if(Ot!==null&&(Di=oe.get(Ot),re=At,re.setIndex(Di)),tt.isMesh)U.wireframe===!0?(yt.setLineWidth(U.wireframeLinewidth*ct()),re.setMode(1)):re.setMode(4);else if(tt.isLine){let Vt=U.linewidth;Vt===void 0&&(Vt=1),yt.setLineWidth(Vt*ct()),tt.isLineSegments?re.setMode(1):tt.isLineLoop?re.setMode(2):re.setMode(3)}else tt.isPoints?re.setMode(0):tt.isSprite&&re.setMode(4);if(tt.isInstancedMesh)re.renderInstances(ne,oi,tt.count);else if(J.isInstancedBufferGeometry){const Vt=J._maxInstanceCount!==void 0?J._maxInstanceCount:1/0,Zr=Math.min(J.instanceCount,Vt);re.renderInstances(ne,oi,Zr)}else re.render(ne,oi)},this.compile=function(A,W){function J(U,tt,Mt){U.transparent===!0&&U.side===ur?(U.side=je,U.needsUpdate=!0,Ve(U,tt,Mt),U.side=ji,U.needsUpdate=!0,Ve(U,tt,Mt),U.side=ur):Ve(U,tt,Mt)}f=C.get(A),f.init(),y.push(f),A.traverseVisible(function(U){U.isLight&&U.layers.test(W.layers)&&(f.pushLight(U),U.castShadow&&f.pushShadow(U))}),f.setupLights(p.physicallyCorrectLights),A.traverse(function(U){const tt=U.material;if(tt)if(Array.isArray(tt))for(let Mt=0;Mt<tt.length;Mt++){const Ct=tt[Mt];J(Ct,A,U)}else J(tt,A,U)}),y.pop(),f=null};let K=null;function at(A){K&&K(A)}function _t(){Ht.stop()}function St(){Ht.start()}const Ht=new Qo;Ht.setAnimationLoop(at),typeof self<"u"&&Ht.setContext(self),this.setAnimationLoop=function(A){K=A,dt.setAnimationLoop(A),A===null?Ht.stop():Ht.start()},dt.addEventListener("sessionstart",_t),dt.addEventListener("sessionend",St),this.render=function(A,W){if(W!==void 0&&W.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(m===!0)return;A.matrixWorldAutoUpdate===!0&&A.updateMatrixWorld(),W.parent===null&&W.matrixWorldAutoUpdate===!0&&W.updateMatrixWorld(),dt.enabled===!0&&dt.isPresenting===!0&&(dt.cameraAutoUpdate===!0&&dt.updateCamera(W),W=dt.getCamera()),A.isScene===!0&&A.onBeforeRender(p,A,W,b),f=C.get(A,y.length),f.init(),y.push(f),X.multiplyMatrices(W.projectionMatrix,W.matrixWorldInverse),Q.setFromProjectionMatrix(X),et=this.localClippingEnabled,B=T.init(this.clippingPlanes,et,W),c=De.get(A,_.length),c.init(),_.push(c),fe(A,W,0,p.sortObjects),c.finish(),p.sortObjects===!0&&c.sort(q,O),B===!0&&T.beginShadows();const J=f.state.shadowsArray;if(Z.render(J,A,W),B===!0&&T.endShadows(),this.info.autoReset===!0&&this.info.reset(),lt.render(c,A),f.setupLights(p.physicallyCorrectLights),W.isArrayCamera){const U=W.cameras;for(let tt=0,Mt=U.length;tt<Mt;tt++){const Ct=U[tt];xe(c,A,Ct,Ct.viewport)}}else xe(c,A,W);b!==null&&(Tt.updateMultisampleRenderTarget(b),Tt.updateRenderTargetMipmap(b)),A.isScene===!0&&A.onAfterRender(p,A,W),N.resetDefaultState(),S=-1,w=null,y.pop(),y.length>0?f=y[y.length-1]:f=null,_.pop(),_.length>0?c=_[_.length-1]:c=null};function fe(A,W,J,U){if(A.visible===!1)return;if(A.layers.test(W.layers)){if(A.isGroup)J=A.renderOrder;else if(A.isLOD)A.autoUpdate===!0&&A.update(W);else if(A.isLight)f.pushLight(A),A.castShadow&&f.pushShadow(A);else if(A.isSprite){if(!A.frustumCulled||Q.intersectsSprite(A)){U&&ot.setFromMatrixPosition(A.matrixWorld).applyMatrix4(X);const Ct=ie.update(A),Lt=A.material;Lt.visible&&c.push(A,Ct,Lt,J,ot.z,null)}}else if((A.isMesh||A.isLine||A.isPoints)&&(A.isSkinnedMesh&&A.skeleton.frame!==Wt.render.frame&&(A.skeleton.update(),A.skeleton.frame=Wt.render.frame),!A.frustumCulled||Q.intersectsObject(A))){U&&ot.setFromMatrixPosition(A.matrixWorld).applyMatrix4(X);const Ct=ie.update(A),Lt=A.material;if(Array.isArray(Lt)){const Ot=Ct.groups;for(let Gt=0,zt=Ot.length;Gt<zt;Gt++){const kt=Ot[Gt],ne=Lt[kt.materialIndex];ne&&ne.visible&&c.push(A,Ct,ne,J,ot.z,kt)}}else Lt.visible&&c.push(A,Ct,Lt,J,ot.z,null)}}const Mt=A.children;for(let Ct=0,Lt=Mt.length;Ct<Lt;Ct++)fe(Mt[Ct],W,J,U)}function xe(A,W,J,U){const tt=A.opaque,Mt=A.transmissive,Ct=A.transparent;f.setupLightsView(J),Mt.length>0&&Ei(tt,W,J),U&&yt.viewport(E.copy(U)),tt.length>0&&Zt(tt,W,J),Mt.length>0&&Zt(Mt,W,J),Ct.length>0&&Zt(Ct,W,J),yt.buffers.depth.setTest(!0),yt.buffers.depth.setMask(!0),yt.buffers.color.setMask(!0),yt.setPolygonOffset(!1)}function Ei(A,W,J){const U=wt.isWebGL2;j===null&&(j=new Ki(1,1,{generateMipmaps:!0,type:mt.has("EXT_color_buffer_half_float")?tr:qi,minFilter:Qn,samples:U&&s===!0?4:0})),p.getDrawingBufferSize(H),U?j.setSize(H.x,H.y):j.setSize(Gs(H.x),Gs(H.y));const tt=p.getRenderTarget();p.setRenderTarget(j),p.clear();const Mt=p.toneMapping;p.toneMapping=pi,Zt(A,W,J),p.toneMapping=Mt,Tt.updateMultisampleRenderTarget(j),Tt.updateRenderTargetMipmap(j),p.setRenderTarget(tt)}function Zt(A,W,J){const U=W.isScene===!0?W.overrideMaterial:null;for(let tt=0,Mt=A.length;tt<Mt;tt++){const Ct=A[tt],Lt=Ct.object,Ot=Ct.geometry,Gt=U===null?Ct.material:U,zt=Ct.group;Lt.layers.test(J.layers)&&ai(Lt,W,J,Ot,Gt,zt)}}function ai(A,W,J,U,tt,Mt){A.onBeforeRender(p,W,J,U,tt,Mt),A.modelViewMatrix.multiplyMatrices(J.matrixWorldInverse,A.matrixWorld),A.normalMatrix.getNormalMatrix(A.modelViewMatrix),tt.onBeforeRender(p,W,J,U,A,Mt),tt.transparent===!0&&tt.side===ur?(tt.side=je,tt.needsUpdate=!0,p.renderBufferDirect(J,W,U,tt,A,Mt),tt.side=ji,tt.needsUpdate=!0,p.renderBufferDirect(J,W,U,tt,A,Mt),tt.side=ur):p.renderBufferDirect(J,W,U,tt,A,Mt),A.onAfterRender(p,W,J,U,tt,Mt)}function Ve(A,W,J){W.isScene!==!0&&(W=rt);const U=Pt.get(A),tt=f.state.lights,Mt=f.state.shadowsArray,Ct=tt.state.version,Lt=Xt.getParameters(A,tt.state,Mt,W,J),Ot=Xt.getProgramCacheKey(Lt);let Gt=U.programs;U.environment=A.isMeshStandardMaterial?W.environment:null,U.fog=W.fog,U.envMap=(A.isMeshStandardMaterial?ae:ce).get(A.envMap||U.environment),Gt===void 0&&(A.addEventListener("dispose",Ut),Gt=new Map,U.programs=Gt);let zt=Gt.get(Ot);if(zt!==void 0){if(U.currentProgram===zt&&U.lightsStateVersion===Ct)return ia(A,Lt),zt}else Lt.uniforms=Xt.getUniforms(A),A.onBuild(J,Lt,p),A.onBeforeCompile(Lt,p),zt=Xt.acquireProgram(Lt,Ot),Gt.set(Ot,zt),U.uniforms=Lt.uniforms;const kt=U.uniforms;(!A.isShaderMaterial&&!A.isRawShaderMaterial||A.clipping===!0)&&(kt.clippingPlanes=T.uniform),ia(A,Lt),U.needsLights=xl(A),U.lightsStateVersion=Ct,U.needsLights&&(kt.ambientLightColor.value=tt.state.ambient,kt.lightProbe.value=tt.state.probe,kt.directionalLights.value=tt.state.directional,kt.directionalLightShadows.value=tt.state.directionalShadow,kt.spotLights.value=tt.state.spot,kt.spotLightShadows.value=tt.state.spotShadow,kt.rectAreaLights.value=tt.state.rectArea,kt.ltc_1.value=tt.state.rectAreaLTC1,kt.ltc_2.value=tt.state.rectAreaLTC2,kt.pointLights.value=tt.state.point,kt.pointLightShadows.value=tt.state.pointShadow,kt.hemisphereLights.value=tt.state.hemi,kt.directionalShadowMap.value=tt.state.directionalShadowMap,kt.directionalShadowMatrix.value=tt.state.directionalShadowMatrix,kt.spotShadowMap.value=tt.state.spotShadowMap,kt.spotLightMatrix.value=tt.state.spotLightMatrix,kt.spotLightMap.value=tt.state.spotLightMap,kt.pointShadowMap.value=tt.state.pointShadowMap,kt.pointShadowMatrix.value=tt.state.pointShadowMatrix);const ne=zt.getUniforms(),Fe=Lr.seqWithValue(ne.seq,kt);return U.currentProgram=zt,U.uniformsList=Fe,zt}function ia(A,W){const J=Pt.get(A);J.outputEncoding=W.outputEncoding,J.instancing=W.instancing,J.skinning=W.skinning,J.morphTargets=W.morphTargets,J.morphNormals=W.morphNormals,J.morphColors=W.morphColors,J.morphTargetsCount=W.morphTargetsCount,J.numClippingPlanes=W.numClippingPlanes,J.numIntersection=W.numClipIntersection,J.vertexAlphas=W.vertexAlphas,J.vertexTangents=W.vertexTangents,J.toneMapping=W.toneMapping}function gl(A,W,J,U,tt){W.isScene!==!0&&(W=rt),Tt.resetTextureUnits();const Mt=W.fog,Ct=U.isMeshStandardMaterial?W.environment:null,Lt=b===null?p.outputEncoding:b.isXRRenderTarget===!0?b.texture.encoding:Zi,Ot=(U.isMeshStandardMaterial?ae:ce).get(U.envMap||Ct),Gt=U.vertexColors===!0&&!!J.attributes.color&&J.attributes.color.itemSize===4,zt=!!U.normalMap&&!!J.attributes.tangent,kt=!!J.morphAttributes.position,ne=!!J.morphAttributes.normal,Fe=!!J.morphAttributes.color,oi=U.toneMapped?p.toneMapping:pi,Di=J.morphAttributes.position||J.morphAttributes.normal||J.morphAttributes.color,re=Di!==void 0?Di.length:0,Vt=Pt.get(U),Zr=f.state.lights;if(B===!0&&(et===!0||A!==w)){const Be=A===w&&U.id===S;T.setState(U,A,Be)}let de=!1;U.version===Vt.__version?(Vt.needsLights&&Vt.lightsStateVersion!==Zr.state.version||Vt.outputEncoding!==Lt||tt.isInstancedMesh&&Vt.instancing===!1||!tt.isInstancedMesh&&Vt.instancing===!0||tt.isSkinnedMesh&&Vt.skinning===!1||!tt.isSkinnedMesh&&Vt.skinning===!0||Vt.envMap!==Ot||U.fog===!0&&Vt.fog!==Mt||Vt.numClippingPlanes!==void 0&&(Vt.numClippingPlanes!==T.numPlanes||Vt.numIntersection!==T.numIntersection)||Vt.vertexAlphas!==Gt||Vt.vertexTangents!==zt||Vt.morphTargets!==kt||Vt.morphNormals!==ne||Vt.morphColors!==Fe||Vt.toneMapping!==oi||wt.isWebGL2===!0&&Vt.morphTargetsCount!==re)&&(de=!0):(de=!0,Vt.__version=U.version);let Ci=Vt.currentProgram;de===!0&&(Ci=Ve(U,W,tt));let na=!1,On=!1,Kr=!1;const Se=Ci.getUniforms(),Pi=Vt.uniforms;if(yt.useProgram(Ci.program)&&(na=!0,On=!0,Kr=!0),U.id!==S&&(S=U.id,On=!0),na||w!==A){if(Se.setValue(Y,"projectionMatrix",A.projectionMatrix),wt.logarithmicDepthBuffer&&Se.setValue(Y,"logDepthBufFC",2/(Math.log(A.far+1)/Math.LN2)),w!==A&&(w=A,On=!0,Kr=!0),U.isShaderMaterial||U.isMeshPhongMaterial||U.isMeshToonMaterial||U.isMeshStandardMaterial||U.envMap){const Be=Se.map.cameraPosition;Be!==void 0&&Be.setValue(Y,ot.setFromMatrixPosition(A.matrixWorld))}(U.isMeshPhongMaterial||U.isMeshToonMaterial||U.isMeshLambertMaterial||U.isMeshBasicMaterial||U.isMeshStandardMaterial||U.isShaderMaterial)&&Se.setValue(Y,"isOrthographic",A.isOrthographicCamera===!0),(U.isMeshPhongMaterial||U.isMeshToonMaterial||U.isMeshLambertMaterial||U.isMeshBasicMaterial||U.isMeshStandardMaterial||U.isShaderMaterial||U.isShadowMaterial||tt.isSkinnedMesh)&&Se.setValue(Y,"viewMatrix",A.matrixWorldInverse)}if(tt.isSkinnedMesh){Se.setOptional(Y,tt,"bindMatrix"),Se.setOptional(Y,tt,"bindMatrixInverse");const Be=tt.skeleton;Be&&(wt.floatVertexTextures?(Be.boneTexture===null&&Be.computeBoneTexture(),Se.setValue(Y,"boneTexture",Be.boneTexture,Tt),Se.setValue(Y,"boneTextureSize",Be.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}const $r=J.morphAttributes;if(($r.position!==void 0||$r.normal!==void 0||$r.color!==void 0&&wt.isWebGL2===!0)&&ht.update(tt,J,U,Ci),(On||Vt.receiveShadow!==tt.receiveShadow)&&(Vt.receiveShadow=tt.receiveShadow,Se.setValue(Y,"receiveShadow",tt.receiveShadow)),U.isMeshGouraudMaterial&&U.envMap!==null&&(Pi.envMap.value=Ot,Pi.flipEnvMap.value=Ot.isCubeTexture&&Ot.isRenderTargetTexture===!1?-1:1),On&&(Se.setValue(Y,"toneMappingExposure",p.toneMappingExposure),Vt.needsLights&&yl(Pi,Kr),Mt&&U.fog===!0&&ke.refreshFogUniforms(Pi,Mt),ke.refreshMaterialUniforms(Pi,U,V,L,j),Lr.upload(Y,Vt.uniformsList,Pi,Tt)),U.isShaderMaterial&&U.uniformsNeedUpdate===!0&&(Lr.upload(Y,Vt.uniformsList,Pi,Tt),U.uniformsNeedUpdate=!1),U.isSpriteMaterial&&Se.setValue(Y,"center",tt.center),Se.setValue(Y,"modelViewMatrix",tt.modelViewMatrix),Se.setValue(Y,"normalMatrix",tt.normalMatrix),Se.setValue(Y,"modelMatrix",tt.matrixWorld),U.isShaderMaterial||U.isRawShaderMaterial){const Be=U.uniformsGroups;for(let Jr=0,vl=Be.length;Jr<vl;Jr++)if(wt.isWebGL2){const ra=Be[Jr];pt.update(ra,Ci),pt.bind(ra,Ci)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return Ci}function yl(A,W){A.ambientLightColor.needsUpdate=W,A.lightProbe.needsUpdate=W,A.directionalLights.needsUpdate=W,A.directionalLightShadows.needsUpdate=W,A.pointLights.needsUpdate=W,A.pointLightShadows.needsUpdate=W,A.spotLights.needsUpdate=W,A.spotLightShadows.needsUpdate=W,A.rectAreaLights.needsUpdate=W,A.hemisphereLights.needsUpdate=W}function xl(A){return A.isMeshLambertMaterial||A.isMeshToonMaterial||A.isMeshPhongMaterial||A.isMeshStandardMaterial||A.isShadowMaterial||A.isShaderMaterial&&A.lights===!0}this.getActiveCubeFace=function(){return x},this.getActiveMipmapLevel=function(){return M},this.getRenderTarget=function(){return b},this.setRenderTargetTextures=function(A,W,J){Pt.get(A.texture).__webglTexture=W,Pt.get(A.depthTexture).__webglTexture=J;const U=Pt.get(A);U.__hasExternalTextures=!0,U.__hasExternalTextures&&(U.__autoAllocateDepthBuffer=J===void 0,U.__autoAllocateDepthBuffer||mt.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),U.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(A,W){const J=Pt.get(A);J.__webglFramebuffer=W,J.__useDefaultFramebuffer=W===void 0},this.setRenderTarget=function(A,W=0,J=0){b=A,x=W,M=J;let U=!0,tt=null,Mt=!1,Ct=!1;if(A){const Ot=Pt.get(A);Ot.__useDefaultFramebuffer!==void 0?(yt.bindFramebuffer(36160,null),U=!1):Ot.__webglFramebuffer===void 0?Tt.setupRenderTarget(A):Ot.__hasExternalTextures&&Tt.rebindTextures(A,Pt.get(A.texture).__webglTexture,Pt.get(A.depthTexture).__webglTexture);const Gt=A.texture;(Gt.isData3DTexture||Gt.isDataArrayTexture||Gt.isCompressedArrayTexture)&&(Ct=!0);const zt=Pt.get(A).__webglFramebuffer;A.isWebGLCubeRenderTarget?(tt=zt[W],Mt=!0):wt.isWebGL2&&A.samples>0&&Tt.useMultisampledRTT(A)===!1?tt=Pt.get(A).__webglMultisampledFramebuffer:tt=zt,E.copy(A.viewport),R.copy(A.scissor),v=A.scissorTest}else E.copy(I).multiplyScalar(V).floor(),R.copy(k).multiplyScalar(V).floor(),v=$;if(yt.bindFramebuffer(36160,tt)&&wt.drawBuffers&&U&&yt.drawBuffers(A,tt),yt.viewport(E),yt.scissor(R),yt.setScissorTest(v),Mt){const Ot=Pt.get(A.texture);Y.framebufferTexture2D(36160,36064,34069+W,Ot.__webglTexture,J)}else if(Ct){const Ot=Pt.get(A.texture),Gt=W||0;Y.framebufferTextureLayer(36160,36064,Ot.__webglTexture,J||0,Gt)}S=-1},this.readRenderTargetPixels=function(A,W,J,U,tt,Mt,Ct){if(!(A&&A.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let Lt=Pt.get(A).__webglFramebuffer;if(A.isWebGLCubeRenderTarget&&Ct!==void 0&&(Lt=Lt[Ct]),Lt){yt.bindFramebuffer(36160,Lt);try{const Ot=A.texture,Gt=Ot.format,zt=Ot.type;if(Gt!==ti&&P.convert(Gt)!==Y.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const kt=zt===tr&&(mt.has("EXT_color_buffer_half_float")||wt.isWebGL2&&mt.has("EXT_color_buffer_float"));if(zt!==qi&&P.convert(zt)!==Y.getParameter(35738)&&!(zt===Vi&&(wt.isWebGL2||mt.has("OES_texture_float")||mt.has("WEBGL_color_buffer_float")))&&!kt){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}W>=0&&W<=A.width-U&&J>=0&&J<=A.height-tt&&Y.readPixels(W,J,U,tt,P.convert(Gt),P.convert(zt),Mt)}finally{const Ot=b!==null?Pt.get(b).__webglFramebuffer:null;yt.bindFramebuffer(36160,Ot)}}},this.copyFramebufferToTexture=function(A,W,J=0){const U=Math.pow(2,-J),tt=Math.floor(W.image.width*U),Mt=Math.floor(W.image.height*U);Tt.setTexture2D(W,0),Y.copyTexSubImage2D(3553,J,0,0,A.x,A.y,tt,Mt),yt.unbindTexture()},this.copyTextureToTexture=function(A,W,J,U=0){const tt=W.image.width,Mt=W.image.height,Ct=P.convert(J.format),Lt=P.convert(J.type);Tt.setTexture2D(J,0),Y.pixelStorei(37440,J.flipY),Y.pixelStorei(37441,J.premultiplyAlpha),Y.pixelStorei(3317,J.unpackAlignment),W.isDataTexture?Y.texSubImage2D(3553,U,A.x,A.y,tt,Mt,Ct,Lt,W.image.data):W.isCompressedTexture?Y.compressedTexSubImage2D(3553,U,A.x,A.y,W.mipmaps[0].width,W.mipmaps[0].height,Ct,W.mipmaps[0].data):Y.texSubImage2D(3553,U,A.x,A.y,Ct,Lt,W.image),U===0&&J.generateMipmaps&&Y.generateMipmap(3553),yt.unbindTexture()},this.copyTextureToTexture3D=function(A,W,J,U,tt=0){if(p.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const Mt=A.max.x-A.min.x+1,Ct=A.max.y-A.min.y+1,Lt=A.max.z-A.min.z+1,Ot=P.convert(U.format),Gt=P.convert(U.type);let zt;if(U.isData3DTexture)Tt.setTexture3D(U,0),zt=32879;else if(U.isDataArrayTexture)Tt.setTexture2DArray(U,0),zt=35866;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}Y.pixelStorei(37440,U.flipY),Y.pixelStorei(37441,U.premultiplyAlpha),Y.pixelStorei(3317,U.unpackAlignment);const kt=Y.getParameter(3314),ne=Y.getParameter(32878),Fe=Y.getParameter(3316),oi=Y.getParameter(3315),Di=Y.getParameter(32877),re=J.isCompressedTexture?J.mipmaps[0]:J.image;Y.pixelStorei(3314,re.width),Y.pixelStorei(32878,re.height),Y.pixelStorei(3316,A.min.x),Y.pixelStorei(3315,A.min.y),Y.pixelStorei(32877,A.min.z),J.isDataTexture||J.isData3DTexture?Y.texSubImage3D(zt,tt,W.x,W.y,W.z,Mt,Ct,Lt,Ot,Gt,re.data):J.isCompressedArrayTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),Y.compressedTexSubImage3D(zt,tt,W.x,W.y,W.z,Mt,Ct,Lt,Ot,re.data)):Y.texSubImage3D(zt,tt,W.x,W.y,W.z,Mt,Ct,Lt,Ot,Gt,re),Y.pixelStorei(3314,kt),Y.pixelStorei(32878,ne),Y.pixelStorei(3316,Fe),Y.pixelStorei(3315,oi),Y.pixelStorei(32877,Di),tt===0&&U.generateMipmaps&&Y.generateMipmap(zt),yt.unbindTexture()},this.initTexture=function(A){A.isCubeTexture?Tt.setTextureCube(A,0):A.isData3DTexture?Tt.setTexture3D(A,0):A.isDataArrayTexture||A.isCompressedArrayTexture?Tt.setTexture2DArray(A,0):Tt.setTexture2D(A,0),yt.unbindTexture()},this.resetState=function(){x=0,M=0,b=null,yt.reset(),N.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}class bm extends rl{}bm.prototype.isWebGL1Renderer=!0;class Sm extends Oe{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(e.backgroundIntensity=this.backgroundIntensity),e}get autoUpdate(){return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate}set autoUpdate(t){console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate=t}}class Mm{constructor(t,e){this.isInterleavedBuffer=!0,this.array=t,this.stride=e,this.count=t!==void 0?t.length/e:0,this.usage=ks,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=Ai()}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,i){t*=this.stride,i*=e.stride;for(let n=0,s=this.stride;n<s;n++)this.array[t+n]=e.array[i+n];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Ai()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),i=new this.constructor(e,this.stride);return i.setUsage(this.usage),i}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Ai()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const we=new G;class Nr{constructor(t,e,i,n=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=e,this.offset=i,this.normalized=n}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,i=this.data.count;e<i;e++)we.fromBufferAttribute(this,e),we.applyMatrix4(t),this.setXYZ(e,we.x,we.y,we.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)we.fromBufferAttribute(this,e),we.applyNormalMatrix(t),this.setXYZ(e,we.x,we.y,we.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)we.fromBufferAttribute(this,e),we.transformDirection(t),this.setXYZ(e,we.x,we.y,we.z);return this}setX(t,e){return this.normalized&&(e=jt(e,this.array)),this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.normalized&&(e=jt(e,this.array)),this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.normalized&&(e=jt(e,this.array)),this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.normalized&&(e=jt(e,this.array)),this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(e=Si(e,this.array)),e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(e=Si(e,this.array)),e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(e=Si(e,this.array)),e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(e=Si(e,this.array)),e}setXY(t,e,i){return t=t*this.data.stride+this.offset,this.normalized&&(e=jt(e,this.array),i=jt(i,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this}setXYZ(t,e,i,n){return t=t*this.data.stride+this.offset,this.normalized&&(e=jt(e,this.array),i=jt(i,this.array),n=jt(n,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this}setXYZW(t,e,i,n,s){return t=t*this.data.stride+this.offset,this.normalized&&(e=jt(e,this.array),i=jt(i,this.array),n=jt(n,this.array),s=jt(s,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this.data.array[t+3]=s,this}clone(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let i=0;i<this.count;i++){const n=i*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[n+s])}return new ge(new this.array.constructor(e),this.itemSize,this.normalized)}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new Nr(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let i=0;i<this.count;i++){const n=i*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[n+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:e,normalized:this.normalized}}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class sl extends ar{constructor(t){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new $t(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}let vn;const Gn=new G,bn=new G,Sn=new G,Mn=new Et,Wn=new Et,al=new pe,Cr=new G,Hn=new G,Pr=new G,mo=new Et,Is=new Et,po=new Et;class wm extends Oe{constructor(t){if(super(),this.isSprite=!0,this.type="Sprite",vn===void 0){vn=new _i;const e=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),i=new Mm(e,5);vn.setIndex([0,1,2,0,2,3]),vn.setAttribute("position",new Nr(i,3,0,!1)),vn.setAttribute("uv",new Nr(i,2,3,!1))}this.geometry=vn,this.material=t!==void 0?t:new sl,this.center=new Et(.5,.5)}raycast(t,e){t.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),bn.setFromMatrixScale(this.matrixWorld),al.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),Sn.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&bn.multiplyScalar(-Sn.z);const i=this.material.rotation;let n,s;i!==0&&(s=Math.cos(i),n=Math.sin(i));const o=this.center;Ir(Cr.set(-.5,-.5,0),Sn,o,bn,n,s),Ir(Hn.set(.5,-.5,0),Sn,o,bn,n,s),Ir(Pr.set(.5,.5,0),Sn,o,bn,n,s),mo.set(0,0),Is.set(1,0),po.set(1,1);let a=t.ray.intersectTriangle(Cr,Hn,Pr,!1,Gn);if(a===null&&(Ir(Hn.set(-.5,.5,0),Sn,o,bn,n,s),Is.set(0,1),a=t.ray.intersectTriangle(Cr,Pr,Hn,!1,Gn),a===null))return;const l=t.ray.origin.distanceTo(Gn);l<t.near||l>t.far||e.push({distance:l,point:Gn.clone(),uv:ri.getUV(Gn,Cr,Hn,Pr,mo,Is,po,new Et),face:null,object:this})}copy(t,e){return super.copy(t,e),t.center!==void 0&&this.center.copy(t.center),this.material=t.material,this}}function Ir(r,t,e,i,n,s){Mn.subVectors(r,e).addScalar(.5).multiply(i),n!==void 0?(Wn.x=s*Mn.x-n*Mn.y,Wn.y=n*Mn.x+s*Mn.y):Wn.copy(Mn),r.copy(t),r.x+=Wn.x,r.y+=Wn.y,r.applyMatrix4(al)}const Ur={enabled:!1,files:{},add:function(r,t){this.enabled!==!1&&(this.files[r]=t)},get:function(r){if(this.enabled!==!1)return this.files[r]},remove:function(r){delete this.files[r]},clear:function(){this.files={}}};class Tm{constructor(t,e,i){const n=this;let s=!1,o=0,a=0,l;const h=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=i,this.itemStart=function(u){a++,s===!1&&n.onStart!==void 0&&n.onStart(u,o,a),s=!0},this.itemEnd=function(u){o++,n.onProgress!==void 0&&n.onProgress(u,o,a),o===a&&(s=!1,n.onLoad!==void 0&&n.onLoad())},this.itemError=function(u){n.onError!==void 0&&n.onError(u)},this.resolveURL=function(u){return l?l(u):u},this.setURLModifier=function(u){return l=u,this},this.addHandler=function(u,c){return h.push(u,c),this},this.removeHandler=function(u){const c=h.indexOf(u);return c!==-1&&h.splice(c,2),this},this.getHandler=function(u){for(let c=0,f=h.length;c<f;c+=2){const _=h[c],y=h[c+1];if(_.global&&(_.lastIndex=0),_.test(u))return y}return null}}}const ol=new Tm;class Zs{constructor(t){this.manager=t!==void 0?t:ol,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const i=this;return new Promise(function(n,s){i.load(t,n,e,s)})}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}const di={};class Am extends Error{constructor(t,e){super(t),this.response=e}}class _o extends Zs{constructor(t){super(t)}load(t,e,i,n){t===void 0&&(t=""),this.path!==void 0&&(t=this.path+t),t=this.manager.resolveURL(t);const s=Ur.get(t);if(s!==void 0)return this.manager.itemStart(t),setTimeout(()=>{e&&e(s),this.manager.itemEnd(t)},0),s;if(di[t]!==void 0){di[t].push({onLoad:e,onProgress:i,onError:n});return}di[t]=[],di[t].push({onLoad:e,onProgress:i,onError:n});const o=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,l=this.responseType;fetch(o).then(h=>{if(h.status===200||h.status===0){if(h.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||h.body===void 0||h.body.getReader===void 0)return h;const u=di[t],c=h.body.getReader(),f=h.headers.get("Content-Length")||h.headers.get("X-File-Size"),_=f?parseInt(f):0,y=_!==0;let p=0;const m=new ReadableStream({start(x){M();function M(){c.read().then(({done:b,value:S})=>{if(b)x.close();else{p+=S.byteLength;const w=new ProgressEvent("progress",{lengthComputable:y,loaded:p,total:_});for(let E=0,R=u.length;E<R;E++){const v=u[E];v.onProgress&&v.onProgress(w)}x.enqueue(S),M()}})}}});return new Response(m)}else throw new Am(`fetch for "${h.url}" responded with ${h.status}: ${h.statusText}`,h)}).then(h=>{switch(l){case"arraybuffer":return h.arrayBuffer();case"blob":return h.blob();case"document":return h.text().then(u=>new DOMParser().parseFromString(u,a));case"json":return h.json();default:if(a===void 0)return h.text();{const c=/charset="?([^;"\s]*)"?/i.exec(a),f=c&&c[1]?c[1].toLowerCase():void 0,_=new TextDecoder(f);return h.arrayBuffer().then(y=>_.decode(y))}}}).then(h=>{Ur.add(t,h);const u=di[t];delete di[t];for(let c=0,f=u.length;c<f;c++){const _=u[c];_.onLoad&&_.onLoad(h)}}).catch(h=>{const u=di[t];if(u===void 0)throw this.manager.itemError(t),h;delete di[t];for(let c=0,f=u.length;c<f;c++){const _=u[c];_.onError&&_.onError(h)}this.manager.itemError(t)}).finally(()=>{this.manager.itemEnd(t)}),this.manager.itemStart(t)}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class Em extends Zs{constructor(t){super(t)}load(t,e,i,n){this.path!==void 0&&(t=this.path+t),t=this.manager.resolveURL(t);const s=this,o=Ur.get(t);if(o!==void 0)return s.manager.itemStart(t),setTimeout(function(){e&&e(o),s.manager.itemEnd(t)},0),o;const a=ir("img");function l(){u(),Ur.add(t,this),e&&e(this),s.manager.itemEnd(t)}function h(c){u(),n&&n(c),s.manager.itemError(t),s.manager.itemEnd(t)}function u(){a.removeEventListener("load",l,!1),a.removeEventListener("error",h,!1)}return a.addEventListener("load",l,!1),a.addEventListener("error",h,!1),t.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(a.crossOrigin=this.crossOrigin),s.manager.itemStart(t),a.src=t,a}}class Dm extends Zs{constructor(t){super(t)}load(t,e,i,n){const s=new Le,o=new Em(this.manager);return o.setCrossOrigin(this.crossOrigin),o.setPath(this.path),o.load(t,function(a){s.image=a,s.needsUpdate=!0,e!==void 0&&e(s)},i,n),s}}class go{constructor(t=1,e=0,i=0){return this.radius=t,this.phi=e,this.theta=i,this}set(t,e,i){return this.radius=t,this.phi=e,this.theta=i,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,i){return this.radius=Math.sqrt(t*t+e*e+i*i),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,i),this.phi=Math.acos(Ie(e/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Ys}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=Ys);var Cm=Object.defineProperty,Pm=(r,t,e)=>t in r?Cm(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e,d=(r,t,e)=>(Pm(r,typeof t!="symbol"?t+"":t,e),e);class Im{constructor(t=0){d(this,"time",0),d(this,"timeScale",1),d(this,"_systemTime",0),d(this,"_animatebles",[]),d(this,"_clock",null),this.time=t,this._systemTime=new Date().getTime()*.001}advanceTime(t){t!==t&&(t=0);const e=Date.now()*.001;if(t<0&&(t=e-this._systemTime),this._systemTime=e,this.timeScale!==1&&(t*=this.timeScale),t===0)return;t<0?this.time-=t:this.time+=t;let i=0,n=0,s=this._animatebles.length;for(;i<s;++i){const o=this._animatebles[i];o!==null?(n>0&&(this._animatebles[i-n]=o,this._animatebles[i]=null),o.advanceTime(t)):n++}if(n>0){for(s=this._animatebles.length;i<s;++i){const o=this._animatebles[i];o!==null?this._animatebles[i-n]=o:n++}this._animatebles.length-=n}}contains(t){if(t===this)return!1;let e=t;for(;e!==this&&e!==null;)e=e.clock;return e===this}add(t){this._animatebles.indexOf(t)<0&&(this._animatebles.push(t),t.clock=this)}remove(t){const e=this._animatebles.indexOf(t);e>=0&&(this._animatebles[e]=null,t.clock=null)}clear(){for(const t of this._animatebles)t!==null&&(t.clock=null)}get clock(){return this._clock}set clock(t){this._clock!==t&&(this._clock!==null&&this._clock.remove(this),this._clock=t,this._clock!==null&&this._clock.add(this))}}const te=class{constructor(){d(this,"hashCode",te._hashCode++),d(this,"_isInPool",!1)}static _returnObject(r){const t=String(r.constructor),e=t in te._maxCountMap?te._maxCountMap[t]:te._defaultMaxCount,i=te._poolsMap[t]=te._poolsMap[t]||[];i.length<e&&(r._isInPool?console.warn("The object is already in the pool."):(r._isInPool=!0,i.push(r)))}static toString(){throw new Error}static setMaxCount(r,t){if((t<0||t!==t)&&(t=0),r!==null){const e=String(r),i=e in te._poolsMap?te._poolsMap[e]:null;i!==null&&i.length>t&&(i.length=t),te._maxCountMap[e]=t}else{te._defaultMaxCount=t;for(let e in te._poolsMap){const i=te._poolsMap[e];i.length>t&&(i.length=t),e in te._maxCountMap&&(te._maxCountMap[e]=t)}}}static clearPool(r=null){if(r!==null){const t=String(r),e=t in te._poolsMap?te._poolsMap[t]:null;e!==null&&e.length>0&&(e.length=0)}else for(let t in te._poolsMap){const e=te._poolsMap[t];e.length=0}}static borrowObject(r){const t=String(r),e=t in te._poolsMap?te._poolsMap[t]:null;if(e!==null&&e.length>0){const n=e.pop();return n._isInPool=!1,n}const i=new r;return i._onClear(),i}returnToPool(){this._onClear(),te._returnObject(this)}};let nt=te;d(nt,"_hashCode",0),d(nt,"_defaultMaxCount",3e3),d(nt,"_maxCountMap",{}),d(nt,"_poolsMap",{});const Or=class extends nt{constructor(){super(...arguments),d(this,"time",0),d(this,"type",""),d(this,"name",""),d(this,"armature",null),d(this,"bone",null),d(this,"slot",null),d(this,"animationState",null),d(this,"actionData",null),d(this,"data",null)}static actionDataToInstance(r,t,e){if(r.name===void 0)throw new Error("data.name is undefined.");if(r.name===void 0)throw new Error("data.name is undefined.");r.type===Kt.Play?t.type=Or.FRAME_EVENT:t.type=r.type===Kt.Frame?Or.FRAME_EVENT:Or.SOUND_EVENT,t.name=r.name,t.armature=e,t.actionData=r,t.data=r.data,r.bone!==null&&(t.bone=e.getBone(r.bone.name)),r.slot!==null&&(t.slot=e.getSlot(r.slot.name))}static toString(){return"[class dragonBones.EventObject]"}_onClear(){this.time=0,this.type="",this.name="",this.armature=null,this.bone=null,this.slot=null,this.animationState=null,this.actionData=null,this.data=null}};let Nt=Or;d(Nt,"START","start"),d(Nt,"LOOP_COMPLETE","loopComplete"),d(Nt,"COMPLETE","complete"),d(Nt,"FADE_IN","fadeIn"),d(Nt,"FADE_IN_COMPLETE","fadeInComplete"),d(Nt,"FADE_OUT","fadeOut"),d(Nt,"FADE_OUT_COMPLETE","fadeOutComplete"),d(Nt,"FRAME_EVENT","frameEvent"),d(Nt,"SOUND_EVENT","soundEvent");var it=(r=>(r[r.WeigthBoneCount=0]="WeigthBoneCount",r[r.WeigthFloatOffset=1]="WeigthFloatOffset",r[r.WeigthBoneIndices=2]="WeigthBoneIndices",r[r.GeometryVertexCount=0]="GeometryVertexCount",r[r.GeometryTriangleCount=1]="GeometryTriangleCount",r[r.GeometryFloatOffset=2]="GeometryFloatOffset",r[r.GeometryWeightOffset=3]="GeometryWeightOffset",r[r.GeometryVertexIndices=4]="GeometryVertexIndices",r[r.TimelineScale=0]="TimelineScale",r[r.TimelineOffset=1]="TimelineOffset",r[r.TimelineKeyFrameCount=2]="TimelineKeyFrameCount",r[r.TimelineFrameValueCount=3]="TimelineFrameValueCount",r[r.TimelineFrameValueOffset=4]="TimelineFrameValueOffset",r[r.TimelineFrameOffset=5]="TimelineFrameOffset",r[r.FramePosition=0]="FramePosition",r[r.FrameTweenType=1]="FrameTweenType",r[r.FrameTweenEasingOrCurveSampleCount=2]="FrameTweenEasingOrCurveSampleCount",r[r.FrameCurveSamples=3]="FrameCurveSamples",r[r.DeformVertexOffset=0]="DeformVertexOffset",r[r.DeformCount=1]="DeformCount",r[r.DeformValueCount=2]="DeformValueCount",r[r.DeformValueOffset=3]="DeformValueOffset",r[r.DeformFloatOffset=4]="DeformFloatOffset",r))(it||{}),Mi=(r=>(r[r.Armature=0]="Armature",r[r.MovieClip=1]="MovieClip",r[r.Stage=2]="Stage",r))(Mi||{}),_e=(r=>(r[r.Bone=0]="Bone",r[r.Surface=1]="Surface",r))(_e||{}),Rt=(r=>(r[r.Image=0]="Image",r[r.Armature=1]="Armature",r[r.Mesh=2]="Mesh",r[r.BoundingBox=3]="BoundingBox",r[r.Path=4]="Path",r))(Rt||{}),Re=(r=>(r[r.Rectangle=0]="Rectangle",r[r.Ellipse=1]="Ellipse",r[r.Polygon=2]="Polygon",r))(Re||{}),Kt=(r=>(r[r.Play=0]="Play",r[r.Frame=10]="Frame",r[r.Sound=11]="Sound",r))(Kt||{}),ee=(r=>(r[r.Normal=0]="Normal",r[r.Add=1]="Add",r[r.Alpha=2]="Alpha",r[r.Darken=3]="Darken",r[r.Difference=4]="Difference",r[r.Erase=5]="Erase",r[r.HardLight=6]="HardLight",r[r.Invert=7]="Invert",r[r.Layer=8]="Layer",r[r.Lighten=9]="Lighten",r[r.Multiply=10]="Multiply",r[r.Overlay=11]="Overlay",r[r.Screen=12]="Screen",r[r.Subtract=13]="Subtract",r))(ee||{}),Qt=(r=>(r[r.None=0]="None",r[r.Line=1]="Line",r[r.Curve=2]="Curve",r[r.QuadIn=3]="QuadIn",r[r.QuadOut=4]="QuadOut",r[r.QuadInOut=5]="QuadInOut",r))(Qt||{}),st=(r=>(r[r.Action=0]="Action",r[r.ZOrder=1]="ZOrder",r[r.BoneAll=10]="BoneAll",r[r.BoneTranslate=11]="BoneTranslate",r[r.BoneRotate=12]="BoneRotate",r[r.BoneScale=13]="BoneScale",r[r.Surface=50]="Surface",r[r.BoneAlpha=60]="BoneAlpha",r[r.SlotDisplay=20]="SlotDisplay",r[r.SlotColor=21]="SlotColor",r[r.SlotDeform=22]="SlotDeform",r[r.SlotZIndex=23]="SlotZIndex",r[r.SlotAlpha=24]="SlotAlpha",r[r.IKConstraint=30]="IKConstraint",r[r.AnimationProgress=40]="AnimationProgress",r[r.AnimationWeight=41]="AnimationWeight",r[r.AnimationParameter=42]="AnimationParameter",r))(st||{}),jn=(r=>(r[r.None=0]="None",r[r.Additive=1]="Additive",r[r.Override=2]="Override",r))(jn||{}),Je=(r=>(r[r.SameLayer=1]="SameLayer",r[r.SameGroup=2]="SameGroup",r[r.SameLayerAndGroup=3]="SameLayerAndGroup",r[r.All=4]="All",r[r.Single=5]="Single",r))(Je||{}),Ye=(r=>(r[r.None=0]="None",r[r.E1D=1]="E1D",r))(Ye||{}),tn=(r=>(r[r.IK=0]="IK",r[r.Path=1]="Path",r))(tn||{}),Yi=(r=>(r[r.Fixed=0]="Fixed",r[r.Percent=1]="Percent",r))(Yi||{}),mi=(r=>(r[r.Length=0]="Length",r[r.Fixed=1]="Fixed",r[r.Percent=2]="Percent",r))(mi||{}),ei=(r=>(r[r.Tangent=0]="Tangent",r[r.Chain=1]="Chain",r[r.ChainScale=2]="ChainScale",r))(ei||{});const ll=class{constructor(r){d(this,"_clock",new Im),d(this,"_events",[]),d(this,"_objects",[]),d(this,"_eventManager",null),this._eventManager=r,console.info(`DragonBones: ${ll.VERSION}
Website: http://dragonbones.com/
Source and Demo: https://github.com/DragonBones/`)}advanceTime(r){if(this._objects.length>0){for(const t of this._objects)t.returnToPool();this._objects.length=0}if(this._clock.advanceTime(r),this._events.length>0){for(let t=0;t<this._events.length;++t){const e=this._events[t],i=e.armature;if(i===null)throw new Error("armature is null.");i._armatureData!==null&&(i.eventDispatcher.dispatchDBEvent(e.type,e),e.type===Nt.SOUND_EVENT&&this._eventManager.dispatchDBEvent(e.type,e)),this.bufferObject(e)}this._events.length=0}}bufferEvent(r){this._events.indexOf(r)<0&&this._events.push(r)}bufferObject(r){this._objects.indexOf(r)<0&&this._objects.push(r)}get clock(){return this._clock}get eventManager(){return this._eventManager}};let Xe=ll;d(Xe,"VERSION","5.7.000"),d(Xe,"yDown",!0),d(Xe,"debug",!1),d(Xe,"debugDraw",!1);class Hr extends nt{constructor(){super(...arguments),d(this,"dirty",!1),d(this,"playState",-1),d(this,"currentPlayTimes",0),d(this,"currentTime",-1),d(this,"target",null),d(this,"_isTween",!1),d(this,"_valueOffset",0),d(this,"_frameValueOffset",0),d(this,"_frameOffset",0),d(this,"_frameRate",0),d(this,"_frameCount",0),d(this,"_frameIndex",-1),d(this,"_frameRateR",0),d(this,"_position",0),d(this,"_duration",0),d(this,"_timeScale",1),d(this,"_timeOffset",0),d(this,"_animationData",null),d(this,"_timelineData",null),d(this,"_armature",null),d(this,"_animationState",null),d(this,"_actionTimeline",null),d(this,"_timelineArray",null),d(this,"_frameArray",null),d(this,"_valueArray",null),d(this,"_frameIndices",null)}_onClear(){this.dirty=!1,this.playState=-1,this.currentPlayTimes=0,this.currentTime=-1,this.target=null,this._isTween=!1,this._valueOffset=0,this._frameValueOffset=0,this._frameOffset=0,this._frameRate=0,this._frameCount=0,this._frameIndex=-1,this._frameRateR=0,this._position=0,this._duration=0,this._timeScale=1,this._timeOffset=0,this._animationData=null,this._timelineData=null,this._armature=null,this._animationState=null,this._actionTimeline=null,this._frameArray=null,this._valueArray=null,this._timelineArray=null,this._frameIndices=null}_setCurrentTime(t){const e=this.playState,i=this.currentPlayTimes,n=this.currentTime;if(this._actionTimeline!==null&&this._frameCount<=1)this.playState=this._actionTimeline.playState>=0?1:-1,this.currentPlayTimes=1,this.currentTime=this._actionTimeline.currentTime;else if(this._actionTimeline===null||this._timeScale!==1||this._timeOffset!==0){if(this._animationState===null)throw new Error("this._animationState is null.");if(this._animationData===null)throw new Error("this._animationData is null.");const s=this._animationState.playTimes,o=s*this._duration;t*=this._timeScale,this._timeOffset!==0&&(t+=this._timeOffset*this._animationData.duration),s>0&&(t>=o||t<=-o)?(this.playState<=0&&this._animationState._playheadState===3&&(this.playState=1),this.currentPlayTimes=s,t<0?this.currentTime=0:this.currentTime=this.playState===1?this._duration+1e-6:this._duration):(this.playState!==0&&this._animationState._playheadState===3&&(this.playState=0),t<0?(t=-t,this.currentPlayTimes=Math.floor(t/this._duration),this.currentTime=this._duration-t%this._duration):(this.currentPlayTimes=Math.floor(t/this._duration),this.currentTime=t%this._duration)),this.currentTime+=this._position}else this.playState=this._actionTimeline.playState,this.currentPlayTimes=this._actionTimeline.currentPlayTimes,this.currentTime=this._actionTimeline.currentTime;return this.currentPlayTimes===i&&this.currentTime===n?!1:((e<0&&this.playState!==e||this.playState<=0&&this.currentPlayTimes!==i)&&(this._frameIndex=-1),!0)}init(t,e,i){if(this._armature=t,this._animationState=e,this._timelineData=i,this._actionTimeline=this._animationState._actionTimeline,this===this._actionTimeline&&(this._actionTimeline=null),this._animationData=this._animationState.animationData,this._animationData.parent===null)throw new Error("this._animationData.parent is null.");if(this._frameRate=this._animationData.parent.frameRate,this._frameRateR=1/this._frameRate,this._position=this._animationState._position,this._duration=this._animationState._duration,this._timelineData!==null){const n=this._animationData.parent.parent;if(n===null)throw new Error("dragonBonesData is null.");if(this._frameArray=n.frameArray,this._timelineArray=n.timelineArray,this._frameIndices=n.frameIndices,this._timelineArray===null)throw new Error("this._timelineArray is null.");this._frameCount=this._timelineArray[this._timelineData.offset+it.TimelineKeyFrameCount],this._frameValueOffset=this._timelineArray[this._timelineData.offset+it.TimelineFrameValueOffset],this._timeScale=100/this._timelineArray[this._timelineData.offset+it.TimelineScale],this._timeOffset=this._timelineArray[this._timelineData.offset+it.TimelineOffset]*.01}}fadeOut(){this.dirty=!1}update(t){if(this._setCurrentTime(t)){if(this._frameCount>1){const e=Math.floor(this.currentTime*this._frameRate);if(this._frameIndices===null)throw new Error("this._frameIndices is null.");const i=this._frameIndices[this._timelineData.frameIndicesOffset+e];if(this._frameIndex!==i){if(this._frameIndex=i,this._animationData===null)throw new Error(" this._animationData is null.");if(this._timelineArray===null)throw new Error(" this._timelineArray is null.");this._frameOffset=this._animationData.frameOffset+this._timelineArray[this._timelineData.offset+it.TimelineFrameOffset+this._frameIndex],this._onArriveAtFrame()}}else if(this._frameIndex<0){if(this._frameIndex=0,this._timelineData!==null){if(this._animationData===null)throw new Error(" this._animationData is null.");if(this._timelineArray===null)throw new Error(" this._timelineArray is null.");this._frameOffset=this._animationData.frameOffset+this._timelineArray[this._timelineData.offset+it.TimelineFrameOffset]}this._onArriveAtFrame()}(this._isTween||this.dirty)&&this._onUpdateFrame()}}blend(t){}}class en extends Hr{constructor(){super(...arguments),d(this,"_tweenType",Qt.None),d(this,"_curveCount",0),d(this,"_framePosition",0),d(this,"_frameDurationR",0),d(this,"_tweenEasing",0),d(this,"_tweenProgress",0),d(this,"_valueScale",1)}static _getEasingValue(t,e,i){let n=e;switch(t){case Qt.QuadIn:n=Math.pow(e,2);break;case Qt.QuadOut:n=1-Math.pow(1-e,2);break;case Qt.QuadInOut:n=.5*(1-Math.cos(e*Math.PI));break}return(n-e)*i+e}static _getEasingCurveValue(t,e,i,n){if(t<=0)return 0;if(t>=1)return 1;const s=i>0,o=i+1,a=Math.floor(t*o);let l=0,h=0;return s?(l=a===0?0:e[n+a-1],h=a===o-1?1e4:e[n+a]):(l=e[n+a-1],h=e[n+a]),(l+(h-l)*(t*o-a))*1e-4}_onClear(){super._onClear(),this._tweenType=Qt.None,this._curveCount=0,this._framePosition=0,this._frameDurationR=0,this._tweenEasing=0,this._tweenProgress=0,this._valueScale=1}_onArriveAtFrame(){if(this._animationState===null)throw new Error(" this._animationState is null.");if(this._frameCount>1&&(this._frameIndex!==this._frameCount-1||this._animationState.playTimes===0||this._animationState.currentPlayTimes<this._animationState.playTimes-1)){if(this._frameArray===null)throw new Error(" this._frameArray is null.");if(this._tweenType=this._frameArray[this._frameOffset+it.FrameTweenType],this._isTween=this._tweenType!==Qt.None,this._isTween?this._tweenType===Qt.Curve?this._curveCount=this._frameArray[this._frameOffset+it.FrameTweenEasingOrCurveSampleCount]:this._tweenType!==Qt.None&&this._tweenType!==Qt.Line&&(this._tweenEasing=this._frameArray[this._frameOffset+it.FrameTweenEasingOrCurveSampleCount]*.01):this.dirty=!0,this._framePosition=this._frameArray[this._frameOffset]*this._frameRateR,this._animationData===null)throw new Error(" this._animationData is null.");if(this._frameIndex===this._frameCount-1)this._frameDurationR=1/(this._animationData.duration-this._framePosition);else{if(this._timelineArray===null)throw new Error(" this._timelineArray is null.");const t=this._animationData.frameOffset+this._timelineArray[this._timelineData.offset+it.TimelineFrameOffset+this._frameIndex+1],e=this._frameArray[t]*this._frameRateR-this._framePosition;e>0?this._frameDurationR=1/e:this._frameDurationR=0}}else this.dirty=!0,this._isTween=!1}_onUpdateFrame(){if(this._isTween)if(this.dirty=!0,this._tweenProgress=(this.currentTime-this._framePosition)*this._frameDurationR,this._tweenType===Qt.Curve){if(this._frameArray===null)throw new Error(" this._frameArray is null.");this._tweenProgress=en._getEasingCurveValue(this._tweenProgress,this._frameArray,this._curveCount,this._frameOffset+it.FrameCurveSamples)}else this._tweenType!==Qt.Line&&(this._tweenProgress=en._getEasingValue(this._tweenType,this._tweenProgress,this._tweenEasing))}}class lr extends en{constructor(){super(...arguments),d(this,"_currentA",0),d(this,"_currentB",0),d(this,"_differenceA",0),d(this,"_differenceB",0),d(this,"_resultA",0),d(this,"_resultB",0)}_onClear(){super._onClear(),this._currentA=0,this._currentB=0,this._differenceA=0,this._differenceB=0,this._resultA=0,this._resultB=0}_onArriveAtFrame(){if(super._onArriveAtFrame(),this._timelineData!==null){const t=this._valueScale,e=this._valueArray,i=this._valueOffset+this._frameValueOffset+this._frameIndex*2;if(e===null)throw new Error("valueArray is null.");if(this._isTween){const n=this._frameIndex===this._frameCount-1?this._valueOffset+this._frameValueOffset:i+2;t===1?(this._currentA=e[i],this._currentB=e[i+1],this._differenceA=e[n]-this._currentA,this._differenceB=e[n+1]-this._currentB):(this._currentA=e[i]*t,this._currentB=e[i+1]*t,this._differenceA=e[n]*t-this._currentA,this._differenceB=e[n+1]*t-this._currentB)}else this._resultA=e[i]*t,this._resultB=e[i+1]*t}else this._resultA=0,this._resultB=0}_onUpdateFrame(){super._onUpdateFrame(),this._isTween&&(this._resultA=this._currentA+this._differenceA*this._tweenProgress,this._resultB=this._currentB+this._differenceB*this._tweenProgress)}}class Ks extends en{constructor(){super(...arguments),d(this,"_valueCount",0),d(this,"_rd",[])}_onClear(){super._onClear(),this._valueCount=0,this._rd.length=0}_onArriveAtFrame(){super._onArriveAtFrame();const t=this._valueCount,e=this._rd;if(this._timelineData!==null){const i=this._valueScale,n=this._valueArray;if(n===null)throw new Error("valueArray is null.");const s=this._valueOffset+this._frameValueOffset+this._frameIndex*t;if(this._isTween){const o=this._frameIndex===this._frameCount-1?this._valueOffset+this._frameValueOffset:s+t;if(i===1)for(let a=0;a<t;++a)e[t+a]=n[o+a]-n[s+a];else for(let a=0;a<t;++a)e[t+a]=(n[o+a]-n[s+a])*i}else if(i===1)for(let o=0;o<t;++o)e[o]=n[s+o];else for(let o=0;o<t;++o)e[o]=n[s+o]*i}else for(let i=0;i<t;++i)e[i]=0}_onUpdateFrame(){if(super._onUpdateFrame(),this._isTween){const t=this._valueCount,e=this._valueScale,i=this._tweenProgress,n=this._valueArray,s=this._rd,o=this._valueOffset+this._frameValueOffset+this._frameIndex*t;if(n===null)throw new Error("valueArray is null.");if(e===1)for(let a=0;a<t;++a)s[a]=n[o+a]+s[t+a]*i;else for(let a=0;a<t;++a)s[a]=n[o+a]*e+s[t+a]*i}}}class Xr extends en{constructor(){super(...arguments),d(this,"_current",0),d(this,"_difference",0),d(this,"_result",0)}_onClear(){super._onClear(),this._current=0,this._difference=0,this._result=0}_onArriveAtFrame(){if(super._onArriveAtFrame(),this._timelineData!==null){const t=this._valueScale,e=this._valueArray,i=this._valueOffset+this._frameValueOffset+this._frameIndex;if(e===null)throw new Error("valueArray is null.");if(this._isTween){const n=this._frameIndex===this._frameCount-1?this._valueOffset+this._frameValueOffset:i+1;t===1?(this._current=e[i],this._difference=e[n]-this._current):(this._current=e[i]*t,this._difference=e[n]*t-this._current)}else this._result=e[i]*t}else this._result=0}_onUpdateFrame(){super._onUpdateFrame(),this._isTween&&(this._result=this._current+this._difference*this._tweenProgress)}}class Rm extends nt{constructor(){super(...arguments),d(this,"pauseFadeOut",!0),d(this,"fadeOutMode",Je.All),d(this,"fadeOutTweenType",Qt.Line),d(this,"fadeOutTime",-1),d(this,"pauseFadeIn",!0),d(this,"actionEnabled",!0),d(this,"additive",!1),d(this,"displayControl",!0),d(this,"resetToPose",!0),d(this,"fadeInTweenType",Qt.Line),d(this,"playTimes",-1),d(this,"layer",0),d(this,"position",0),d(this,"duration",-1),d(this,"timeScale",1),d(this,"weight",1),d(this,"fadeInTime",-1),d(this,"autoFadeOutTime",-1),d(this,"name",""),d(this,"animation",""),d(this,"group",""),d(this,"boneMask",[])}static toString(){return"[class dragonBones.AnimationConfig]"}_onClear(){this.pauseFadeOut=!0,this.fadeOutMode=Je.All,this.fadeOutTweenType=Qt.Line,this.fadeOutTime=-1,this.actionEnabled=!0,this.additive=!1,this.displayControl=!0,this.pauseFadeIn=!0,this.resetToPose=!0,this.fadeInTweenType=Qt.Line,this.playTimes=-1,this.layer=0,this.position=0,this.duration=-1,this.timeScale=-100,this.weight=1,this.fadeInTime=-1,this.autoFadeOutTime=-1,this.name="",this.animation="",this.group="",this.boneMask.length=0}clear(){this._onClear()}copyFrom(t){this.pauseFadeOut=t.pauseFadeOut,this.fadeOutMode=t.fadeOutMode,this.autoFadeOutTime=t.autoFadeOutTime,this.fadeOutTweenType=t.fadeOutTweenType,this.actionEnabled=t.actionEnabled,this.additive=t.additive,this.displayControl=t.displayControl,this.pauseFadeIn=t.pauseFadeIn,this.resetToPose=t.resetToPose,this.playTimes=t.playTimes,this.layer=t.layer,this.position=t.position,this.duration=t.duration,this.timeScale=t.timeScale,this.fadeInTime=t.fadeInTime,this.fadeOutTime=t.fadeOutTime,this.fadeInTweenType=t.fadeInTweenType,this.weight=t.weight,this.name=t.name,this.animation=t.animation,this.group=t.group,this.boneMask.length=t.boneMask.length;for(let e=0,i=this.boneMask.length;e<i;++e)this.boneMask[e]=t.boneMask[e]}}const hl=class{constructor(r=0,t=0,e=0,i=0,n=1,s=1){d(this,"x"),d(this,"y"),d(this,"skew"),d(this,"rotation"),d(this,"scaleX"),d(this,"scaleY"),this.x=r,this.y=t,this.skew=e,this.rotation=i,this.scaleX=n,this.scaleY=s}static normalizeRadian(r){return r=(r+Math.PI)%(Math.PI*2),r+=r>0?-Math.PI:Math.PI,r}toString(){return"[object dragonBones.Transform] x:"+this.x+" y:"+this.y+" skewX:"+this.skew*180/Math.PI+" skewY:"+this.rotation*180/Math.PI+" scaleX:"+this.scaleX+" scaleY:"+this.scaleY}copyFrom(r){return this.x=r.x,this.y=r.y,this.skew=r.skew,this.rotation=r.rotation,this.scaleX=r.scaleX,this.scaleY=r.scaleY,this}identity(){return this.x=this.y=0,this.skew=this.rotation=0,this.scaleX=this.scaleY=1,this}add(r){return this.x+=r.x,this.y+=r.y,this.skew+=r.skew,this.rotation+=r.rotation,this.scaleX*=r.scaleX,this.scaleY*=r.scaleY,this}minus(r){return this.x-=r.x,this.y-=r.y,this.skew-=r.skew,this.rotation-=r.rotation,this.scaleX/=r.scaleX,this.scaleY/=r.scaleY,this}fromMatrix(r){const t=this.scaleX,e=this.scaleY,i=hl.PI_Q;this.x=r.tx,this.y=r.ty,this.rotation=Math.atan(r.b/r.a);let n=Math.atan(-r.c/r.d);return this.scaleX=this.rotation>-i&&this.rotation<i?r.a/Math.cos(this.rotation):r.b/Math.sin(this.rotation),this.scaleY=n>-i&&n<i?r.d/Math.cos(n):-r.c/Math.sin(n),t>=0&&this.scaleX<0&&(this.scaleX=-this.scaleX,this.rotation=this.rotation-Math.PI),e>=0&&this.scaleY<0&&(this.scaleY=-this.scaleY,n=n-Math.PI),this.skew=n-this.rotation,this}toMatrix(r){return this.rotation===0?(r.a=1,r.b=0):(r.a=Math.cos(this.rotation),r.b=Math.sin(this.rotation)),this.skew===0?(r.c=-r.b,r.d=r.a):(r.c=-Math.sin(this.skew+this.rotation),r.d=Math.cos(this.skew+this.rotation)),this.scaleX!==1&&(r.a*=this.scaleX,r.b*=this.scaleX),this.scaleY!==1&&(r.c*=this.scaleY,r.d*=this.scaleY),r.tx=this.x,r.ty=this.y,this}};let Dt=hl;d(Dt,"PI",Math.PI),d(Dt,"PI_D",Math.PI*2),d(Dt,"PI_H",Math.PI/2),d(Dt,"PI_Q",Math.PI/4),d(Dt,"RAD_DEG",180/Math.PI),d(Dt,"DEG_RAD",Math.PI/180);class Lm extends Hr{static toString(){return"[class dragonBones.ActionTimelineState]"}_onCrossFrame(t){if(this._armature===null)throw new Error("this._armature is null.");if(this._animationState===null)throw new Error("this._animationState is null.");if(this._animationData===null)throw new Error("this._animationData is null.");if(this._timelineArray===null)throw new Error("this._timelineArray is null.");if(this._frameArray===null)throw new Error("this._frameArray is null.");if(this._animationData.parent===null)throw new Error("this._animationData.parent is null.");if(this._armature._dragonBones===null)throw new Error(" this._armature._dragonBones is null.");const e=this._armature.eventDispatcher;if(this._animationState.actionEnabled){const i=this._animationData.frameOffset+this._timelineArray[this._timelineData.offset+it.TimelineFrameOffset+t],n=this._frameArray[i+1],s=this._animationData.parent.actions;for(let o=0;o<n;++o){const a=this._frameArray[i+2+o],l=s[a];if(l.type===Kt.Play){const h=nt.borrowObject(Nt);h.time=this._frameArray[i]/this._frameRate,h.animationState=this._animationState,Nt.actionDataToInstance(l,h,this._armature),this._armature._bufferAction(h,!0)}else{const h=l.type===Kt.Frame?Nt.FRAME_EVENT:Nt.SOUND_EVENT;if(l.type===Kt.Sound||e.hasDBEventListener(h)){const u=nt.borrowObject(Nt);u.time=this._frameArray[i]/this._frameRate,u.animationState=this._animationState,Nt.actionDataToInstance(l,u,this._armature),this._armature._dragonBones.bufferEvent(u)}}}}}_onArriveAtFrame(){}_onUpdateFrame(){}update(t){const e=this.playState;let i=this.currentPlayTimes,n=this.currentTime;if(this._armature===null)throw new Error("this._armature is null.");if(this._animationState===null)throw new Error("this._animationState is null.");if(this._animationData===null)throw new Error("this._animationData is null.");if(this._animationData.parent===null)throw new Error("this._animationData.parent is null.");if(this._armature._dragonBones===null)throw new Error(" this._armature._dragonBones is null.");if(this._setCurrentTime(t)){const s=this._animationState._parent===null&&this._animationState.actionEnabled,o=this._armature.eventDispatcher;if(e<0)if(this.playState!==e){if(this._animationState.displayControl&&this._animationState.resetToPose&&this._armature._sortZOrder(null,0),s&&o.hasDBEventListener(Nt.START)){const u=nt.borrowObject(Nt);u.type=Nt.START,u.armature=this._armature,u.animationState=this._animationState,this._armature._dragonBones.bufferEvent(u)}}else return;const a=this._animationState.timeScale<0;let l=null,h=null;if(s&&this.currentPlayTimes!==i&&(o.hasDBEventListener(Nt.LOOP_COMPLETE)&&(l=nt.borrowObject(Nt),l.type=Nt.LOOP_COMPLETE,l.armature=this._armature,l.animationState=this._animationState),this.playState>0&&o.hasDBEventListener(Nt.COMPLETE)&&(h=nt.borrowObject(Nt),h.type=Nt.COMPLETE,h.armature=this._armature,h.animationState=this._animationState)),this._frameCount>1){const u=this._timelineData,c=Math.floor(this.currentTime*this._frameRate);if(this._frameIndices===null)throw new Error(" this._frameIndices is null.");const f=this._frameIndices[u.frameIndicesOffset+c];if(this._frameIndex!==f){let _=this._frameIndex;if(this._frameIndex=f,this._timelineArray!==null)if(this._frameOffset=this._animationData.frameOffset+this._timelineArray[u.offset+it.TimelineFrameOffset+this._frameIndex],a){if(_<0){const y=Math.floor(n*this._frameRate);_=this._frameIndices[u.frameIndicesOffset+y],this.currentPlayTimes===i&&_===f&&(_=-1)}for(;_>=0;){const y=this._animationData.frameOffset+this._timelineArray[u.offset+it.TimelineFrameOffset+_];if(this._frameArray===null)throw new Error("this._frameArray is null.");const p=this._frameArray[y]/this._frameRate;if(this._position<=p&&p<=this._position+this._duration&&this._onCrossFrame(_),l!==null&&_===0&&(this._armature._dragonBones.bufferEvent(l),l=null),_>0?_--:_=this._frameCount-1,_===f)break}}else{if(_<0){const y=Math.floor(n*this._frameRate);_=this._frameIndices[u.frameIndicesOffset+y];const p=this._animationData.frameOffset+this._timelineArray[u.offset+it.TimelineFrameOffset+_];if(this._frameArray===null)throw new Error("this._frameArray is null.");const m=this._frameArray[p]/this._frameRate;this.currentPlayTimes===i&&(n<=m?_>0?_--:_=this._frameCount-1:_===f&&(_=-1))}for(;_>=0;){_<this._frameCount-1?_++:_=0;const y=this._animationData.frameOffset+this._timelineArray[u.offset+it.TimelineFrameOffset+_];if(this._frameArray===null)throw new Error("this._frameArray is null.");const p=this._frameArray[y]/this._frameRate;if(this._position<=p&&p<=this._position+this._duration&&this._onCrossFrame(_),l!==null&&_===0&&(this._armature._dragonBones.bufferEvent(l),l=null),_===f)break}}}}else if(this._frameIndex<0&&(this._frameIndex=0,this._timelineData!==null)){if(this._timelineArray===null)throw new Error("this._timelineArray is null.");if(this._frameOffset=this._animationData.frameOffset+this._timelineArray[this._timelineData.offset+it.TimelineFrameOffset],this._frameArray===null)throw new Error("this._frameArray is null.");const u=this._frameArray[this._frameOffset]/this._frameRate;this.currentPlayTimes===i?n<=u&&this._onCrossFrame(this._frameIndex):this._position<=u&&(!a&&l!==null&&(this._armature._dragonBones.bufferEvent(l),l=null),this._onCrossFrame(this._frameIndex))}l!==null&&this._armature._dragonBones.bufferEvent(l),h!==null&&this._armature._dragonBones.bufferEvent(h)}}setCurrentTime(t){this._setCurrentTime(t),this._frameIndex=-1}}class Om extends Hr{static toString(){return"[class dragonBones.ZOrderTimelineState]"}_onArriveAtFrame(){if(this._armature===null)throw new Error("this._armature is null.");if(this._frameArray===null)throw new Error("this._frameArray is null.");this.playState>=0&&(this._frameArray[this._frameOffset+1]>0?this._armature._sortZOrder(this._frameArray,this._frameOffset+2):this._armature._sortZOrder(null,0))}_onUpdateFrame(){}}class yo extends Ks{static toString(){return"[class dragonBones.BoneAllTimelineState]"}_onArriveAtFrame(){super._onArriveAtFrame(),this._isTween&&this._frameIndex===this._frameCount-1&&(this._rd[2]=Dt.normalizeRadian(this._rd[2]),this._rd[3]=Dt.normalizeRadian(this._rd[3])),this._timelineData===null&&(this._rd[4]=1,this._rd[5]=1)}init(t,e,i){if(super.init(t,e,i),this._animationData===null)throw new Error("this._animationData is null.");if(this._animationData.parent===null)throw new Error(" this._animationData.parent is null.");if(this._animationData.parent.parent===null)throw new Error(" this._animationData.parent.parent is null.");this._valueOffset=this._animationData.frameFloatOffset,this._valueCount=6,this._valueArray=this._animationData.parent.parent.frameFloatArray}fadeOut(){this.dirty=!1,this._rd[2]=Dt.normalizeRadian(this._rd[2]),this._rd[3]=Dt.normalizeRadian(this._rd[3])}blend(t){if(this._armature===null)throw new Error("this._armature is null.");const e=this._armature.armatureData.scale,i=this._rd,n=this.target,s=n.target,o=n.blendWeight,a=s.animationPose;n.dirty>1?(a.x+=i[0]*o*e,a.y+=i[1]*o*e,a.rotation+=i[2]*o,a.skew+=i[3]*o,a.scaleX+=(i[4]-1)*o,a.scaleY+=(i[5]-1)*o):(a.x=i[0]*o*e,a.y=i[1]*o*e,a.rotation=i[2]*o,a.skew=i[3]*o,a.scaleX=(i[4]-1)*o+1,a.scaleY=(i[5]-1)*o+1),(t||this.dirty)&&(this.dirty=!1,s._transformDirty=!0)}}class Fm extends lr{static toString(){return"[class dragonBones.BoneTranslateTimelineState]"}init(t,e,i){if(super.init(t,e,i),this._armature===null)throw new Error("this._armature is null.");if(this._animationData===null)throw new Error("this._animationData is null.");if(this._animationData.parent===null)throw new Error(" this._animationData.parent is null.");if(this._animationData.parent.parent===null)throw new Error(" this._animationData.parent.parent is null.");this._valueOffset=this._animationData.frameFloatOffset,this._valueScale=this._armature.armatureData.scale,this._valueArray=this._animationData.parent.parent.frameFloatArray}blend(t){const e=this.target,i=e.target,n=e.blendWeight,s=i.animationPose;e.dirty>1?(s.x+=this._resultA*n,s.y+=this._resultB*n):n!==1?(s.x=this._resultA*n,s.y=this._resultB*n):(s.x=this._resultA,s.y=this._resultB),(t||this.dirty)&&(this.dirty=!1,i._transformDirty=!0)}}class Bm extends lr{static toString(){return"[class dragonBones.BoneRotateTimelineState]"}_onArriveAtFrame(){super._onArriveAtFrame(),this._isTween&&this._frameIndex===this._frameCount-1&&(this._differenceA=Dt.normalizeRadian(this._differenceA),this._differenceB=Dt.normalizeRadian(this._differenceB))}init(t,e,i){if(super.init(t,e,i),this._animationData===null)throw new Error("this._animationData is null.");if(this._animationData.parent===null)throw new Error(" this._animationData.parent is null.");if(this._animationData.parent.parent===null)throw new Error(" this._animationData.parent.parent is null.");this._valueOffset=this._animationData.frameFloatOffset,this._valueArray=this._animationData.parent.parent.frameFloatArray}fadeOut(){this.dirty=!1,this._resultA=Dt.normalizeRadian(this._resultA),this._resultB=Dt.normalizeRadian(this._resultB)}blend(t){const e=this.target,i=e.target,n=e.blendWeight,s=i.animationPose;e.dirty>1?(s.rotation+=this._resultA*n,s.skew+=this._resultB*n):n!==1?(s.rotation=this._resultA*n,s.skew=this._resultB*n):(s.rotation=this._resultA,s.skew=this._resultB),(t||this.dirty)&&(this.dirty=!1,i._transformDirty=!0)}}class Nm extends lr{static toString(){return"[class dragonBones.BoneScaleTimelineState]"}_onArriveAtFrame(){super._onArriveAtFrame(),this._timelineData===null&&(this._resultA=1,this._resultB=1)}init(t,e,i){if(super.init(t,e,i),this._animationData===null)throw new Error("this._animationData is null.");if(this._animationData.parent===null)throw new Error(" this._animationData.parent is null.");if(this._animationData.parent.parent===null)throw new Error(" this._animationData.parent.parent is null.");this._valueOffset=this._animationData.frameFloatOffset,this._valueArray=this._animationData.parent.parent.frameFloatArray}blend(t){const e=this.target,i=e.target,n=e.blendWeight,s=i.animationPose;e.dirty>1?(s.scaleX+=(this._resultA-1)*n,s.scaleY+=(this._resultB-1)*n):n!==1?(s.scaleX=(this._resultA-1)*n+1,s.scaleY=(this._resultB-1)*n+1):(s.scaleX=this._resultA,s.scaleY=this._resultB),(t||this.dirty)&&(this.dirty=!1,i._transformDirty=!0)}}class xo extends Ks{constructor(){super(...arguments),d(this,"_deformCount",0),d(this,"_deformOffset",0),d(this,"_sameValueOffset",0)}static toString(){return"[class dragonBones.SurfaceTimelineState]"}_onClear(){super._onClear(),this._deformCount=0,this._deformOffset=0,this._sameValueOffset=0}init(t,e,i){if(super.init(t,e,i),this._timelineData!==null){if(this._armature===null)throw new Error("this._armature is null.");if(this._animationData===null)throw new Error("this._animationData is null.");if(this._animationData.parent===null)throw new Error(" this._animationData.parent is null.");if(this._animationData.parent.parent===null)throw new Error(" this._animationData.parent.parent is null.");if(this._timelineArray===null)throw new Error("this._timelineArray is null.");const n=this._animationData.parent.parent,s=n.frameIntArray,o=this._animationData.frameIntOffset+this._timelineArray[this._timelineData.offset+it.TimelineFrameValueCount];if(s===null)throw new Error("frameIntArray is null.");this._valueOffset=this._animationData.frameFloatOffset,this._valueCount=s[o+it.DeformValueCount],this._deformCount=s[o+it.DeformCount],this._deformOffset=s[o+it.DeformValueOffset],this._sameValueOffset=s[o+it.DeformFloatOffset]+this._animationData.frameFloatOffset,this._valueScale=this._armature.armatureData.scale,this._valueArray=n.frameFloatArray,this._rd.length=this._valueCount*2}else this._deformCount=this.target.target._deformVertices.length}blend(t){const e=this.target,i=e.target,n=e.blendWeight,s=i._deformVertices,o=this._valueArray;if(o!==null){const a=this._valueCount,l=this._deformOffset,h=this._sameValueOffset,u=this._rd;for(let c=0;c<this._deformCount;++c){let f=0;c<l?f=o[h+c]:c<l+a?f=u[c-l]:f=o[h+c-a],e.dirty>1?s[c]+=f*n:s[c]=f*n}}else if(e.dirty===1)for(let a=0;a<this._deformCount;++a)s[a]=0;(t||this.dirty)&&(this.dirty=!1,i._transformDirty=!0)}}class vo extends Xr{static toString(){return"[class dragonBones.AlphaTimelineState]"}_onArriveAtFrame(){super._onArriveAtFrame(),this._timelineData===null&&(this._result=1)}init(t,e,i){if(super.init(t,e,i),this._animationData===null)throw new Error("this._animationData is null.");if(this._animationData.parent===null)throw new Error(" this._animationData.parent is null.");if(this._animationData.parent.parent===null)throw new Error(" this._animationData.parent.parent is null.");this._valueOffset=this._animationData.frameIntOffset,this._valueScale=.01,this._valueArray=this._animationData.parent.parent.frameIntArray}blend(t){const e=this.target,i=e.target,n=e.blendWeight;if(e.dirty>1?(i._alpha+=this._result*n,i._alpha>1&&(i._alpha=1)):i._alpha=this._result*n,this._armature===null)throw new Error("this._armature is null.");(t||this.dirty)&&(this.dirty=!1,this._armature._alphaDirty=!0)}}class bo extends Hr{static toString(){return"[class dragonBones.SlotDisplayTimelineState]"}_onArriveAtFrame(){if(this.playState<0)return;const t=this.target;if(t._slotData===null)throw new Error("slot._slotData is null.");const e=(()=>{if(this._timelineData!==null){if(this._frameArray===null)throw new Error("this._frameArray is null.");return this._frameArray[this._frameOffset+1]}return t._slotData.displayIndex})();t.displayIndex!==e&&t._setDisplayIndex(e,!0)}_onUpdateFrame(){}}class So extends en{constructor(){super(...arguments),d(this,"_current",[0,0,0,0,0,0,0,0]),d(this,"_difference",[0,0,0,0,0,0,0,0]),d(this,"_result",[0,0,0,0,0,0,0,0])}static toString(){return"[class dragonBones.SlotColorTimelineState]"}_onArriveAtFrame(){if(super._onArriveAtFrame(),this._timelineData!==null){if(this._animationData===null)throw new Error("this._animationData is null.");if(this._animationData.parent===null)throw new Error(" this._animationData.parent is null.");if(this._animationData.parent.parent===null)throw new Error(" this._animationData.parent.parent is null.");const t=this._animationData.parent.parent,e=t.colorArray,i=t.frameIntArray,n=this._animationData.frameIntOffset+this._frameValueOffset+this._frameIndex;if(i===null)throw new Error(" frameIntArray is null.");let s=i[n];if(s<0&&(s+=65536),e===null)throw new Error(" colorArray is null.");this._isTween?(this._current[0]=e[s++],this._current[1]=e[s++],this._current[2]=e[s++],this._current[3]=e[s++],this._current[4]=e[s++],this._current[5]=e[s++],this._current[6]=e[s++],this._current[7]=e[s++],this._frameIndex===this._frameCount-1?s=i[this._animationData.frameIntOffset+this._frameValueOffset]:s=i[n+1],s<0&&(s+=65536),this._difference[0]=e[s++]-this._current[0],this._difference[1]=e[s++]-this._current[1],this._difference[2]=e[s++]-this._current[2],this._difference[3]=e[s++]-this._current[3],this._difference[4]=e[s++]-this._current[4],this._difference[5]=e[s++]-this._current[5],this._difference[6]=e[s++]-this._current[6],this._difference[7]=e[s++]-this._current[7]):(this._result[0]=e[s++]*.01,this._result[1]=e[s++]*.01,this._result[2]=e[s++]*.01,this._result[3]=e[s++]*.01,this._result[4]=e[s++],this._result[5]=e[s++],this._result[6]=e[s++],this._result[7]=e[s++])}else{const t=this.target.slotData.color;if(t===null)throw new Error(" color is null.");this._result[0]=t.alphaMultiplier,this._result[1]=t.redMultiplier,this._result[2]=t.greenMultiplier,this._result[3]=t.blueMultiplier,this._result[4]=t.alphaOffset,this._result[5]=t.redOffset,this._result[6]=t.greenOffset,this._result[7]=t.blueOffset}}_onUpdateFrame(){super._onUpdateFrame(),this._isTween&&(this._result[0]=(this._current[0]+this._difference[0]*this._tweenProgress)*.01,this._result[1]=(this._current[1]+this._difference[1]*this._tweenProgress)*.01,this._result[2]=(this._current[2]+this._difference[2]*this._tweenProgress)*.01,this._result[3]=(this._current[3]+this._difference[3]*this._tweenProgress)*.01,this._result[4]=this._current[4]+this._difference[4]*this._tweenProgress,this._result[5]=this._current[5]+this._difference[5]*this._tweenProgress,this._result[6]=this._current[6]+this._difference[6]*this._tweenProgress,this._result[7]=this._current[7]+this._difference[7]*this._tweenProgress)}fadeOut(){this._isTween=!1}update(t){if(super.update(t),this._isTween||this.dirty){const e=this.target,i=e._colorTransform;if(this._animationState===null)throw new Error("this._animationState is null.");if(this._animationState._fadeState!==0||this._animationState._subFadeState!==0){if(i.alphaMultiplier!==this._result[0]||i.redMultiplier!==this._result[1]||i.greenMultiplier!==this._result[2]||i.blueMultiplier!==this._result[3]||i.alphaOffset!==this._result[4]||i.redOffset!==this._result[5]||i.greenOffset!==this._result[6]||i.blueOffset!==this._result[7]){const n=Math.pow(this._animationState._fadeProgress,4);i.alphaMultiplier+=(this._result[0]-i.alphaMultiplier)*n,i.redMultiplier+=(this._result[1]-i.redMultiplier)*n,i.greenMultiplier+=(this._result[2]-i.greenMultiplier)*n,i.blueMultiplier+=(this._result[3]-i.blueMultiplier)*n,i.alphaOffset+=(this._result[4]-i.alphaOffset)*n,i.redOffset+=(this._result[5]-i.redOffset)*n,i.greenOffset+=(this._result[6]-i.greenOffset)*n,i.blueOffset+=(this._result[7]-i.blueOffset)*n,e._colorDirty=!0}}else this.dirty&&(this.dirty=!1,(i.alphaMultiplier!==this._result[0]||i.redMultiplier!==this._result[1]||i.greenMultiplier!==this._result[2]||i.blueMultiplier!==this._result[3]||i.alphaOffset!==this._result[4]||i.redOffset!==this._result[5]||i.greenOffset!==this._result[6]||i.blueOffset!==this._result[7])&&(i.alphaMultiplier=this._result[0],i.redMultiplier=this._result[1],i.greenMultiplier=this._result[2],i.blueMultiplier=this._result[3],i.alphaOffset=this._result[4],i.redOffset=this._result[5],i.greenOffset=this._result[6],i.blueOffset=this._result[7],e._colorDirty=!0))}}}class Um extends Xr{static toString(){return"[class dragonBones.SlotZIndexTimelineState]"}_onArriveAtFrame(){if(super._onArriveAtFrame(),this._timelineData===null){const t=this.target.target;this._result=t.slotData.zIndex}}init(t,e,i){if(super.init(t,e,i),this._animationData===null)throw new Error("this._animationData is null.");if(this._animationData.parent===null)throw new Error(" this._animationData.parent is null.");if(this._animationData.parent.parent===null)throw new Error(" this._animationData.parent.parent is null.");this._valueOffset=this._animationData.frameIntOffset,this._valueArray=this._animationData.parent.parent.frameIntArray}blend(t){const e=this.target,i=e.target,n=e.blendWeight;if(e.dirty>1?i._zIndex+=this._result*n:i._zIndex=this._result*n,this._armature===null)throw new Error("this._armature is null.");(t||this.dirty)&&(this.dirty=!1,this._armature._zIndexDirty=!0)}}class Mo extends Ks{constructor(){super(...arguments),d(this,"displayFrame",null),d(this,"_deformCount",0),d(this,"_deformOffset",0),d(this,"_sameValueOffset",0)}static toString(){return"[class dragonBones.DeformTimelineState]"}_onClear(){super._onClear(),this.displayFrame=null,this._deformCount=0,this._deformOffset=0,this._sameValueOffset=0}init(t,e,i){if(super.init(t,e,i),this._timelineData!==null){if(this._animationData===null)throw new Error("this._animationData is null.");if(this._animationData.parent===null)throw new Error(" this._animationData.parent is null.");if(this._animationData.parent.parent===null)throw new Error(" this._animationData.parent.parent is null.");if(this._timelineArray===null)throw new Error("this._timelineArray is null.");const n=this._animationData.frameIntOffset+this._timelineArray[this._timelineData.offset+it.TimelineFrameValueCount],s=this._animationData.parent.parent,o=s.frameIntArray;if(o===null)throw new Error("frameIntArray is null.");if(this._valueOffset=this._animationData.frameFloatOffset,this._valueCount=o[n+it.DeformValueCount],this._deformCount=o[n+it.DeformCount],this._deformOffset=o[n+it.DeformValueOffset],this._sameValueOffset=o[n+it.DeformFloatOffset],this._sameValueOffset<0&&(this._sameValueOffset+=65536),this._sameValueOffset+=this._animationData.frameFloatOffset,this._armature===null)throw new Error("this._armature is null.");this._valueScale=this._armature.armatureData.scale,this._valueArray=s.frameFloatArray,this._rd.length=this._valueCount*2}else{if(this.displayFrame===null)throw new Error("this.displayFrame is null.");this._deformCount=this.displayFrame.deformVertices.length}}blend(t){if(this.displayFrame===null)throw new Error("this.displayFrame is null.");const e=this.target,i=e.target,n=e.blendWeight,s=this.displayFrame.deformVertices,o=this._valueArray;if(o!==null){const a=this._valueCount,l=this._deformOffset,h=this._sameValueOffset,u=this._rd;for(let c=0;c<this._deformCount;++c){let f=0;c<l?f=o[h+c]:c<l+a?f=u[c-l]:f=o[h+c-a],e.dirty>1?s[c]+=f*n:s[c]=f*n}}else if(e.dirty===1)for(let a=0;a<this._deformCount;++a)s[a]=0;(t||this.dirty)&&(this.dirty=!1,i._geometryData===this.displayFrame.getGeometryData()&&(i._verticesDirty=!0))}}class wo extends lr{static toString(){return"[class dragonBones.IKConstraintTimelineState]"}_onUpdateFrame(){super._onUpdateFrame();const t=this.target;if(this._timelineData!==null)t._bendPositive=this._currentA>0,t._weight=this._currentB;else{const e=t._constraintData;t._bendPositive=e.bendPositive,t._weight=e.weight}t.invalidUpdate(),this.dirty=!1}init(t,e,i){if(super.init(t,e,i),this._animationData===null)throw new Error("this._animationData is null.");if(this._animationData.parent===null)throw new Error(" this._animationData.parent is null.");if(this._animationData.parent.parent===null)throw new Error(" this._animationData.parent.parent is null.");this._valueOffset=this._animationData.frameIntOffset,this._valueScale=.01,this._valueArray=this._animationData.parent.parent.frameIntArray}}class zm extends Xr{static toString(){return"[class dragonBones.AnimationProgressTimelineState]"}_onUpdateFrame(){super._onUpdateFrame();const t=this.target;t._parent!==null&&(t.currentTime=this._result*t.totalTime),this.dirty=!1}init(t,e,i){if(super.init(t,e,i),this._animationData===null)throw new Error("this._animationData is null.");if(this._animationData.parent===null)throw new Error(" this._animationData.parent is null.");if(this._animationData.parent.parent===null)throw new Error(" this._animationData.parent.parent is null.");this._valueOffset=this._animationData.frameIntOffset,this._valueScale=1e-4,this._valueArray=this._animationData.parent.parent.frameIntArray}}class km extends Xr{static toString(){return"[class dragonBones.AnimationWeightTimelineState]"}_onUpdateFrame(){super._onUpdateFrame();const t=this.target;t._parent!==null&&(t.weight=this._result),this.dirty=!1}init(t,e,i){if(super.init(t,e,i),this._animationData===null)throw new Error("this._animationData is null.");if(this._animationData.parent===null)throw new Error(" this._animationData.parent is null.");if(this._animationData.parent.parent===null)throw new Error(" this._animationData.parent.parent is null.");this._valueOffset=this._animationData.frameIntOffset,this._valueScale=1e-4,this._valueArray=this._animationData.parent.parent.frameIntArray}}class Vm extends lr{static toString(){return"[class dragonBones.AnimationParametersTimelineState]"}_onUpdateFrame(){super._onUpdateFrame();const t=this.target;t._parent!==null&&(t.parameterX=this._resultA,t.parameterY=this._resultB),this.dirty=!1}init(t,e,i){if(super.init(t,e,i),this._animationData===null)throw new Error("this._animationData is null.");if(this._animationData.parent===null)throw new Error(" this._animationData.parent is null.");if(this._animationData.parent.parent===null)throw new Error(" this._animationData.parent.parent is null.");this._valueOffset=this._animationData.frameIntOffset,this._valueScale=1e-4,this._valueArray=this._animationData.parent.parent.frameIntArray}}class Gm extends nt{constructor(){super(...arguments),d(this,"actionEnabled",!1),d(this,"additive",!1),d(this,"displayControl",!1),d(this,"resetToPose",!1),d(this,"blendType",Ye.None),d(this,"playTimes",1),d(this,"layer",0),d(this,"timeScale",1),d(this,"parameterX",0),d(this,"parameterY",0),d(this,"positionX",0),d(this,"positionY",0),d(this,"autoFadeOutTime",0),d(this,"fadeTotalTime",0),d(this,"name",""),d(this,"group",""),d(this,"_timelineDirty",2),d(this,"_playheadState",0),d(this,"_fadeState",-1),d(this,"_subFadeState",1),d(this,"_position",0),d(this,"_duration",0),d(this,"_weight",1),d(this,"_fadeTime",0),d(this,"_time",0),d(this,"_fadeProgress",0),d(this,"_weightResult",0),d(this,"_boneMask",[]),d(this,"_boneTimelines",[]),d(this,"_boneBlendTimelines",[]),d(this,"_slotTimelines",[]),d(this,"_slotBlendTimelines",[]),d(this,"_constraintTimelines",[]),d(this,"_animationTimelines",[]),d(this,"_poseTimelines",[]),d(this,"_animationData",null),d(this,"_armature",null),d(this,"_actionTimeline",null),d(this,"_zOrderTimeline",null),d(this,"_activeChildA",null),d(this,"_activeChildB",null),d(this,"_parent",null)}static toString(){return"[class dragonBones.AnimationState]"}_onClear(){for(const t of this._boneTimelines)t.returnToPool();for(const t of this._boneBlendTimelines)t.returnToPool();for(const t of this._slotTimelines)t.returnToPool();for(const t of this._slotBlendTimelines)t.returnToPool();for(const t of this._constraintTimelines)t.returnToPool();for(const t of this._animationTimelines){const e=t.target;e._parent===this&&(e._fadeState=1,e._subFadeState=1,e._parent=null),t.returnToPool()}this._actionTimeline!==null&&this._actionTimeline.returnToPool(),this._zOrderTimeline!==null&&this._zOrderTimeline.returnToPool(),this.actionEnabled=!1,this.additive=!1,this.displayControl=!1,this.resetToPose=!1,this.blendType=Ye.None,this.playTimes=1,this.layer=0,this.timeScale=1,this._weight=1,this.parameterX=0,this.parameterY=0,this.positionX=0,this.positionY=0,this.autoFadeOutTime=0,this.fadeTotalTime=0,this.name="",this.group="",this._timelineDirty=2,this._playheadState=0,this._fadeState=-1,this._subFadeState=-1,this._position=0,this._duration=0,this._fadeTime=0,this._time=0,this._fadeProgress=0,this._weightResult=0,this._boneMask.length=0,this._boneTimelines.length=0,this._boneBlendTimelines.length=0,this._slotTimelines.length=0,this._slotBlendTimelines.length=0,this._constraintTimelines.length=0,this._animationTimelines.length=0,this._poseTimelines.length=0,this._animationData=null,this._armature=null,this._actionTimeline=null,this._zOrderTimeline=null,this._activeChildA=null,this._activeChildB=null,this._parent=null}_updateTimelines(){{if(this._armature===null)throw new Error("this._armature is null.");if(this._animationData===null)throw new Error("this._animationData is null.");for(const t of this._armature._constraints){const e=this._animationData.getConstraintTimelines(t.name);if(e!==null)for(const i of e)switch(i.type){case st.IKConstraint:{const n=nt.borrowObject(wo);n.target=t,n.init(this._armature,this,i),this._constraintTimelines.push(n);break}}else if(this.resetToPose){const i=nt.borrowObject(wo);i.target=t,i.init(this._armature,this,null),this._constraintTimelines.push(i),this._poseTimelines.push(i)}}}}_updateBoneAndSlotTimelines(){var t;{const e={};for(const i of this._boneTimelines){const n=i.target.target.name;n in e||(e[n]=[]),e[n].push(i)}for(const i of this._boneBlendTimelines){const n=i.target.target.name;n in e||(e[n]=[]),e[n].push(i)}if(this._armature===null)throw new Error("this._armature is null.");if(this._animationData===null)throw new Error("this._animationData is null.");for(const i of this._armature.getBones()){const n=i.name;if(this.containsBoneMask(n))if(n in e)delete e[n];else{const s=this._animationData.getBoneTimelines(n),o=this._armature.animation.getBlendState(Ae.BONE_TRANSFORM,i.name,i);if(s!==null)for(const a of s)switch(a.type){case st.BoneAll:{const l=nt.borrowObject(yo);l.target=o,l.init(this._armature,this,a),this._boneTimelines.push(l);break}case st.BoneTranslate:{const l=nt.borrowObject(Fm);l.target=o,l.init(this._armature,this,a),this._boneTimelines.push(l);break}case st.BoneRotate:{const l=nt.borrowObject(Bm);l.target=o,l.init(this._armature,this,a),this._boneTimelines.push(l);break}case st.BoneScale:{const l=nt.borrowObject(Nm);l.target=o,l.init(this._armature,this,a),this._boneTimelines.push(l);break}case st.BoneAlpha:{const l=nt.borrowObject(vo);l.target=this._armature.animation.getBlendState(Ae.BONE_ALPHA,i.name,i),l.init(this._armature,this,a),this._boneBlendTimelines.push(l);break}case st.Surface:{const l=nt.borrowObject(xo);l.target=this._armature.animation.getBlendState(Ae.SURFACE,i.name,i),l.init(this._armature,this,a),this._boneBlendTimelines.push(l);break}}else if(this.resetToPose)if(((t=i._boneData)==null?void 0:t.type)===_e.Bone){const a=nt.borrowObject(yo);a.target=o,a.init(this._armature,this,null),this._boneTimelines.push(a),this._poseTimelines.push(a)}else{const a=nt.borrowObject(xo);a.target=this._armature.animation.getBlendState(Ae.SURFACE,i.name,i),a.init(this._armature,this,null),this._boneBlendTimelines.push(a),this._poseTimelines.push(a)}}}for(let i in e)for(const n of e[i]){let s=this._boneTimelines.indexOf(n);s>=0&&(this._boneTimelines.splice(s,1),n.returnToPool()),s=this._boneBlendTimelines.indexOf(n),s>=0&&(this._boneBlendTimelines.splice(s,1),n.returnToPool())}}{const e={},i=[];for(const n of this._slotTimelines){const s=n.target.name;s in e||(e[s]=[]),e[s].push(n)}for(const n of this._slotBlendTimelines){const s=n.target.target.name;s in e||(e[s]=[]),e[s].push(n)}for(const n of this._armature.getSlots()){const s=n.parent.name;if(!this.containsBoneMask(s))continue;const o=n.name;if(o in e)delete e[o];else{let a=!1,l=!1;i.length=0;const h=this._animationData.getSlotTimelines(o);if(h!==null)for(const u of h)switch(u.type){case st.SlotDisplay:{const c=nt.borrowObject(bo);c.target=n,c.init(this._armature,this,u),this._slotTimelines.push(c),a=!0;break}case st.SlotZIndex:{const c=nt.borrowObject(Um);c.target=this._armature.animation.getBlendState(Ae.SLOT_Z_INDEX,n.name,n),c.init(this._armature,this,u),this._slotBlendTimelines.push(c);break}case st.SlotColor:{const c=nt.borrowObject(So);c.target=n,c.init(this._armature,this,u),this._slotTimelines.push(c),l=!0;break}case st.SlotDeform:{if(this._animationData.parent===null)throw new Error("this._animationData.parent is null.");const c=this._animationData.parent.parent;if(c===null)throw new Error("dragonBonesData is null.");const f=c.timelineArray;if(f===null)throw new Error("timelineArray is null.");const _=this._animationData.frameIntOffset+f[u.offset+it.TimelineFrameValueCount],y=c.frameIntArray;if(_===null)throw new Error("frameIntOffset is null.");if(y===null)throw new Error("frameIntArray is null.");let p=y[_+it.DeformVertexOffset];p<0&&(p+=65536);for(let m=0,x=n.displayFrameCount;m<x;++m){const M=n.getDisplayFrameAt(m),b=M.getGeometryData();if(b!==null&&b.offset===p){const S=nt.borrowObject(Mo);S.target=this._armature.animation.getBlendState(Ae.SLOT_DEFORM,M.rawDisplayData.name,n),S.displayFrame=M,S.init(this._armature,this,u),this._slotBlendTimelines.push(S),M.updateDeformVertices(),i.push(p);break}}break}case st.SlotAlpha:{const c=nt.borrowObject(vo);c.target=this._armature.animation.getBlendState(Ae.SLOT_ALPHA,n.name,n),c.init(this._armature,this,u),this._slotBlendTimelines.push(c);break}}if(this.resetToPose){if(!a){const u=nt.borrowObject(bo);u.target=n,u.init(this._armature,this,null),this._slotTimelines.push(u),this._poseTimelines.push(u)}if(!l){const u=nt.borrowObject(So);u.target=n,u.init(this._armature,this,null),this._slotTimelines.push(u),this._poseTimelines.push(u)}for(let u=0,c=n.displayFrameCount;u<c;++u){const f=n.getDisplayFrameAt(u);if(f.deformVertices.length===0)continue;const _=f.getGeometryData();if(_!==null&&i.indexOf(_.offset)<0){const y=nt.borrowObject(Mo);y.displayFrame=f,y.target=this._armature.animation.getBlendState(Ae.SLOT_DEFORM,n.name,n),y.init(this._armature,this,null),this._slotBlendTimelines.push(y),this._poseTimelines.push(y)}}}}}for(let n in e)for(const s of e[n]){let o=this._slotTimelines.indexOf(s);o>=0&&(this._slotTimelines.splice(o,1),s.returnToPool()),o=this._slotBlendTimelines.indexOf(s),o>=0&&(this._slotBlendTimelines.splice(o,1),s.returnToPool())}}}_advanceFadeTime(t){const e=this._fadeState>0;if(this._subFadeState<0&&(this._subFadeState=0,this._parent===null&&this.actionEnabled)){const i=e?Nt.FADE_OUT:Nt.FADE_IN;if(this._armature===null)throw new Error("this._armature is null.");if(this._armature._dragonBones===null)throw new Error("this._armature._dragonBones is null.");if(this._armature.eventDispatcher.hasDBEventListener(i)){const n=nt.borrowObject(Nt);n.type=i,n.armature=this._armature,n.animationState=this,this._armature._dragonBones.bufferEvent(n)}}if(t<0&&(t=-t),this._fadeTime+=t,this._fadeTime>=this.fadeTotalTime?(this._subFadeState=1,this._fadeProgress=e?0:1):this._fadeTime>0?this._fadeProgress=e?1-this._fadeTime/this.fadeTotalTime:this._fadeTime/this.fadeTotalTime:this._fadeProgress=e?1:0,this._subFadeState>0&&(e||(this._playheadState|=1,this._fadeState=0),this._parent===null&&this.actionEnabled)){const i=e?Nt.FADE_OUT_COMPLETE:Nt.FADE_IN_COMPLETE;if(this._armature===null)throw new Error("this._armature is null.");if(this._armature._dragonBones===null)throw new Error("this._armature._dragonBones is null.");if(this._armature.eventDispatcher.hasDBEventListener(i)){const n=nt.borrowObject(Nt);n.type=i,n.armature=this._armature,n.animationState=this,this._armature._dragonBones.bufferEvent(n)}}}init(t,e,i){if(this._armature===null){if(this._armature=t,this._animationData=e,this.resetToPose=i.resetToPose,this.additive=i.additive,this.displayControl=i.displayControl,this.actionEnabled=i.actionEnabled,this.blendType=e.blendType,this.layer=i.layer,this.playTimes=i.playTimes,this.timeScale=i.timeScale,this.fadeTotalTime=i.fadeInTime,this.autoFadeOutTime=i.autoFadeOutTime,this.name=i.name.length>0?i.name:i.animation,this.group=i.group,this._weight=i.weight,i.pauseFadeIn?this._playheadState=2:this._playheadState=3,i.duration<0?(this._position=0,this._duration=this._animationData.duration,i.position!==0?this.timeScale>=0?this._time=i.position:this._time=i.position-this._duration:this._time=0):(this._position=i.position,this._duration=i.duration,this._time=0),this.timeScale<0&&this._time===0&&(this._time=-1e-6),this.fadeTotalTime<=0&&(this._fadeProgress=.999999),i.boneMask.length>0){this._boneMask.length=i.boneMask.length;for(let n=0,s=this._boneMask.length;n<s;++n)this._boneMask[n]=i.boneMask[n]}this._actionTimeline=nt.borrowObject(Lm),this._actionTimeline.init(this._armature,this,this._animationData.actionTimeline),this._actionTimeline.currentTime=this._time,this._actionTimeline.currentTime<0&&(this._actionTimeline.currentTime=this._duration-this._actionTimeline.currentTime),this._animationData.zOrderTimeline!==null&&(this._zOrderTimeline=nt.borrowObject(Om),this._zOrderTimeline.init(this._armature,this,this._animationData.zOrderTimeline))}}advanceTime(t,e){(this._fadeState!==0||this._subFadeState!==0)&&this._advanceFadeTime(t),this._playheadState===3&&(this.timeScale!==1&&(t*=this.timeScale),this._time+=t),this._timelineDirty!==0&&(this._timelineDirty===2&&this._updateTimelines(),this._timelineDirty=0,this._updateBoneAndSlotTimelines());const i=this._fadeState!==0||this._subFadeState===0,n=this._fadeState===0&&e>0;let s=!0,o=!0,a=this._time;if(this._weightResult=this._weight*this._fadeProgress,this._parent!==null&&(this._weightResult*=this._parent._weightResult),this._actionTimeline===null)throw new Error("this._actionTimeline is null.");if(this._actionTimeline.playState<=0&&this._actionTimeline.update(a),this._weight!==0){if(n){const l=e*2;this._actionTimeline.currentTime=Math.floor(this._actionTimeline.currentTime*l)/l}if(this._zOrderTimeline!==null&&this._zOrderTimeline.playState<=0&&this._zOrderTimeline.update(a),this._armature===null)throw new Error("this._armature is null.");if(this._animationData===null)throw new Error("this._animationData is null.");if(n){const l=Math.floor(this._actionTimeline.currentTime*e);this._armature._cacheFrameIndex===l?(s=!1,o=!1):(this._armature._cacheFrameIndex=l,this._animationData.cachedFrames[l]?o=!1:this._animationData.cachedFrames[l]=!0)}if(s){let l=!1,h=null;if(o)for(let u=0,c=this._boneTimelines.length;u<c;++u){const f=this._boneTimelines[u];if(f.playState<=0&&f.update(a),f.target!==h){const _=f.target;if(l=_.update(this),h=_,_.dirty===1){const y=_.target.animationPose;y.x=0,y.y=0,y.rotation=0,y.skew=0,y.scaleX=1,y.scaleY=1}}l&&f.blend(i)}for(let u=0,c=this._boneBlendTimelines.length;u<c;++u){const f=this._boneBlendTimelines[u];f.playState<=0&&f.update(a),f.target.update(this)&&f.blend(i)}if(this.displayControl)for(let u=0,c=this._slotTimelines.length;u<c;++u){const f=this._slotTimelines[u];if(f.playState<=0){const _=f.target.displayController;(_===null||_===this.name||_===this.group)&&f.update(a)}}for(let u=0,c=this._slotBlendTimelines.length;u<c;++u){const f=this._slotBlendTimelines[u];if(f.playState<=0){const _=f.target;f.update(a),_.update(this)&&f.blend(i)}}for(let u=0,c=this._constraintTimelines.length;u<c;++u){const f=this._constraintTimelines[u];f.playState<=0&&f.update(a)}if(this._animationTimelines.length>0){let u=100,c=100,f=null,_=null;for(let y=0,p=this._animationTimelines.length;y<p;++y){const m=this._animationTimelines[y];if(m.playState<=0&&m.update(a),this.blendType===Ye.E1D){const x=m.target,M=this.parameterX-x.positionX;M>=0?M<u&&(u=M,f=x):-M<c&&(c=-M,_=x)}}f!==null&&(this._activeChildA!==f&&(this._activeChildA!==null&&(this._activeChildA.weight=0),this._activeChildA=f,this._activeChildA.activeTimeline()),this._activeChildB!==_&&(this._activeChildB!==null&&(this._activeChildB.weight=0),this._activeChildB=_),f.weight=c/(u+c),_&&(_.weight=1-f.weight))}}if(this._fadeState===0){if(this._subFadeState>0&&(this._subFadeState=0,this._poseTimelines.length>0)){for(const l of this._poseTimelines){let h=this._boneTimelines.indexOf(l);if(h>=0){this._boneTimelines.splice(h,1),l.returnToPool();continue}if(h=this._boneBlendTimelines.indexOf(l),h>=0){this._boneBlendTimelines.splice(h,1),l.returnToPool();continue}if(h=this._slotTimelines.indexOf(l),h>=0){this._slotTimelines.splice(h,1),l.returnToPool();continue}if(h=this._slotBlendTimelines.indexOf(l),h>=0){this._slotBlendTimelines.splice(h,1),l.returnToPool();continue}if(h=this._constraintTimelines.indexOf(l),h>=0){this._constraintTimelines.splice(h,1),l.returnToPool();continue}}this._poseTimelines.length=0}this._actionTimeline.playState>0&&this.autoFadeOutTime>=0&&this.fadeOut(this.autoFadeOutTime)}}}play(){this._playheadState=3}stop(){this._playheadState&=1}fadeOut(t,e=!0){if(t<0&&(t=0),e&&(this._playheadState&=2),this._fadeState>0){if(t>this.fadeTotalTime-this._fadeTime)return}else{this._fadeState=1,this._subFadeState=-1,(t<=0||this._fadeProgress<=0)&&(this._fadeProgress=1e-6);for(const i of this._boneTimelines)i.fadeOut();for(const i of this._boneBlendTimelines)i.fadeOut();for(const i of this._slotTimelines)i.fadeOut();for(const i of this._slotBlendTimelines)i.fadeOut();for(const i of this._constraintTimelines)i.fadeOut();for(const i of this._animationTimelines)i.fadeOut(),i.target.fadeOut(999999,!0)}this.displayControl=!1,this.fadeTotalTime=this._fadeProgress>1e-6?t/this._fadeProgress:0,this._fadeTime=this.fadeTotalTime*(1-this._fadeProgress)}containsBoneMask(t){return this._boneMask.length===0||this._boneMask.indexOf(t)>=0}addBoneMask(t,e=!0){if(this._armature===null)throw new Error("this._armature is null.");const i=this._armature.getBone(t);if(i!==null){if(this._boneMask.indexOf(t)<0&&this._boneMask.push(t),e)for(const n of this._armature.getBones())this._boneMask.indexOf(n.name)<0&&i.contains(n)&&this._boneMask.push(n.name);this._timelineDirty=1}}removeBoneMask(t,e=!0){const i=this._boneMask.indexOf(t);if(i>=0&&this._boneMask.splice(i,1),this._armature===null)throw new Error("this._armature is null.");if(e){const n=this._armature.getBone(t);if(n!==null){const s=this._armature.getBones();if(this._boneMask.length>0)for(const o of s){const a=this._boneMask.indexOf(o.name);a>=0&&n.contains(o)&&this._boneMask.splice(a,1)}else for(const o of s)o!==n&&(n.contains(o)||this._boneMask.push(o.name))}}this._timelineDirty=1}removeAllBoneMask(){this._boneMask.length=0,this._timelineDirty=1}addState(t,e=null){if(e!==null){if(this._armature===null)throw new Error("this._armature is null.");for(const i of e)switch(i.type){case st.AnimationProgress:{const n=nt.borrowObject(zm);if(n.target=t,n.init(this._armature,this,i),this._animationTimelines.push(n),this.blendType!==Ye.None){const s=i;t.positionX=s.x,t.positionY=s.y,t.weight=0}t._parent=this,this.resetToPose=!1;break}case st.AnimationWeight:{const n=nt.borrowObject(km);n.target=t,n.init(this._armature,this,i),this._animationTimelines.push(n);break}case st.AnimationParameter:{const n=nt.borrowObject(Vm);n.target=t,n.init(this._armature,this,i),this._animationTimelines.push(n);break}}}t._parent===null&&(t._parent=this)}activeTimeline(){for(const t of this._slotTimelines)t.dirty=!0,t.currentTime=-1}get isFadeIn(){return this._fadeState<0}get isFadeOut(){return this._fadeState>0}get isFadeComplete(){return this._fadeState===0}get isPlaying(){if(this._actionTimeline===null)throw new Error("this._actionTimeline is null.");return(this._playheadState&2)!==0&&this._actionTimeline.playState<=0}get isCompleted(){if(this._actionTimeline===null)throw new Error("this._actionTimeline is null.");return this._actionTimeline.playState>0}get currentPlayTimes(){if(this._actionTimeline===null)throw new Error("this._actionTimeline is null.");return this._actionTimeline.currentPlayTimes}get totalTime(){return this._duration}get currentTime(){if(this._actionTimeline===null)throw new Error("this._actionTimeline is null.");return this._actionTimeline.currentTime}set currentTime(t){if(this._actionTimeline===null)throw new Error("this._actionTimeline is null.");const e=this._actionTimeline.currentPlayTimes-(this._actionTimeline.playState>0?1:0);if((t<0||this._duration<t)&&(t=t%this._duration+e*this._duration,t<0&&(t+=this._duration)),this.playTimes>0&&e===this.playTimes-1&&t===this._duration&&this._parent===null&&(t=this._duration-1e-6),this._time!==t){this._time=t,this._actionTimeline.setCurrentTime(this._time),this._zOrderTimeline!==null&&(this._zOrderTimeline.playState=-1);for(const i of this._boneTimelines)i.playState=-1;for(const i of this._slotTimelines)i.playState=-1}}get weight(){return this._weight}set weight(t){if(this._weight!==t){this._weight=t;for(const e of this._boneTimelines)e.dirty=!0;for(const e of this._boneBlendTimelines)e.dirty=!0;for(const e of this._slotBlendTimelines)e.dirty=!0}}get animationData(){if(this._animationData===null)throw new Error("this._animationData is null.");return this._animationData}}class Ae extends nt{constructor(){super(...arguments),d(this,"dirty",0),d(this,"layer",0),d(this,"leftWeight",0),d(this,"layerWeight",0),d(this,"blendWeight",0),d(this,"target",null)}static toString(){return"[class dragonBones.BlendState]"}_onClear(){this.reset(),this.target=null}update(t){const e=t.layer;let i=t._weightResult;if(this.dirty>0){if(this.leftWeight>0){if(this.layer!==e){if(this.layerWeight>=this.leftWeight)return this.dirty++,this.layer=e,this.leftWeight=0,this.blendWeight=0,!1;this.layer=e,this.leftWeight-=this.layerWeight,this.layerWeight=0}return i*=this.leftWeight,this.dirty++,this.blendWeight=i,this.layerWeight+=this.blendWeight,!0}return!1}return this.dirty++,this.layer=e,this.leftWeight=1,this.blendWeight=i,this.layerWeight=i,!0}reset(){this.dirty=0,this.layer=0,this.leftWeight=0,this.layerWeight=0,this.blendWeight=0}}d(Ae,"BONE_TRANSFORM","boneTransform"),d(Ae,"BONE_ALPHA","boneAlpha"),d(Ae,"SURFACE","surface"),d(Ae,"SLOT_DEFORM","slotDeform"),d(Ae,"SLOT_ALPHA","slotAlpha"),d(Ae,"SLOT_Z_INDEX","slotZIndex");class Wm extends nt{constructor(){super(...arguments),d(this,"timeScale",1),d(this,"_animationDirty",!1),d(this,"_inheritTimeScale",1),d(this,"_animationNames",[]),d(this,"_animationStates",[]),d(this,"_animations",{}),d(this,"_blendStates",{}),d(this,"_armature",null),d(this,"_animationConfig",null),d(this,"_lastAnimationState",null)}static toString(){return"[class dragonBones.Animation]"}_onClear(){for(const t of this._animationStates)t.returnToPool();for(let t in this._animations)delete this._animations[t];for(let t in this._blendStates){const e=this._blendStates[t];for(let i in e)e[i].returnToPool();delete this._blendStates[t]}this._animationConfig!==null&&this._animationConfig.returnToPool(),this.timeScale=1,this._animationDirty=!1,this._inheritTimeScale=1,this._animationNames.length=0,this._animationStates.length=0,this._armature=null,this._animationConfig=null,this._lastAnimationState=null}_fadeOut(t){switch(t.fadeOutMode){case Je.SameLayer:for(const e of this._animationStates)e._parent===null&&e.layer===t.layer&&e.fadeOut(t.fadeOutTime,t.pauseFadeOut);break;case Je.SameGroup:for(const e of this._animationStates)e._parent===null&&e.group===t.group&&e.fadeOut(t.fadeOutTime,t.pauseFadeOut);break;case Je.SameLayerAndGroup:for(const e of this._animationStates)e._parent===null&&e.layer===t.layer&&e.group===t.group&&e.fadeOut(t.fadeOutTime,t.pauseFadeOut);break;case Je.All:for(const e of this._animationStates)e._parent===null&&e.fadeOut(t.fadeOutTime,t.pauseFadeOut);break;case Je.Single:}}init(t){this._armature===null&&(this._armature=t,this._animationConfig=nt.borrowObject(Rm))}advanceTime(t){if(t<0&&(t=-t),this._armature===null)throw new Error("this._armature is null.");if(this._armature.inheritAnimation&&this._armature._parent!==null){if(this._armature._parent._armature===null)throw new Error(" this._armature._parent._armature is null.");this._inheritTimeScale=this._armature._parent._armature.animation._inheritTimeScale*this.timeScale}else this._inheritTimeScale=this.timeScale;this._inheritTimeScale!==1&&(t*=this._inheritTimeScale);for(let i in this._blendStates){const n=this._blendStates[i];for(let s in n)n[s].reset()}const e=this._animationStates.length;if(e===1){const i=this._animationStates[0];if(i._fadeState>0&&i._subFadeState>0){if(this._armature._dragonBones===null)throw new Error("this._armature._dragonBones is null.");this._armature._dragonBones.bufferObject(i),this._animationStates.length=0,this._lastAnimationState=null}else{const n=i.animationData,s=n.cacheFrameRate;if(this._animationDirty&&s>0){this._animationDirty=!1;for(const o of this._armature.getBones())o._cachedFrameIndices=n.getBoneCachedFrameIndices(o.name);for(const o of this._armature.getSlots()){if(o.displayFrameCount>0){const a=o.getDisplayFrameAt(0).rawDisplayData;if(a!==null&&a.parent===this._armature.armatureData.defaultSkin){o._cachedFrameIndices=n.getSlotCachedFrameIndices(o.name);continue}}o._cachedFrameIndices=null}}i.advanceTime(t,s)}}else if(e>1){for(let i=0,n=0;i<e;++i){const s=this._animationStates[i];if(s._fadeState>0&&s._subFadeState>0){if(n++,this._armature._dragonBones===null)throw new Error("this._armature._dragonBones is null.");this._armature._dragonBones.bufferObject(s),this._animationDirty=!0,this._lastAnimationState===s&&(this._lastAnimationState=null)}else n>0&&(this._animationStates[i-n]=s),s.advanceTime(t,0);i===e-1&&n>0&&(this._animationStates.length-=n,this._lastAnimationState===null&&this._animationStates.length>0&&(this._lastAnimationState=this._animationStates[this._animationStates.length-1]))}this._armature._cacheFrameIndex=-1}else this._armature._cacheFrameIndex=-1}reset(){var t;for(const e of this._animationStates)e.returnToPool();this._animationDirty=!1,(t=this._animationConfig)==null||t.clear(),this._animationStates.length=0,this._lastAnimationState=null}stop(t=null){if(t!==null){const e=this.getState(t);e!==null&&e.stop()}else for(const e of this._animationStates)e.stop()}playConfig(t){const e=t.animation;if(!(e in this._animations))return null;const i=this._animations[e];if(t.fadeOutMode===Je.Single){for(const s of this._animationStates)if(s._fadeState<1&&s.layer===t.layer&&s.animationData===i)return s}this._animationStates.length===0?t.fadeInTime=0:t.fadeInTime<0&&(t.fadeInTime=i.fadeInTime),t.fadeOutTime<0&&(t.fadeOutTime=t.fadeInTime),t.timeScale<=-100&&(t.timeScale=1/i.scale),i.frameCount>0?(t.position<0?(t.position%=i.duration,t.position=i.duration-t.position):t.position===i.duration?t.position-=1e-6:t.position>i.duration&&(t.position%=i.duration),t.duration>0&&t.position+t.duration>i.duration&&(t.duration=i.duration-t.position),t.playTimes<0&&(t.playTimes=i.playTimes)):(t.playTimes=1,t.position=0,t.duration>0&&(t.duration=0)),t.duration===0&&(t.duration=-1),this._fadeOut(t);const n=nt.borrowObject(Gm);if(this._armature===null)throw new Error("this._armature is null.");if(n.init(this._armature,i,t),this._animationDirty=!0,this._armature._cacheFrameIndex=-1,this._animationStates.length>0){let s=!1;for(let o=0,a=this._animationStates.length;o<a;++o)if(n.layer>this._animationStates[o].layer){s=!0,this._animationStates.splice(o,0,n);break}else if(o!==a-1&&n.layer>this._animationStates[o+1].layer){s=!0,this._animationStates.splice(o+1,0,n);break}s||this._animationStates.push(n)}else this._animationStates.push(n);for(const s of this._armature.getSlots()){const o=s.childArmature;o!==null&&o.inheritAnimation&&o.animation.hasAnimation(e)&&o.animation.getState(e)===null&&o.animation.fadeIn(e)}for(let s in i.animationTimelines){const o=this.fadeIn(s,0,1,n.layer,"",Je.Single);if(o===null)continue;const a=i.animationTimelines[s];o.actionEnabled=!1,o.resetToPose=!1,o.stop(),n.addState(o,a);const l=this._animationStates.indexOf(n),h=this._animationStates.indexOf(o);h<l&&(this._animationStates.splice(l,1),this._animationStates.splice(h,0,n))}return this._lastAnimationState=n,n}play(t=null,e=-1){if(this._animationConfig===null)throw new Error("this._animationConfig is null.");if(this._animationConfig.clear(),this._animationConfig.resetToPose=!0,this._animationConfig.playTimes=e,this._animationConfig.fadeInTime=0,this._animationConfig.animation=t!==null?t:"",t!==null&&t.length>0)this.playConfig(this._animationConfig);else if(this._lastAnimationState===null){if(this._armature===null)throw new Error("this._armature is null.");const i=this._armature.armatureData.defaultAnimation;i!==null&&(this._animationConfig.animation=i.name,this.playConfig(this._animationConfig))}else!this._lastAnimationState.isPlaying&&!this._lastAnimationState.isCompleted?this._lastAnimationState.play():(this._animationConfig.animation=this._lastAnimationState.name,this.playConfig(this._animationConfig));return this._lastAnimationState}fadeIn(t,e=-1,i=-1,n=0,s=null,o=Je.SameLayerAndGroup){if(this._animationConfig===null)throw new Error("this._animationConfig is null.");return this._animationConfig.clear(),this._animationConfig.fadeOutMode=o,this._animationConfig.playTimes=i,this._animationConfig.layer=n,this._animationConfig.fadeInTime=e,this._animationConfig.animation=t,this._animationConfig.group=s!==null?s:"",this.playConfig(this._animationConfig)}gotoAndPlayByTime(t,e=0,i=-1){if(this._animationConfig===null)throw new Error("this._animationConfig is null.");return this._animationConfig.clear(),this._animationConfig.resetToPose=!0,this._animationConfig.playTimes=i,this._animationConfig.position=e,this._animationConfig.fadeInTime=0,this._animationConfig.animation=t,this.playConfig(this._animationConfig)}gotoAndPlayByFrame(t,e=0,i=-1){if(this._animationConfig===null)throw new Error("this._animationConfig is null.");this._animationConfig.clear(),this._animationConfig.resetToPose=!0,this._animationConfig.playTimes=i,this._animationConfig.fadeInTime=0,this._animationConfig.animation=t;const n=t in this._animations?this._animations[t]:null;return n!==null&&(this._animationConfig.position=n.frameCount>0?n.duration*e/n.frameCount:0),this.playConfig(this._animationConfig)}gotoAndPlayByProgress(t,e=0,i=-1){if(this._animationConfig===null)throw new Error("this._animationConfig is null.");this._animationConfig.clear(),this._animationConfig.resetToPose=!0,this._animationConfig.playTimes=i,this._animationConfig.fadeInTime=0,this._animationConfig.animation=t;const n=t in this._animations?this._animations[t]:null;return n!==null&&(this._animationConfig.position=n.duration*(e>0?e:0)),this.playConfig(this._animationConfig)}gotoAndStopByTime(t,e=0){const i=this.gotoAndPlayByTime(t,e,1);return i!==null&&i.stop(),i}gotoAndStopByFrame(t,e=0){const i=this.gotoAndPlayByFrame(t,e,1);return i!==null&&i.stop(),i}gotoAndStopByProgress(t,e=0){const i=this.gotoAndPlayByProgress(t,e,1);return i!==null&&i.stop(),i}getBlendState(t,e,i){t in this._blendStates||(this._blendStates[t]={});const n=this._blendStates[t];if(!(e in n)){const s=n[e]=nt.borrowObject(Ae);s.target=i}return n[e]}getState(t,e=-1){let i=this._animationStates.length;for(;i--;){const n=this._animationStates[i];if(n.name===t&&(e<0||n.layer===e))return n}return null}hasAnimation(t){return t in this._animations}getStates(){return this._animationStates}get isPlaying(){for(const t of this._animationStates)if(t.isPlaying)return!0;return!1}get isCompleted(){for(const t of this._animationStates)if(!t.isCompleted)return!1;return this._animationStates.length>0}get lastAnimationName(){return this._lastAnimationState!==null?this._lastAnimationState.name:""}get animationNames(){return this._animationNames}get animations(){return this._animations}set animations(t){if(this._animations!==t){this._animationNames.length=0;for(let e in this._animations)delete this._animations[e];for(let e in t)this._animationNames.push(e),this._animations[e]=t[e]}}get animationConfig(){if(this._animationConfig===null)throw new Error("this._animationConfig is null.");return this._animationConfig.clear(),this._animationConfig}get lastAnimationState(){return this._lastAnimationState}}class wi extends nt{constructor(){super(...arguments),d(this,"inheritAnimation",!0),d(this,"userData",null),d(this,"_lockUpdate",!1),d(this,"_slotsDirty",!0),d(this,"_zOrderDirty",!1),d(this,"_zIndexDirty",!1),d(this,"_alphaDirty",!0),d(this,"_flipX",!1),d(this,"_flipY",!1),d(this,"_cacheFrameIndex",-1),d(this,"_alpha",1),d(this,"_globalAlpha",1),d(this,"_bones",[]),d(this,"_slots",[]),d(this,"_constraints",[]),d(this,"_actions",[]),d(this,"_armatureData",null),d(this,"_animation",null),d(this,"_proxy",null),d(this,"_display",null),d(this,"_replaceTextureAtlasData",null),d(this,"_replacedTexture",null),d(this,"_dragonBones",null),d(this,"_clock",null),d(this,"_parent",null)}static toString(){return"[class dragonBones.Armature]"}static _onSortSlots(t,e){return t._zIndex*1e3+t._zOrder>e._zIndex*1e3+e._zOrder?1:-1}_onClear(){this._clock!==null&&this._clock.remove(this);for(const t of this._bones)t.returnToPool();for(const t of this._slots)t.returnToPool();for(const t of this._constraints)t.returnToPool();for(const t of this._actions)t.returnToPool();this._animation!==null&&this._animation.returnToPool(),this._proxy!==null&&this._proxy.dbClear(),this._replaceTextureAtlasData!==null&&this._replaceTextureAtlasData.returnToPool(),this.inheritAnimation=!0,this.userData=null,this._lockUpdate=!1,this._slotsDirty=!0,this._zOrderDirty=!1,this._zIndexDirty=!1,this._alphaDirty=!0,this._flipX=!1,this._flipY=!1,this._cacheFrameIndex=-1,this._alpha=1,this._globalAlpha=1,this._bones.length=0,this._slots.length=0,this._constraints.length=0,this._actions.length=0,this._armatureData=null,this._animation=null,this._proxy=null,this._display=null,this._replaceTextureAtlasData=null,this._replacedTexture=null,this._dragonBones=null,this._clock=null,this._parent=null}_sortZOrder(t,e){if(this._armatureData===null)throw new Error("this._armatureData is undefined.");const i=this._armatureData.sortedSlots,n=t===null;if(this._zOrderDirty||!n){for(let s=0,o=i.length;s<o;++s){const a=n?s:t[e+s];if(a<0||a>=o)continue;const l=i[a],h=this.getSlot(l.name);h!==null&&h._setZOrder(s)}this._slotsDirty=!0,this._zOrderDirty=!n}}_addBone(t){this._bones.indexOf(t)<0&&this._bones.push(t)}_addSlot(t){this._slots.indexOf(t)<0&&this._slots.push(t)}_addConstraint(t){this._constraints.indexOf(t)<0&&this._constraints.push(t)}_bufferAction(t,e){this._actions.indexOf(t)<0&&(e?this._actions.push(t):this._actions.unshift(t))}dispose(){if(this._dragonBones===null)throw new Error(" this._dragonBones is null.");this._armatureData!==null&&(this._lockUpdate=!0,this._dragonBones.bufferObject(this))}init(t,e,i,n){this._armatureData===null&&(this._armatureData=t,this._animation=nt.borrowObject(Wm),this._proxy=e,this._display=i,this._dragonBones=n,this._proxy.dbInit(this),this._animation.init(this),this._animation.animations=this._armatureData.animations)}advanceTime(t){if(this._lockUpdate)return;if(this._lockUpdate=!0,this._armatureData===null){console.warn("The armature has been disposed.");return}else if(this._armatureData.parent===null){console.warn(`The armature data has been disposed.
Please make sure dispose armature before call factory.clear().`);return}const e=this._cacheFrameIndex;if(this._animation.advanceTime(t),this._slotsDirty||this._zIndexDirty){if(this._slots.sort(wi._onSortSlots),this._zIndexDirty)for(let i=0,n=this._slots.length;i<n;++i)this._slots[i]._setZOrder(i);this._slotsDirty=!1,this._zIndexDirty=!1}if(this._alpha===void 0)throw new Error(" this._alpha is undefined.");if(this._alphaDirty){this._alphaDirty=!1,this._globalAlpha=this._alpha*(this._parent!==null?this._parent._globalAlpha:1);for(const i of this._bones)i._updateAlpha();for(const i of this._slots)i._updateAlpha()}if(this._cacheFrameIndex===void 0)throw new Error(" this._cacheFrameIndex is undefined.");if(this._cacheFrameIndex<0||this._cacheFrameIndex!==e){let i=0,n=0;for(i=0,n=this._bones.length;i<n;++i)this._bones[i].update(this._cacheFrameIndex);for(i=0,n=this._slots.length;i<n;++i)this._slots[i].update(this._cacheFrameIndex)}if(this._actions.length>0){for(const i of this._actions){const n=i.actionData;if(n!==null&&n.type===Kt.Play)if(i.slot!==null){const s=i.slot.childArmature;s!==null&&s.animation.fadeIn(n.name)}else if(i.bone!==null){for(const s of this.getSlots())if(s.parent===i.bone){const o=s.childArmature;o!==null&&o.animation.fadeIn(n.name)}}else this._animation.fadeIn(n.name);i.returnToPool()}this._actions.length=0}if(this._lockUpdate=!1,this._proxy===null)throw new Error("this._proxy is null.");this._proxy.dbUpdate()}invalidUpdate(t=null,e=!1){if(t!==null&&t.length>0){const i=this.getBone(t);if(i!==null&&(i.invalidUpdate(),e))for(const n of this._slots)n.parent===i&&n.invalidUpdate()}else{for(const i of this._bones)i.invalidUpdate();if(e)for(const i of this._slots)i.invalidUpdate()}}containsPoint(t,e){for(const i of this._slots)if(i.containsPoint(t,e))return i;return null}intersectsSegment(t,e,i,n,s=null,o=null,a=null){const l=t===i;let h=0,u=0,c=0,f=0,_=0,y=0,p=0,m=0,x=null,M=null;for(const b of this._slots)if(b.intersectsSegment(t,e,i,n,s,o,a)>0)if(s!==null||o!==null){if(s!==null){let S=l?s.y-e:s.x-t;S<0&&(S=-S),(x===null||S<h)&&(h=S,c=s.x,f=s.y,x=b,a&&(p=a.x))}if(o!==null){let S=o.x-t;S<0&&(S=-S),(M===null||S>u)&&(u=S,_=o.x,y=o.y,M=b,a!==null&&(m=a.y))}}else{x=b;break}return x!==null&&s!==null&&(s.x=c,s.y=f,a!==null&&(a.x=p)),M!==null&&o!==null&&(o.x=_,o.y=y,a!==null&&(a.y=m)),x}getBone(t){for(const e of this._bones)if(e.name===t)return e;return null}getBoneByDisplay(t){const e=this.getSlotByDisplay(t);return e!==null?e.parent:null}getSlot(t){for(const e of this._slots)if(e.name===t)return e;return null}getSlotByDisplay(t){if(t!==null){for(const e of this._slots)if(e.display===t)return e}return null}getBones(){return this._bones}getSlots(){return this._slots}get flipX(){if(this._flipX===void 0)throw new Error("this._flipX is undefined.");return this._flipX}set flipX(t){this._flipX!==t&&(this._flipX=t,this.invalidUpdate())}get flipY(){if(this._flipY===void 0)throw new Error("this._flipY is undefined.");return this._flipY}set flipY(t){this._flipY!==t&&(this._flipY=t,this.invalidUpdate())}get cacheFrameRate(){if(this._armatureData===null)throw new Error("this._armatureData is undefined.");if(this._armatureData.cacheFrameRate===void 0)throw new Error("this._armatureData.cacheFrameRate is undefined.");return this._armatureData.cacheFrameRate}set cacheFrameRate(t){if(this._armatureData===null)throw new Error("this._armatureData is undefined.");if(this._armatureData.cacheFrameRate!==t){this._armatureData.cacheFrames(t);for(const e of this._slots){const i=e.childArmature;i!==null&&(i.cacheFrameRate=t)}}}get name(){if(this._armatureData===null)throw new Error("this._armatureData is undefined.");if(this._armatureData.name===void 0)throw new Error("this._armatureData.name is undefined.");return this._armatureData.name}get armatureData(){if(this._armatureData===null)throw new Error("this._armatureData is undefined.");return this._armatureData}get animation(){if(this._animation===null)throw new Error("this._animation is undefined.");return this._animation}get proxy(){if(this._proxy===null)throw new Error("this._proxy is undefined.");return this._proxy}get eventDispatcher(){if(this._proxy===null)throw new Error("this._proxy is undefined.");return this._proxy}get display(){return this._display}get replacedTexture(){return this._replacedTexture}set replacedTexture(t){if(this._replacedTexture!==t){this._replaceTextureAtlasData!==null&&(this._replaceTextureAtlasData.returnToPool(),this._replaceTextureAtlasData=null),this._replacedTexture=t;for(const e of this._slots)e.invalidUpdate(),e.update(-1)}}get clock(){return this._clock}set clock(t){if(this._clock!==t){this._clock!==null&&this._clock.remove(this),this._clock=t,this._clock&&this._clock.add(this);for(const e of this._slots){const i=e.childArmature;i!==null&&(i.clock=this._clock)}}}get parent(){return this._parent}getDisplay(){return this._display}}class Rn{constructor(t=1,e=0,i=0,n=1,s=0,o=0){d(this,"a"),d(this,"b"),d(this,"c"),d(this,"d"),d(this,"tx"),d(this,"ty"),this.a=t,this.b=e,this.c=i,this.d=n,this.tx=s,this.ty=o}toString(){return"[object dragonBones.Matrix] a:"+this.a+" b:"+this.b+" c:"+this.c+" d:"+this.d+" tx:"+this.tx+" ty:"+this.ty}copyFrom(t){return this.a=t.a,this.b=t.b,this.c=t.c,this.d=t.d,this.tx=t.tx,this.ty=t.ty,this}copyFromArray(t,e=0){return this.a=t[e],this.b=t[e+1],this.c=t[e+2],this.d=t[e+3],this.tx=t[e+4],this.ty=t[e+5],this}identity(){return this.a=this.d=1,this.b=this.c=0,this.tx=this.ty=0,this}concat(t){let e=this.a*t.a,i=0,n=0,s=this.d*t.d,o=this.tx*t.a+t.tx,a=this.ty*t.d+t.ty;return(this.b!==0||this.c!==0)&&(e+=this.b*t.c,i+=this.b*t.d,n+=this.c*t.a,s+=this.c*t.b),(t.b!==0||t.c!==0)&&(i+=this.a*t.b,n+=this.d*t.c,o+=this.ty*t.c,a+=this.tx*t.b),this.a=e,this.b=i,this.c=n,this.d=s,this.tx=o,this.ty=a,this}invert(){let t=this.a,e=this.b,i=this.c,n=this.d;const s=this.tx,o=this.ty;if(e===0&&i===0)return this.b=this.c=0,t===0||n===0?this.a=this.b=this.tx=this.ty=0:(t=this.a=1/t,n=this.d=1/n,this.tx=-t*s,this.ty=-n*o),this;let a=t*n-e*i;if(a===0)return this.a=this.d=1,this.b=this.c=0,this.tx=this.ty=0,this;a=1/a;let l=this.a=n*a;return e=this.b=-e*a,i=this.c=-i*a,n=this.d=t*a,this.tx=-(l*s+i*o),this.ty=-(e*s+n*o),this}transformPoint(t,e,i,n=!1){i.x=this.a*t+this.c*e,i.y=this.b*t+this.d*e,n||(i.x+=this.tx,i.y+=this.ty)}transformRectangle(t,e=!1){const i=this.a,n=this.b,s=this.c,o=this.d,a=e?0:this.tx,l=e?0:this.ty,h=t.x,u=t.y,c=h+t.width,f=u+t.height;let _=i*h+s*u+a,y=n*h+o*u+l,p=i*c+s*u+a,m=n*c+o*u+l,x=i*c+s*f+a,M=n*c+o*f+l,b=i*h+s*f+a,S=n*h+o*f+l,w=0;_>p&&(w=_,_=p,p=w),x>b&&(w=x,x=b,b=w),t.x=Math.floor(_<x?_:x),t.width=Math.ceil((p>b?p:b)-t.x),y>m&&(w=y,y=m,m=w),M>S&&(w=M,M=S,S=w),t.y=Math.floor(y<M?y:M),t.height=Math.ceil((m>S?m:S)-t.y)}}class Yr{constructor(t=0,e=0){d(this,"x"),d(this,"y"),this.x=t,this.y=e}copyFrom(t){this.x=t.x,this.y=t.y}clear(){this.x=this.y=0}}class Kn extends nt{constructor(){super(...arguments),d(this,"globalTransformMatrix",new Rn),d(this,"global",new Dt),d(this,"offset",new Dt),d(this,"origin",null),d(this,"userData"),d(this,"_globalDirty",!1),d(this,"_alpha",1),d(this,"_globalAlpha",1),d(this,"_armature",null)}_onClear(){this.globalTransformMatrix.identity(),this.global.identity(),this.offset.identity(),this.origin=null,this.userData=null,this._globalDirty=!1,this._alpha=1,this._globalAlpha=1,this._armature=null}updateGlobalTransform(){this._globalDirty&&(this._globalDirty=!1,this.global.fromMatrix(this.globalTransformMatrix))}get armature(){if(this._armature===null)throw new Error("this._armature is null.");return this._armature}}d(Kn,"_helpMatrix",new Rn),d(Kn,"_helpTransform",new Dt),d(Kn,"_helpPoint",new Yr);class ul extends Kn{constructor(){super(...arguments),d(this,"offsetMode",jn.Additive),d(this,"animationPose",new Dt),d(this,"_transformDirty",!1),d(this,"_childrenTransformDirty",!1),d(this,"_localDirty",!0),d(this,"_hasConstraint",!1),d(this,"_visible",!0),d(this,"_cachedFrameIndex",-1),d(this,"_boneData",null),d(this,"_parent",null),d(this,"_cachedFrameIndices",null)}static toString(){return"[class dragonBones.Bone]"}_onClear(){super._onClear(),this.offsetMode=jn.Additive,this.animationPose.identity(),this._transformDirty=!1,this._childrenTransformDirty=!1,this._localDirty=!0,this._hasConstraint=!1,this._visible=!0,this._cachedFrameIndex=-1,this._boneData=null,this._parent=null,this._cachedFrameIndices=null}_updateGlobalTransformMatrix(t){if(this._armature===null)throw new Error(" this._armature is null.");if(this.origin===void 0)throw new Error(" this.origin is undefined.");const e=this._boneData,i=this.global,n=this.globalTransformMatrix,s=this.origin,o=this.offset,a=this.animationPose,l=this._parent,h=this._armature.flipX,u=this._armature.flipY===Xe.yDown;let c=l!==null,f=0;if(this.offsetMode===jn.Additive?s!==null?(i.x=s.x+o.x+a.x,i.scaleX=s.scaleX*o.scaleX*a.scaleX,i.scaleY=s.scaleY*o.scaleY*a.scaleY,Xe.yDown?(i.y=s.y+o.y+a.y,i.skew=s.skew+o.skew+a.skew,i.rotation=s.rotation+o.rotation+a.rotation):(i.y=s.y-o.y+a.y,i.skew=s.skew-o.skew+a.skew,i.rotation=s.rotation-o.rotation+a.rotation)):(i.copyFrom(o),Xe.yDown||(i.y=-i.y,i.skew=-i.skew,i.rotation=-i.rotation),i.add(a)):this.offsetMode===jn.None?s!==null?i.copyFrom(s).add(a):i.copyFrom(a):(c=!1,i.copyFrom(o),Xe.yDown||(i.y=-i.y,i.skew=-i.skew,i.rotation=-i.rotation)),c){if(l._boneData===null)throw new Error("parent._boneData is undefined.");if(e===null)throw new Error("boneData is undefined.");const _=l._boneData.type===_e.Surface,y=_?l._bone:null,p=_?l._getGlobalTransformMatrix(i.x,i.y):l.globalTransformMatrix;if(e.inheritScale&&(!_||y!==null))_?(e.inheritRotation&&(i.rotation+=l.global.rotation),y.updateGlobalTransform(),i.scaleX*=y.global.scaleX,i.scaleY*=y.global.scaleY,p.transformPoint(i.x,i.y,i),i.toMatrix(n),e.inheritTranslation?(i.x=n.tx,i.y=n.ty):(n.tx=i.x,n.ty=i.y)):(e.inheritRotation||(l.updateGlobalTransform(),h&&u?f=i.rotation-(l.global.rotation+Math.PI):h?f=i.rotation+l.global.rotation+Math.PI:u?f=i.rotation+l.global.rotation:f=i.rotation-l.global.rotation,i.rotation=f),i.toMatrix(n),n.concat(p),e.inheritTranslation?(i.x=n.tx,i.y=n.ty):(n.tx=i.x,n.ty=i.y),t?i.fromMatrix(n):this._globalDirty=!0);else{if(e.inheritTranslation){const m=i.x,x=i.y;i.x=p.a*m+p.c*x+p.tx,i.y=p.b*m+p.d*x+p.ty}else h&&(i.x=-i.x),u&&(i.y=-i.y);e.inheritRotation?(l.updateGlobalTransform(),l.global.scaleX<0?f=i.rotation+l.global.rotation+Math.PI:f=i.rotation+l.global.rotation,p.a*p.d-p.b*p.c<0&&(f-=i.rotation*2,(h!==u||e.inheritReflection)&&(i.skew+=Math.PI),Xe.yDown||(i.skew=-i.skew)),i.rotation=f):(h||u)&&(h&&u?f=i.rotation+Math.PI:(h?f=Math.PI-i.rotation:f=-i.rotation,i.skew+=Math.PI),i.rotation=f),i.toMatrix(n)}}else(h||u)&&(h&&(i.x=-i.x),u&&(i.y=-i.y),h&&u?f=i.rotation+Math.PI:(h?f=Math.PI-i.rotation:f=-i.rotation,i.skew+=Math.PI),i.rotation=f),i.toMatrix(n)}_updateAlpha(){if(this._alpha===void 0)throw new Error("this._alpha is undefined.");if(this._parent!==null){if(this._parent._globalAlpha===void 0)throw new Error("this._parent._globalAlpha is undefined.");this._globalAlpha=this._alpha*this._parent._globalAlpha}else{if(this._armature===null)throw new Error("this._armature is null.");if(this._armature._globalAlpha===void 0)throw new Error("this._armature._globalAlpha is undefined.");this._globalAlpha=this._alpha*this._armature._globalAlpha}}init(t,e){this._boneData===null&&(this._boneData=t,this._armature=e,this._alpha=this._boneData.alpha,this._boneData.parent!==null&&(this._parent=this._armature.getBone(this._boneData.parent.name)),this._armature._addBone(this),this.origin=this._boneData.transform)}update(t){if(this._armature===null)throw new Error("this._armature is null.");if(this._cachedFrameIndex===void 0)throw new Error("this._cachedFrameIndex is undefined.");if(t>=0&&this._cachedFrameIndices!==null){const e=this._cachedFrameIndices[t];if(e>=0&&this._cachedFrameIndex===e)this._transformDirty=!1;else if(e>=0)this._transformDirty=!0,this._cachedFrameIndex=e;else{if(this._hasConstraint)for(const i of this._armature._constraints)i._root===this&&i.update();this._transformDirty||this._parent!==null&&this._parent._childrenTransformDirty?(this._transformDirty=!0,this._cachedFrameIndex=-1):this._cachedFrameIndex>=0?(this._transformDirty=!1,this._cachedFrameIndices[t]=this._cachedFrameIndex):(this._transformDirty=!0,this._cachedFrameIndex=-1)}}else{if(this._hasConstraint)for(const e of this._armature._constraints)e._root===this&&e.update();(this._transformDirty||this._parent!==null&&this._parent._childrenTransformDirty)&&(t=-1,this._transformDirty=!0,this._cachedFrameIndex=-1)}if(this._transformDirty){if(this._transformDirty=!1,this._childrenTransformDirty=!0,this._armature._armatureData===null)throw new Error("this._armature._armatureData is null.");if(this._cachedFrameIndex<0){const e=t>=0;this._localDirty&&this._updateGlobalTransformMatrix(e),e&&this._cachedFrameIndices!==null&&(this._cachedFrameIndex=this._cachedFrameIndices[t]=this._armature._armatureData.setCacheFrame(this.globalTransformMatrix,this.global))}else this._armature._armatureData.getCacheFrame(this.globalTransformMatrix,this.global,this._cachedFrameIndex)}else this._childrenTransformDirty&&(this._childrenTransformDirty=!1);this._localDirty=!0}updateByConstraint(){this._localDirty&&(this._localDirty=!1,(this._transformDirty||this._parent!==null&&this._parent._childrenTransformDirty)&&this._updateGlobalTransformMatrix(!0),this._transformDirty=!0)}invalidUpdate(){this._transformDirty=!0}contains(t){if(t===this)return!1;let e=t;for(;e!==this&&e!==null;)e=e.parent;return e===this}get boneData(){if(this._boneData===null)throw new Error("this._boneData is undefined.");return this._boneData}get visible(){if(this._visible===void 0)throw new Error("this._visible is undefined.");return this._visible}set visible(t){if(this._armature===null)throw new Error(" this._armature is null.");if(this._visible!==t){this._visible=t;for(const e of this._armature.getSlots())e.parent===this&&e._updateVisible()}}get name(){if(this._boneData===null)throw new Error(" this._boneData is undefined.");return this._boneData.name}get parent(){return this._parent}}class $n extends nt{constructor(){super(...arguments),d(this,"_constraintData",null),d(this,"_armature",null),d(this,"_target",null),d(this,"_root",null),d(this,"_bone",null)}_onClear(){this._armature=null,this._target=null,this._root=null,this._bone=null}get name(){var t;if(((t=this._constraintData)==null?void 0:t.name)===void 0)throw new Error("this._constraintData is undefined.");return this._constraintData.name}}d($n,"_helpMatrix",new Rn),d($n,"_helpTransform",new Dt),d($n,"_helpPoint",new Yr);class To extends $n{constructor(){super(...arguments),d(this,"_bendPositive",!1),d(this,"_weight",1)}static toString(){return"[class dragonBones.IKConstraint]"}_onClear(){super._onClear(),this._bendPositive=!1,this._weight=1,this._constraintData=null}_computeA(){if(this._target===null)throw new Error("this._target is null.");if(this._root===null)throw new Error("this._root is null.");const t=this._target.global,e=this._root.global,i=this._root.globalTransformMatrix;let n=Math.atan2(t.y-e.y,t.x-e.x);e.scaleX<0&&(n+=Math.PI),e.rotation+=Dt.normalizeRadian(n-e.rotation)*this._weight,e.toMatrix(i)}_computeB(){if(this._bone===null)throw new Error("this._bone is null.");if(this._bone._boneData===null)throw new Error("this._bone._boneData is null.");if(this._target===null)throw new Error("this._target is null.");const t=this._bone._boneData.length,e=this._root,i=this._target.global,n=e.global,s=this._bone.global,o=this._bone.globalTransformMatrix,a=o.a*t,l=o.b*t,h=a*a+l*l,u=Math.sqrt(h);let c=s.x-n.x,f=s.y-n.y;const _=c*c+f*f,y=Math.sqrt(_),p=s.rotation,m=n.rotation,x=Math.atan2(f,c);c=i.x-n.x,f=i.y-n.y;const M=c*c+f*f,b=Math.sqrt(M);let S=0;if(u+y<=b||b+u<=y||b+y<=u)S=Math.atan2(i.y-n.y,i.x-n.x),u+y<=b||y<u&&(S+=Math.PI);else{const v=(_-h+M)/(2*M),D=Math.sqrt(_-v*v*M)/b,L=n.x+c*v,V=n.y+f*v,q=-f*D,O=c*D;let I=!1;const k=e.parent;if(k!==null){const $=k.globalTransformMatrix;I=$.a*$.d-$.b*$.c<0}I!==this._bendPositive?(s.x=L-q,s.y=V-O):(s.x=L+q,s.y=V+O),S=Math.atan2(s.y-n.y,s.x-n.x)}const w=Dt.normalizeRadian(S-x);n.rotation=m+w*this._weight,n.toMatrix(e.globalTransformMatrix);const E=x+w*this._weight;s.x=n.x+Math.cos(E)*y,s.y=n.y+Math.sin(E)*y;let R=Math.atan2(i.y-s.y,i.x-s.x);s.scaleX<0&&(R+=Math.PI),s.rotation=n.rotation+p-m+Dt.normalizeRadian(R-w-p)*this._weight,s.toMatrix(o)}init(t,e){if(this._constraintData===null){if(t.target===null)throw new Error("constraintData.target is null.");if(t.root===null)throw new Error("constraintData.root is null.");this._constraintData=t,this._armature=e,this._target=this._armature.getBone(t.target.name),this._root=this._armature.getBone(t.root.name),this._bone=this._constraintData.bone!==null?this._armature.getBone(this._constraintData.bone.name):null;{const i=this._constraintData;this._bendPositive=i.bendPositive,this._weight=i.weight}if(this._root===null)throw new Error("this._root is null.");this._root._hasConstraint=!0}}update(){if(this._root===null)throw new Error("this._root is null.");this._root.updateByConstraint(),this._bone!==null?(this._bone.updateByConstraint(),this._computeB()):this._computeA()}invalidUpdate(){if(this._root===null)throw new Error("this._root is null.");this._root.invalidUpdate(),this._bone!==null&&this._bone.invalidUpdate()}}class Hm extends $n{constructor(){super(...arguments),d(this,"dirty",!1),d(this,"pathOffset",0),d(this,"position",0),d(this,"spacing",0),d(this,"rotateOffset",0),d(this,"rotateMix",1),d(this,"translateMix",1),d(this,"_pathSlot",null),d(this,"_bones",[]),d(this,"_spaces",[]),d(this,"_positions",[]),d(this,"_curves",[]),d(this,"_boneLengths",[]),d(this,"_pathGlobalVertices",[]),d(this,"_segments",[10])}static toString(){return"[class dragonBones.PathConstraint]"}_onClear(){super._onClear(),this.dirty=!1,this.pathOffset=0,this.position=0,this.spacing=0,this.rotateOffset=0,this.rotateMix=1,this.translateMix=1,this._pathSlot=null,this._bones.length=0,this._spaces.length=0,this._positions.length=0,this._curves.length=0,this._boneLengths.length=0,this._pathGlobalVertices.length=0}_updatePathVertices(t){if(this._armature===null)throw new Error("this._armature is null.");const e=this._armature,i=e.armatureData.parent,n=e.armatureData.scale;if(i===null)throw new Error("dragonBonesData is null.");const s=i.intArray,o=i.floatArray;if(s===null)throw new Error("intArray is null.");if(o===null)throw new Error("floatArray is null.");if(this._pathSlot===null)throw new Error("this._pathSlot is null.");const a=t.offset,l=s[a+it.GeometryVertexCount],h=s[a+it.GeometryFloatOffset];this._pathGlobalVertices.length=l*2;const u=t.weight;if(u===null){const m=this._pathSlot.parent;m.updateByConstraint();const x=m.globalTransformMatrix;for(let M=0,b=h;M<l;M+=2){const S=o[b++]*n,w=o[b++]*n,E=x.a*S+x.c*w+x.tx,R=x.b*S+x.d*w+x.ty;this._pathGlobalVertices[M]=E,this._pathGlobalVertices[M+1]=R}return}const c=this._pathSlot._geometryBones,f=u.bones.length,_=u.offset;let y=s[_+it.WeigthFloatOffset],p=_+it.WeigthBoneIndices+f;for(let m=0,x=0;m<l;m++){const M=s[p++];let b=0,S=0;for(let w=0,E=M;w<E;w++){const R=s[p++],v=c[R];if(v===null)continue;v.updateByConstraint();const D=v.globalTransformMatrix,L=o[y++],V=o[y++]*n,q=o[y++]*n;b+=(D.a*V+D.c*q+D.tx)*L,S+=(D.b*V+D.d*q+D.ty)*L}this._pathGlobalVertices[x++]=b,this._pathGlobalVertices[x++]=S}}_computeVertices(t,e,i,n){for(let s=i,o=t;s<e;s+=2)n[s]=this._pathGlobalVertices[o++],n[s+1]=this._pathGlobalVertices[o++]}_computeBezierCurve(t,e,i,n,s){if(this._armature===null)throw new Error("this._armature is null.");const o=this._armature;if(o.armatureData.parent===null)throw new Error("armature.armatureData.parent is null.");const a=o.armatureData.parent.intArray;if(a===null)throw new Error("intArray is null.");const l=a[t.geometry.offset+it.GeometryVertexCount],h=this._positions,u=this._spaces,c=t.closed,f=Array();let _=l*2,y=_/6,p=-1,m=this.position;h.length=e*3+2;let x=0;if(!t.constantSpeed){const X=t.curveLengths;if(y-=c?1:2,x=X[y],n&&(m*=x),s)for(let H=0;H<e;H++)u[H]*=x;f.length=8;for(let H=0,ot=0,rt=0;H<e;H++,ot+=3){const ct=u[H];if(m+=ct,c)m%=x,m<0&&(m+=x),rt=0;else if(m<0||m>x)continue;let Y=0;for(;;rt++){const xt=X[rt];if(!(m>xt)){if(rt===0)Y=m/xt;else{const mt=X[rt-1];Y=(m-mt)/(xt-mt)}break}}rt!==p&&(p=rt,c&&rt===y?(this._computeVertices(_-4,4,0,f),this._computeVertices(0,4,4,f)):this._computeVertices(rt*6+2,8,0,f)),this.addCurvePosition(Y,f[0],f[1],f[2],f[3],f[4],f[5],f[6],f[7],h,ot,i)}return}c?(_+=2,f.length=l,this._computeVertices(2,_-4,0,f),this._computeVertices(0,2,_-4,f),f[_-2]=f[0],f[_-1]=f[1]):(y--,_-=4,f.length=_,this._computeVertices(2,_,0,f));let M=new Array(y);x=0;let b=f[0],S=f[1],w=0,E=0,R=0,v=0,D=0,L=0,V,q,O,I,k,$,Q,B;for(let X=0,H=2;X<y;X++,H+=6)w=f[H],E=f[H+1],R=f[H+2],v=f[H+3],D=f[H+4],L=f[H+5],V=(b-w*2+R)*.1875,q=(S-E*2+v)*.1875,O=((w-R)*3-b+D)*.09375,I=((E-v)*3-S+L)*.09375,k=V*2+O,$=q*2+I,Q=(w-b)*.75+V+O*.16666667,B=(E-S)*.75+q+I*.16666667,x+=Math.sqrt(Q*Q+B*B),Q+=k,B+=$,k+=O,$+=I,x+=Math.sqrt(Q*Q+B*B),Q+=k,B+=$,x+=Math.sqrt(Q*Q+B*B),Q+=k+O,B+=$+I,x+=Math.sqrt(Q*Q+B*B),M[X]=x,b=D,S=L;if(n&&(m*=x),s)for(let X=0;X<e;X++)u[X]*=x;let et=this._segments,j=0;for(let X=0,H=0,ot=0,rt=0;X<e;X++,H+=3){const ct=u[X];m+=ct;let Y=m;if(c)Y%=x,Y<0&&(Y+=x),ot=0;else if(Y<0||Y>x)continue;for(;;ot++){const xt=M[ot];if(!(Y>xt)){if(ot===0)Y/=xt;else{const mt=M[ot-1];Y=(Y-mt)/(xt-mt)}break}}if(ot!==p){p=ot;let xt=ot*6;for(b=f[xt],S=f[xt+1],w=f[xt+2],E=f[xt+3],R=f[xt+4],v=f[xt+5],D=f[xt+6],L=f[xt+7],V=(b-w*2+R)*.03,q=(S-E*2+v)*.03,O=((w-R)*3-b+D)*.006,I=((E-v)*3-S+L)*.006,k=V*2+O,$=q*2+I,Q=(w-b)*.3+V+O*.16666667,B=(E-S)*.3+q+I*.16666667,j=Math.sqrt(Q*Q+B*B),et[0]=j,xt=1;xt<8;xt++)Q+=k,B+=$,k+=O,$+=I,j+=Math.sqrt(Q*Q+B*B),et[xt]=j;Q+=k,B+=$,j+=Math.sqrt(Q*Q+B*B),et[8]=j,Q+=k+O,B+=$+I,j+=Math.sqrt(Q*Q+B*B),et[9]=j,rt=0}for(Y*=j;;rt++){const xt=et[rt];if(!(Y>xt)){if(rt===0)Y/=xt;else{const mt=et[rt-1];Y=rt+(Y-mt)/(xt-mt)}break}}this.addCurvePosition(Y*.1,b,S,w,E,R,v,D,L,h,H,i)}}addCurvePosition(t,e,i,n,s,o,a,l,h,u,c,f){if(t===0){u[c]=e,u[c+1]=i,u[c+2]=0;return}if(t===1){u[c]=l,u[c+1]=h,u[c+2]=0;return}const _=1-t,y=_*_,p=t*t,m=y*_,x=y*t*3,M=_*p*3,b=t*p,S=m*e+x*n+M*o+b*l,w=m*i+x*s+M*a+b*h;u[c]=S,u[c+1]=w,f?u[c+2]=Math.atan2(w-(m*i+x*s+M*a),S-(m*e+x*n+M*o)):u[c+2]=0}init(t,e){this._constraintData=t,this._armature=e;let i=t;if(i.pathDisplayData===null)throw new Error("data.pathDisplayData is null.");if(i.root===null)throw new Error("data.root is null.");if(i.target===null)throw new Error("data.target is null.");if(i.pathSlot===null)throw new Error("data.pathSlot is null.");this.pathOffset=i.pathDisplayData.geometry.offset,this.position=i.position,this.spacing=i.spacing,this.rotateOffset=i.rotateOffset,this.rotateMix=i.rotateMix,this.translateMix=i.translateMix,this._root=this._armature.getBone(i.root.name),this._target=this._armature.getBone(i.target.name),this._pathSlot=this._armature.getSlot(i.pathSlot.name);for(let n=0,s=i.bones.length;n<s;n++){const o=this._armature.getBone(i.bones[n].name);o!==null&&this._bones.push(o)}i.rotateMode===ei.ChainScale&&(this._boneLengths.length=this._bones.length),this._root._hasConstraint=!0}update(){const t=this._pathSlot;if(t===null)throw new Error("pathSlot is null.");if(t._geometryData===null||t._geometryData.offset!==this.pathOffset)return;const e=this._constraintData;if(this._root===null)throw new Error("this._root is null.");let i=!1;if(this._root._childrenTransformDirty?(this._updatePathVertices(t._geometryData),i=!0):(t._verticesDirty||t._isBonesUpdate())&&(this._updatePathVertices(t._geometryData),t._verticesDirty=!1,i=!0),!i&&!this.dirty)return;const n=e.positionMode,s=e.spacingMode,o=e.rotateMode,a=this._bones,l=s===mi.Length,h=o===ei.ChainScale,u=o===ei.Tangent,c=a.length,f=u?c:c+1,_=this.spacing;let y=this._spaces;if(y.length=f,h||l){y[0]=0;for(let E=0,R=f-1;E<R;E++){const v=a[E];if(v.updateByConstraint(),v._boneData===null)throw new Error("bone._boneData is null.");const D=v._boneData.length,L=v.globalTransformMatrix,V=D*L.a,q=D*L.b,O=Math.sqrt(V*V+q*q);h&&(this._boneLengths[E]=O),y[E+1]=(D+_)*O/D}}else for(let E=0;E<f;E++)y[E]=_;this._computeBezierCurve(t._displayFrame.rawDisplayData,f,u,n===Yi.Percent,s===mi.Percent);const p=this._positions;let m=this.rotateOffset,x=p[0],M=p[1],b;if(m===0)b=o===ei.Chain;else{b=!1;const E=t.parent;if(E!==null){const R=E.globalTransformMatrix;m*=R.a*R.d-R.b*R.c>0?Dt.DEG_RAD:-Dt.DEG_RAD}}const S=this.rotateMix,w=this.translateMix;for(let E=0,R=3;E<c;E++,R+=3){let v=a[E];if(v._boneData===null)throw new Error("bone._boneData is null.");v.updateByConstraint();let D=v.globalTransformMatrix;D.tx+=(x-D.tx)*w,D.ty+=(M-D.ty)*w;const L=p[R],V=p[R+1],q=L-x,O=V-M;if(h){const I=this._boneLengths[E],k=(Math.sqrt(q*q+O*O)/I-1)*S+1;D.a*=k,D.b*=k}if(x=L,M=V,S>0){let I=D.a,k=D.b,$=D.c,Q=D.d,B,et,j;if(u?B=p[R-1]:B=Math.atan2(O,q),B-=Math.atan2(k,I),b){et=Math.cos(B),j=Math.sin(B);const X=v._boneData.length;x+=(X*(et*I-j*k)-q)*S,M+=(X*(j*I+et*k)-O)*S}else B+=m;B>Dt.PI?B-=Dt.PI_D:B<-Dt.PI&&(B+=Dt.PI_D),B*=S,et=Math.cos(B),j=Math.sin(B),D.a=et*I-j*k,D.b=j*I+et*k,D.c=et*$-j*Q,D.d=j*$+et*Q}v.global.fromMatrix(D)}this.dirty=!1}invalidUpdate(){}}class jr{constructor(t=1,e=1,i=1,n=1,s=0,o=0,a=0,l=0){d(this,"alphaMultiplier"),d(this,"redMultiplier"),d(this,"greenMultiplier"),d(this,"blueMultiplier"),d(this,"alphaOffset"),d(this,"redOffset"),d(this,"greenOffset"),d(this,"blueOffset"),this.alphaMultiplier=t,this.redMultiplier=e,this.greenMultiplier=i,this.blueMultiplier=n,this.alphaOffset=s,this.redOffset=o,this.greenOffset=a,this.blueOffset=l}copyFrom(t){this.alphaMultiplier=t.alphaMultiplier,this.redMultiplier=t.redMultiplier,this.greenMultiplier=t.greenMultiplier,this.blueMultiplier=t.blueMultiplier,this.alphaOffset=t.alphaOffset,this.redOffset=t.redOffset,this.greenOffset=t.greenOffset,this.blueOffset=t.blueOffset}identity(){this.alphaMultiplier=this.redMultiplier=this.greenMultiplier=this.blueMultiplier=1,this.alphaOffset=this.redOffset=this.greenOffset=this.blueOffset=0}}class Xm extends nt{constructor(){super(...arguments),d(this,"rawDisplayData",null),d(this,"displayData",null),d(this,"textureData",null),d(this,"display",null),d(this,"deformVertices",[])}static toString(){return"[class dragonBones.DisplayFrame]"}_onClear(){this.rawDisplayData=null,this.displayData=null,this.textureData=null,this.display=null,this.deformVertices.length=0}updateDeformVertices(){if(this.rawDisplayData===null||this.deformVertices.length!==0)return;let t;if(this.rawDisplayData.type===Rt.Mesh)t=this.rawDisplayData.geometry;else if(this.rawDisplayData.type===Rt.Path)t=this.rawDisplayData.geometry;else return;let e=0;if(t.weight!==null)e=t.weight.count*2;else{if(t.data===null)throw new Error("rawGeometryData.data is null.");if(t.data.intArray===null)throw new Error("rawGeometryData.data.intArray is null.");e=t.data.intArray[t.offset+it.GeometryVertexCount]*2}this.deformVertices.length=e;for(let i=0,n=this.deformVertices.length;i<n;++i)this.deformVertices[i]=0}getGeometryData(){if(this.displayData!==null){if(this.displayData.type===Rt.Mesh)return this.displayData.geometry;if(this.displayData.type===Rt.Path)return this.displayData.geometry}if(this.rawDisplayData!==null){if(this.rawDisplayData.type===Rt.Mesh)return this.rawDisplayData.geometry;if(this.rawDisplayData.type===Rt.Path)return this.rawDisplayData.geometry}return null}getBoundingBox(){return this.displayData!==null&&this.displayData.type===Rt.BoundingBox?this.displayData.boundingBox:this.rawDisplayData!==null&&this.rawDisplayData.type===Rt.BoundingBox?this.rawDisplayData.boundingBox:null}getTextureData(){if(this.displayData!==null){if(this.displayData.type===Rt.Image)return this.displayData.texture;if(this.displayData.type===Rt.Mesh)return this.displayData.texture}if(this.textureData!==null)return this.textureData;if(this.rawDisplayData!==null){if(this.rawDisplayData.type===Rt.Image)return this.rawDisplayData.texture;if(this.rawDisplayData.type===Rt.Mesh)return this.rawDisplayData.texture}return null}}class Ft extends Kn{constructor(){super(...arguments),d(this,"displayController",null),d(this,"_displayDataDirty",!1),d(this,"_displayDirty",!1),d(this,"_geometryDirty",!1),d(this,"_textureDirty",!1),d(this,"_visibleDirty",!1),d(this,"_blendModeDirty",!1),d(this,"_zOrderDirty",!1),d(this,"_colorDirty",!1),d(this,"_verticesDirty",!1),d(this,"_transformDirty",!1),d(this,"_visible",!0),d(this,"_blendMode",ee.Normal),d(this,"_displayIndex",-1),d(this,"_animationDisplayIndex",-1),d(this,"_cachedFrameIndex",-1),d(this,"_zOrder",0),d(this,"_zIndex",0),d(this,"_pivotX",0),d(this,"_pivotY",0),d(this,"_localMatrix",new Rn),d(this,"_colorTransform",new jr),d(this,"_displayFrames",[]),d(this,"_geometryBones",[]),d(this,"_slotData",null),d(this,"_displayFrame",null),d(this,"_geometryData",null),d(this,"_boundingBoxData",null),d(this,"_textureData",null),d(this,"_rawDisplay",null),d(this,"_meshDisplay",null),d(this,"_display",null),d(this,"_childArmature",null),d(this,"_parent",null),d(this,"_cachedFrameIndices",null)}_onClear(){super._onClear();const t=[];for(const e of this._displayFrames){const i=e.display;i!==this._rawDisplay&&i!==this._meshDisplay&&t.indexOf(i)<0&&t.push(i),e.returnToPool()}for(const e of t)e instanceof wi?e.dispose():this._disposeDisplay(e,!0);this._meshDisplay!==null&&this._meshDisplay!==this._rawDisplay&&this._disposeDisplay(this._meshDisplay,!1),this._rawDisplay!==null&&this._disposeDisplay(this._rawDisplay,!1),this.displayController=null,this._displayDataDirty=!1,this._displayDirty=!1,this._geometryDirty=!1,this._textureDirty=!1,this._visibleDirty=!1,this._blendModeDirty=!1,this._zOrderDirty=!1,this._colorDirty=!1,this._verticesDirty=!1,this._transformDirty=!1,this._visible=!0,this._blendMode=ee.Normal,this._displayIndex=-1,this._animationDisplayIndex=-1,this._zOrder=0,this._zIndex=0,this._cachedFrameIndex=-1,this._pivotX=0,this._pivotY=0,this._localMatrix.identity(),this._colorTransform.identity(),this._displayFrames.length=0,this._geometryBones.length=0,this._slotData=null,this._displayFrame=null,this._geometryData=null,this._boundingBoxData=null,this._textureData=null,this._rawDisplay=null,this._meshDisplay=null,this._display=null,this._childArmature=null,this._parent=null,this._cachedFrameIndices=null}_hasDisplay(t){for(const e of this._displayFrames)if(e.display===t)return!0;return!1}_isBonesUpdate(){for(const t of this._geometryBones)if(t!==null&&t._childrenTransformDirty)return!0;return!1}_updateAlpha(){if(this._parent===null)throw new Error("this._parent is null.");const t=this._alpha*this._parent._globalAlpha;this._globalAlpha!==t&&(this._globalAlpha=t,this._colorDirty=!0)}_updateDisplayData(){const t=this._displayFrame,e=this._geometryData,i=this._textureData;let n=null,s=null;if(this._displayFrame=null,this._geometryData=null,this._boundingBoxData=null,this._textureData=null,this._displayIndex>=0&&this._displayIndex<this._displayFrames.length&&(this._displayFrame=this._displayFrames[this._displayIndex],n=this._displayFrame.rawDisplayData,s=this._displayFrame.displayData,this._geometryData=this._displayFrame.getGeometryData(),this._boundingBoxData=this._displayFrame.getBoundingBox(),this._textureData=this._displayFrame.getTextureData()),this._armature===null)throw new Error("this._armature is null.");if(this._armature._armatureData===null)throw new Error("this._armature._armatureData is null.");if(this._displayFrame!==t||this._geometryData!==e||this._textureData!==i){if(this._geometryData===null&&this._textureData!==null){if(this._textureData.parent===null)throw new Error("this._textureData.parent is null.");const o=s!==null&&s.type===Rt.Image?s:n,a=this._textureData.parent.scale*this._armature._armatureData.scale,l=this._textureData.frame;this._pivotX=o.pivot.x,this._pivotY=o.pivot.y;const h=l!==null?l:this._textureData.region;let u=h.width,c=h.height;this._textureData.rotated&&l===null&&(u=h.height,c=h.width),this._pivotX*=u*a,this._pivotY*=c*a,l!==null&&(this._pivotX+=l.x*a,this._pivotY+=l.y*a),n!==null&&o!==n&&(n.transform.toMatrix(Ft._helpMatrix),Ft._helpMatrix.invert(),Ft._helpMatrix.transformPoint(0,0,Ft._helpPoint),this._pivotX-=Ft._helpPoint.x,this._pivotY-=Ft._helpPoint.y,o.transform.toMatrix(Ft._helpMatrix),Ft._helpMatrix.invert(),Ft._helpMatrix.transformPoint(0,0,Ft._helpPoint),this._pivotX+=Ft._helpPoint.x,this._pivotY+=Ft._helpPoint.y),Xe.yDown||(this._pivotY=(this._textureData.rotated?this._textureData.region.width:this._textureData.region.height)*a-this._pivotY)}else this._pivotX=0,this._pivotY=0;if(n!==null?this.origin=n.transform:s!==null?this.origin=s.transform:this.origin=null,this.origin!==null?this.global.copyFrom(this.origin).add(this.offset).toMatrix(this._localMatrix):this.global.copyFrom(this.offset).toMatrix(this._localMatrix),this._geometryData!==e)if(this._geometryDirty=!0,this._verticesDirty=!0,this._geometryData!==null){if(this._geometryBones.length=0,this._geometryData.weight!==null)for(let o=0,a=this._geometryData.weight.bones.length;o<a;++o){const l=this._armature.getBone(this._geometryData.weight.bones[o].name);this._geometryBones.push(l)}}else this._geometryBones.length=0,this._geometryData=null;this._textureDirty=this._textureData!==i,this._transformDirty=!0}}_updateDisplay(){const t=this._display!==null?this._display:this._rawDisplay,e=this._childArmature;if(this._displayFrame!==null?(this._display=this._displayFrame.display,this._display!==null&&this._display instanceof wi?(this._childArmature=this._display,this._display=this._childArmature.display):this._childArmature=null):(this._display=null,this._childArmature=null),(this._display!==null?this._display:this._rawDisplay)!==t&&(this._textureDirty=!0,this._visibleDirty=!0,this._blendModeDirty=!0,this._colorDirty=!0,this._transformDirty=!0,this._onUpdateDisplay(),this._replaceDisplay(t)),this._childArmature!==e){if(e!==null&&(e._parent=null,e.clock=null,e.inheritAnimation&&e.animation.reset()),this._armature===null)throw new Error("this._armature is null.");if(this._childArmature!==null&&(this._childArmature._parent=this,this._childArmature.clock=this._armature.clock,this._childArmature.inheritAnimation)){if(this._childArmature.cacheFrameRate===0){const i=this._armature.cacheFrameRate;i!==0&&(this._childArmature.cacheFrameRate=i)}if(this._displayFrame!==null){let i=null,n=this._displayFrame.displayData!==null?this._displayFrame.displayData:this._displayFrame.rawDisplayData;if(n!==null&&n.type===Rt.Armature&&(i=n.actions),i!==null&&i.length>0)for(const s of i){const o=nt.borrowObject(Nt);Nt.actionDataToInstance(s,o,this._armature),o.slot=this,this._armature._bufferAction(o,!1)}else this._childArmature.animation.play()}}}}_updateGlobalTransformMatrix(t){if(this._parent===null)throw new Error("this._parent is null.");if(this._parent._boneData===null)throw new Error("this._parent._boneData is null.");const e=this._parent._boneData.type===_e.Bone?this._parent.globalTransformMatrix:this._parent._getGlobalTransformMatrix(this.global.x,this.global.y);this.globalTransformMatrix.copyFrom(this._localMatrix),this.globalTransformMatrix.concat(e),t?this.global.fromMatrix(this.globalTransformMatrix):this._globalDirty=!0}_setDisplayIndex(t,e=!1){if(e){if(this._animationDisplayIndex===t)return;this._animationDisplayIndex=t}this._displayIndex!==t&&(this._displayIndex=t<this._displayFrames.length?t:this._displayFrames.length-1,this._displayDataDirty=!0,this._displayDirty=this._displayIndex<0||this._display!==this._displayFrames[this._displayIndex].display)}_setZOrder(t){return this._zOrder,this._zOrder=t,this._zOrderDirty=!0,this._zOrderDirty}_setColor(t){return this._colorTransform.copyFrom(t),this._colorDirty=!0}init(t,e,i,n){if(this._slotData!==null)return;if(t.color===null)throw new Error("slotData.color is null.");if(this._slotData=t,this._colorDirty=!0,this._blendModeDirty=!0,this._blendMode=t.blendMode,this._zOrder=t.zOrder,this._zIndex=t.zIndex,this._alpha=t.alpha,this._colorTransform.copyFrom(t.color),this._rawDisplay=i,this._meshDisplay=n,this._armature=e,t.parent===null)throw new Error("slotData.parent is null.");const s=this._armature.getBone(t.parent.name);s!==null&&(this._parent=s),this._armature._addSlot(this),this._initDisplay(this._rawDisplay,!1),this._rawDisplay!==this._meshDisplay&&this._initDisplay(this._meshDisplay,!1),this._onUpdateDisplay(),this._addDisplay()}update(t){if(this._displayDataDirty&&(this._updateDisplayData(),this._displayDataDirty=!1),this._displayDirty&&(this._updateDisplay(),this._displayDirty=!1),(this._geometryDirty||this._textureDirty)&&((this._display===null||this._display===this._rawDisplay||this._display===this._meshDisplay)&&this._updateFrame(),this._geometryDirty=!1,this._textureDirty=!1),this._display!==null){if(this._visibleDirty&&(this._updateVisible(),this._visibleDirty=!1),this._blendModeDirty&&(this._updateBlendMode(),this._blendModeDirty=!1),this._colorDirty&&(this._updateColor(),this._colorDirty=!1),this._zOrderDirty&&(this._updateZOrder(),this._zOrderDirty=!1),this._parent===null)throw new Error("this._parent is null.");if(this._parent._boneData===null)throw new Error("this._parent._boneData is null.");if(this._geometryData!==null&&this._display===this._meshDisplay){const e=this._geometryData.weight!==null,i=this._parent._boneData.type!==_e.Bone;if((this._verticesDirty||e&&this._isBonesUpdate()||i&&this._parent._childrenTransformDirty)&&(this._verticesDirty=!1,this._updateMesh()),e||i)return}if(t>=0&&this._cachedFrameIndices!==null){const e=this._cachedFrameIndices[t];e>=0&&this._cachedFrameIndex===e?this._transformDirty=!1:e>=0?(this._transformDirty=!0,this._cachedFrameIndex=e):this._transformDirty||this._parent._childrenTransformDirty?(this._transformDirty=!0,this._cachedFrameIndex=-1):this._cachedFrameIndex>=0?(this._transformDirty=!1,this._cachedFrameIndices[t]=this._cachedFrameIndex):(this._transformDirty=!0,this._cachedFrameIndex=-1)}else(this._transformDirty||this._parent._childrenTransformDirty)&&(t=-1,this._transformDirty=!0,this._cachedFrameIndex=-1);if(this._armature===null)throw new Error(" this._armature is null.");if(this._armature._armatureData===null)throw new Error("  this._armature._armatureData is null.");if(this._transformDirty){if(this._cachedFrameIndex<0){const e=t>=0;this._updateGlobalTransformMatrix(e),e&&this._cachedFrameIndices!==null&&(this._cachedFrameIndex=this._cachedFrameIndices[t]=this._armature._armatureData.setCacheFrame(this.globalTransformMatrix,this.global))}else this._armature._armatureData.getCacheFrame(this.globalTransformMatrix,this.global,this._cachedFrameIndex);this._updateTransform(),this._transformDirty=!1}}}invalidUpdate(){this._displayDataDirty=!0,this._displayDirty=!0,this._transformDirty=!0}updateTransformAndMatrix(){this._transformDirty&&(this._updateGlobalTransformMatrix(!1),this._transformDirty=!1)}replaceRawDisplayData(t,e=-1){if(e<0)e=this._displayIndex<0?0:this._displayIndex;else if(e>=this._displayFrames.length)return;if(this._armature===null)throw new Error(" this._armature is null.");if(this._armature._armatureData===null)throw new Error("  this._armature._armatureData is null.");if(this._slotData===null)throw new Error("  this._slotData is null.");const i=this._displayFrames[e];if(i.rawDisplayData!==t){if(i.deformVertices.length=0,i.rawDisplayData=t,i.rawDisplayData===null){const n=this._armature._armatureData.defaultSkin;if(n!==null){const s=n.getDisplays(this._slotData.name);s!==null&&e<s.length&&(i.rawDisplayData=s[e])}}e===this._displayIndex&&(this._displayDataDirty=!0)}}replaceDisplayData(t,e=-1){if(e<0)e=this._displayIndex<0?0:this._displayIndex;else if(e>=this._displayFrames.length)return;const i=this._displayFrames[e];i.displayData!==t&&i.rawDisplayData!==t&&(i.displayData=t,e===this._displayIndex&&(this._displayDataDirty=!0))}replaceTextureData(t,e=-1){if(e<0)e=this._displayIndex<0?0:this._displayIndex;else if(e>=this._displayFrames.length)return;const i=this._displayFrames[e];i.textureData!==t&&(i.textureData=t,e===this._displayIndex&&(this._displayDataDirty=!0))}replaceDisplay(t,e=-1){if(e<0)e=this._displayIndex<0?0:this._displayIndex;else if(e>=this._displayFrames.length)return;const i=this._displayFrames[e];if(i.display!==t){const n=i.display;i.display=t,n!==null&&n!==this._rawDisplay&&n!==this._meshDisplay&&!this._hasDisplay(n)&&(n instanceof wi||this._disposeDisplay(n,!0)),t!==null&&t!==this._rawDisplay&&t!==this._meshDisplay&&!this._hasDisplay(n)&&!(t instanceof wi)&&this._initDisplay(t,!0),e===this._displayIndex&&(this._displayDirty=!0)}}containsPoint(t,e){return this._boundingBoxData===null?!1:(this.updateTransformAndMatrix(),Ft._helpMatrix.copyFrom(this.globalTransformMatrix),Ft._helpMatrix.invert(),Ft._helpMatrix.transformPoint(t,e,Ft._helpPoint),this._boundingBoxData.containsPoint(Ft._helpPoint.x,Ft._helpPoint.y))}intersectsSegment(t,e,i,n,s=null,o=null,a=null){if(this._boundingBoxData===null)return 0;this.updateTransformAndMatrix(),Ft._helpMatrix.copyFrom(this.globalTransformMatrix),Ft._helpMatrix.invert(),Ft._helpMatrix.transformPoint(t,e,Ft._helpPoint),t=Ft._helpPoint.x,e=Ft._helpPoint.y,Ft._helpMatrix.transformPoint(i,n,Ft._helpPoint),i=Ft._helpPoint.x,n=Ft._helpPoint.y;const l=this._boundingBoxData.intersectsSegment(t,e,i,n,s,o,a);return l>0&&(l===1||l===2?s!==null?(this.globalTransformMatrix.transformPoint(s.x,s.y,s),o!==null&&(o.x=s.x,o.y=s.y)):o!==null&&this.globalTransformMatrix.transformPoint(o.x,o.y,o):(s!==null&&this.globalTransformMatrix.transformPoint(s.x,s.y,s),o!==null&&this.globalTransformMatrix.transformPoint(o.x,o.y,o)),a!==null&&(this.globalTransformMatrix.transformPoint(Math.cos(a.x),Math.sin(a.x),Ft._helpPoint,!0),a.x=Math.atan2(Ft._helpPoint.y,Ft._helpPoint.x),this.globalTransformMatrix.transformPoint(Math.cos(a.y),Math.sin(a.y),Ft._helpPoint,!0),a.y=Math.atan2(Ft._helpPoint.y,Ft._helpPoint.x))),l}getDisplayFrameAt(t){return this._displayFrames[t]}get visible(){return this._visible}set visible(t){this._visible!==t&&(this._visible=t,this._updateVisible())}get displayFrameCount(){return this._displayFrames.length}set displayFrameCount(t){const e=this._displayFrames.length;if(e<t){this._displayFrames.length=t;for(let i=e;i<t;++i)this._displayFrames[i]=nt.borrowObject(Xm)}else if(e>t){for(let i=e-1;i<t;--i)this.replaceDisplay(null,i),this._displayFrames[i].returnToPool();this._displayFrames.length=t}}get displayIndex(){return this._displayIndex}set displayIndex(t){this._setDisplayIndex(t),this.update(-1)}get name(){if(this._slotData===null)throw new Error("  this._slotData is null.");return this._slotData.name}get displayList(){const t=new Array;for(const e of this._displayFrames)t.push(e.display);return t}set displayList(t){this.displayFrameCount=t.length;let e=0;for(const i of t)this.replaceDisplay(i,e++)}get slotData(){if(this._slotData===null)throw new Error("  this._slotData is null.");return this._slotData}get boundingBoxData(){return this._boundingBoxData}get rawDisplay(){return this._rawDisplay}get meshDisplay(){return this._meshDisplay}get display(){return this._display}set display(t){this._display!==t&&(this._displayFrames.length===0&&(this.displayFrameCount=1,this._displayIndex=0),this.replaceDisplay(t,this._displayIndex))}get childArmature(){return this._childArmature}set childArmature(t){this._childArmature!==t&&(this.display=t)}get parent(){if(this._parent===null)throw new Error("this._parent is null.");return this._parent}getDisplay(){return this._display}setDisplay(t){this.display=t}}class Ce extends ul{constructor(){super(...arguments),d(this,"_dX",0),d(this,"_dY",0),d(this,"_k",0),d(this,"_kX",0),d(this,"_kY",0),d(this,"_vertices",[]),d(this,"_deformVertices",[]),d(this,"_hullCache",[]),d(this,"_matrixCahce",[]),d(this,"_bone",null)}static toString(){return"[class dragonBones.Surface]"}_onClear(){super._onClear(),this._dX=0,this._dY=0,this._k=0,this._kX=0,this._kY=0,this._vertices.length=0,this._deformVertices.length=0,this._matrixCahce.length=0,this._hullCache.length=0,this._bone=null}_getAffineTransform(t,e,i,n,s,o,a,l,h,u,c,f,_){const y=a-s,p=l-o,m=h-s,x=u-o;c.rotation=Math.atan2(p,y),c.skew=Math.atan2(x,m)-Math.PI*.5-c.rotation,_&&(c.rotation+=Math.PI),c.scaleX=Math.sqrt(y*y+p*p)/i,c.scaleY=Math.sqrt(m*m+x*x)/n,c.toMatrix(f),c.x=f.tx=s-(f.a*t+f.c*e),c.y=f.ty=o-(f.b*t+f.d*e)}_updateVertices(){if(this._armature===null)throw new Error("this._armature is null.");if(this._armature._armatureData===null)throw new Error("this._armature._armatureData is null.");const t=this._armature.armatureData.parent;if(t===null)throw new Error("data is null.");const e=this._boneData.geometry,i=t.intArray,n=t.floatArray;if(i===null)throw new Error("intArray is null.");if(n===null)throw new Error("floatArray is null.");const s=i[e.offset+it.GeometryVertexCount],o=i[e.offset+it.GeometryFloatOffset],a=this._vertices,l=this._deformVertices;if(this._parent!==null){if(this._parent._boneData===null)throw new Error("this._parent._boneData is null.");if(this._parent._boneData.type===_e.Surface)for(let h=0,u=s;h<u;++h){const c=h*2,f=n[o+c]+l[c],_=n[o+c+1]+l[c+1],y=this._parent._getGlobalTransformMatrix(f,_);a[c]=y.a*f+y.c*_+y.tx,a[c+1]=y.b*f+y.d*_+y.ty}else{const h=this._parent.globalTransformMatrix;for(let u=0,c=s;u<c;++u){const f=u*2,_=n[o+f]+l[f],y=n[o+f+1]+l[f+1];a[f]=h.a*_+h.c*y+h.tx,a[f+1]=h.b*_+h.d*y+h.ty}}}else for(let h=0,u=s;h<u;++h){const c=h*2;a[c]=n[o+c]+l[c],a[c+1]=n[o+c+1]+l[c+1]}}_updateGlobalTransformMatrix(t){if(this._boneData===null)throw new Error("this._boneData is null.");const e=this._boneData.segmentX*2,i=this._vertices.length-2,n=200,s=this._vertices[0],o=this._vertices[1],a=this._vertices[e],l=this._vertices[e+1],h=this._vertices[i],u=this._vertices[i+1],c=this._vertices[i-e],f=this._vertices[i-e+1],_=s+(h-s)*.5,y=o+(u-o)*.5,p=a+(c-a)*.5,m=l+(f-l)*.5,x=_+(p-_)*.5,M=y+(m-y)*.5,b=a+(h-a)*.5,S=l+(u-l)*.5,w=c+(h-c)*.5,E=f+(u-f)*.5;this._getAffineTransform(0,0,n,n,x,M,b,S,w,E,this.global,this.globalTransformMatrix,!1),this._globalDirty=!1}_getGlobalTransformMatrix(t,e){if(t<-1e3||1e3<t||e<-1e3||1e3<e)return this.globalTransformMatrix;let i=!1;const n=this._boneData,s=n.segmentX,o=n.segmentY,a=n.segmentX*2,l=this._dX,h=this._dY,u=Math.floor((t+200)/l),c=Math.floor((e+200)/h);let f=0,_=u*l-200,y=c*h-200;const p=this._matrixCahce,m=Ce._helpMatrix;if(t<-200){if(e<-200||e>=200)return this.globalTransformMatrix;if(i=e>this._kX*(t+200)+y,f=((s*o+s+o+o+c)*2+(i?1:0))*7,p[f]>0)m.copyFromArray(p,f+1);else{const x=c*(a+2),M=this._hullCache[4],b=this._hullCache[5],S=this._hullCache[2]-(o-c)*M,w=this._hullCache[3]-(o-c)*b,E=this._vertices;i?this._getAffineTransform(-200,y+h,1e3-200,h,E[x+a+2],E[x+a+3],S+M,w+b,E[x],E[x+1],Ce._helpTransform,m,!0):this._getAffineTransform(-1e3,y,1e3-200,h,S,w,E[x],E[x+1],S+M,w+b,Ce._helpTransform,m,!1),p[f]=1,p[f+1]=m.a,p[f+2]=m.b,p[f+3]=m.c,p[f+4]=m.d,p[f+5]=m.tx,p[f+6]=m.ty}}else if(t>=200){if(e<-200||e>=200)return this.globalTransformMatrix;if(i=e>this._kX*(t-1e3)+y,f=((s*o+s+c)*2+(i?1:0))*7,p[f]>0)m.copyFromArray(p,f+1);else{const x=(c+1)*(a+2)-2,M=this._hullCache[4],b=this._hullCache[5],S=this._hullCache[0]+c*M,w=this._hullCache[1]+c*b,E=this._vertices;i?this._getAffineTransform(1e3,y+h,1e3-200,h,S+M,w+b,E[x+a+2],E[x+a+3],S,w,Ce._helpTransform,m,!0):this._getAffineTransform(200,y,1e3-200,h,E[x],E[x+1],S,w,E[x+a+2],E[x+a+3],Ce._helpTransform,m,!1),p[f]=1,p[f+1]=m.a,p[f+2]=m.b,p[f+3]=m.c,p[f+4]=m.d,p[f+5]=m.tx,p[f+6]=m.ty}}else if(e<-200){if(t<-200||t>=200)return this.globalTransformMatrix;if(i=e>this._kY*(t-_-l)-1e3,f=((s*o+u)*2+(i?1:0))*7,p[f]>0)m.copyFromArray(p,f+1);else{const x=u*2,M=this._hullCache[10],b=this._hullCache[11],S=this._hullCache[8]+u*M,w=this._hullCache[9]+u*b,E=this._vertices;i?this._getAffineTransform(_+l,-200,l,1e3-200,E[x+2],E[x+3],E[x],E[x+1],S+M,w+b,Ce._helpTransform,m,!0):this._getAffineTransform(_,-1e3,l,1e3-200,S,w,S+M,w+b,E[x],E[x+1],Ce._helpTransform,m,!1),p[f]=1,p[f+1]=m.a,p[f+2]=m.b,p[f+3]=m.c,p[f+4]=m.d,p[f+5]=m.tx,p[f+6]=m.ty}}else if(e>=200){if(t<-200||t>=200)return this.globalTransformMatrix;if(i=e>this._kY*(t-_-l)+200,f=((s*o+s+o+u)*2+(i?1:0))*7,p[f]>0)m.copyFromArray(p,f+1);else{const x=o*(a+2)+u*2,M=this._hullCache[10],b=this._hullCache[11],S=this._hullCache[6]-(s-u)*M,w=this._hullCache[7]-(s-u)*b,E=this._vertices;i?this._getAffineTransform(_+l,1e3,l,1e3-200,S+M,w+b,S,w,E[x+2],E[x+3],Ce._helpTransform,m,!0):this._getAffineTransform(_,200,l,1e3-200,E[x],E[x+1],E[x+2],E[x+3],S,w,Ce._helpTransform,m,!1),p[f]=1,p[f+1]=m.a,p[f+2]=m.b,p[f+3]=m.c,p[f+4]=m.d,p[f+5]=m.tx,p[f+6]=m.ty}}else if(i=e>this._k*(t-_-l)+y,f=((s*c+u)*2+(i?1:0))*7,p[f]>0)m.copyFromArray(p,f+1);else{const x=u*2+c*(a+2),M=this._vertices;i?this._getAffineTransform(_+l,y+h,l,h,M[x+a+4],M[x+a+5],M[x+a+2],M[x+a+3],M[x+2],M[x+3],Ce._helpTransform,m,!0):this._getAffineTransform(_,y,l,h,M[x],M[x+1],M[x+2],M[x+3],M[x+a+2],M[x+a+3],Ce._helpTransform,m,!1),p[f]=1,p[f+1]=m.a,p[f+2]=m.b,p[f+3]=m.c,p[f+4]=m.d,p[f+5]=m.tx,p[f+6]=m.ty}return m}init(t,e){if(this._boneData!==null)return;if(super.init(t,e),this._armature===null)throw new Error("this._armature is null.");if(this._armature._armatureData===null)throw new Error("this._armature._armatureData is null.");if(this._armature.armatureData.parent===null)throw new Error("this._armature.armatureData.parent is null.");if(this._armature.armatureData.parent.intArray===null)throw new Error("this._armature.armatureData.parent.intArray is null.");const i=t.segmentX,n=t.segmentY,s=this._armature.armatureData.parent.intArray[t.geometry.offset+it.GeometryVertexCount],o=1e3,a=200;this._dX=a*2/i,this._dY=a*2/n,this._k=-this._dY/this._dX,this._kX=-this._dY/(o-a),this._kY=-(o-a)/this._dX,this._vertices.length=s*2,this._deformVertices.length=s*2,this._matrixCahce.length=(i*n+i*2+n*2)*2*7,this._hullCache.length=10;for(let l=0;l<s*2;++l)this._deformVertices[l]=0;this._parent!==null&&(this._parent.boneData.type===_e.Bone?this._bone=this._parent:this._bone=this._parent._bone)}update(t){if(t>=0&&this._cachedFrameIndices!==null){const e=this._cachedFrameIndices[t];if(e>=0&&this._cachedFrameIndex===e)this._transformDirty=!1;else if(e>=0)this._transformDirty=!0,this._cachedFrameIndex=e;else{if(this._hasConstraint){if(this._armature===null)throw new Error("this._armature is null.");if(this._armature._armatureData===null)throw new Error("this._armature._armatureData is null.");for(const i of this._armature._constraints)i._root===this&&i.update()}if(this._armature===null)throw new Error("this._armature is null.");if(this._armature._armatureData===null)throw new Error("this._armature._armatureData is null.");this._transformDirty||this._parent!==null&&this._parent._childrenTransformDirty?(this._transformDirty=!0,this._cachedFrameIndex=-1):this._cachedFrameIndex>=0?(this._transformDirty=!1,this._cachedFrameIndices[t]=this._cachedFrameIndex):(this._transformDirty=!0,this._cachedFrameIndex=-1)}}else{if(this._hasConstraint){if(this._armature===null)throw new Error("this._armature is null.");for(const e of this._armature._constraints)e._root===this&&e.update()}(this._transformDirty||this._parent!==null&&this._parent._childrenTransformDirty)&&(t=-1,this._transformDirty=!0,this._cachedFrameIndex=-1)}if(this._transformDirty){this._transformDirty=!1,this._childrenTransformDirty=!0;for(let a=0,l=this._matrixCahce.length;a<l;a+=7)this._matrixCahce[a]=-1;if(this._updateVertices(),this._cachedFrameIndex<0){const a=t>=0;if(this._localDirty&&this._updateGlobalTransformMatrix(a),a&&this._cachedFrameIndices!==null){if(this._armature===null)throw new Error("this._armature is null.");if(this._armature._armatureData===null)throw new Error("this._armature._armatureData is null.");this._cachedFrameIndex=this._cachedFrameIndices[t]=this._armature._armatureData.setCacheFrame(this.globalTransformMatrix,this.global)}}else{if(this._armature===null)throw new Error("this._armature is null.");if(this._armature._armatureData===null)throw new Error("this._armature._armatureData is null.");this._armature._armatureData.getCacheFrame(this.globalTransformMatrix,this.global,this._cachedFrameIndex)}const e=1e3,i=200,n=2*this.global.x,s=2*this.global.y,o=Ce._helpPoint;this.globalTransformMatrix.transformPoint(e,-i,o),this._hullCache[0]=o.x,this._hullCache[1]=o.y,this._hullCache[2]=n-o.x,this._hullCache[3]=s-o.y,this.globalTransformMatrix.transformPoint(0,this._dY,o,!0),this._hullCache[4]=o.x,this._hullCache[5]=o.y,this.globalTransformMatrix.transformPoint(i,e,o),this._hullCache[6]=o.x,this._hullCache[7]=o.y,this._hullCache[8]=n-o.x,this._hullCache[9]=s-o.y,this.globalTransformMatrix.transformPoint(this._dX,0,o,!0),this._hullCache[10]=o.x,this._hullCache[11]=o.y}else this._childrenTransformDirty&&(this._childrenTransformDirty=!1);this._localDirty=!0}}class cl extends nt{constructor(){super(...arguments),d(this,"frameIntOffset",0),d(this,"frameFloatOffset",0),d(this,"frameOffset",0),d(this,"blendType",Ye.None),d(this,"frameCount",0),d(this,"playTimes",0),d(this,"duration",0),d(this,"scale",1),d(this,"fadeInTime",0),d(this,"cacheFrameRate",0),d(this,"name",""),d(this,"cachedFrames",[]),d(this,"boneTimelines",{}),d(this,"slotTimelines",{}),d(this,"constraintTimelines",{}),d(this,"animationTimelines",{}),d(this,"boneCachedFrameIndices",{}),d(this,"slotCachedFrameIndices",{}),d(this,"actionTimeline",null),d(this,"zOrderTimeline",null),d(this,"parent",null)}static toString(){return"[class dragonBones.AnimationData]"}_onClear(){for(let t in this.boneTimelines){for(const e of this.boneTimelines[t])e.returnToPool();delete this.boneTimelines[t]}for(let t in this.slotTimelines){for(const e of this.slotTimelines[t])e.returnToPool();delete this.slotTimelines[t]}for(let t in this.constraintTimelines){for(const e of this.constraintTimelines[t])e.returnToPool();delete this.constraintTimelines[t]}for(let t in this.animationTimelines){for(const e of this.animationTimelines[t])e.returnToPool();delete this.animationTimelines[t]}for(let t in this.boneCachedFrameIndices)delete this.boneCachedFrameIndices[t];for(let t in this.slotCachedFrameIndices)delete this.slotCachedFrameIndices[t];this.actionTimeline!==null&&this.actionTimeline.returnToPool(),this.zOrderTimeline!==null&&this.zOrderTimeline.returnToPool(),this.frameIntOffset=0,this.frameFloatOffset=0,this.frameOffset=0,this.blendType=Ye.None,this.frameCount=0,this.playTimes=0,this.duration=0,this.scale=1,this.fadeInTime=0,this.cacheFrameRate=0,this.name="",this.cachedFrames.length=0,this.actionTimeline=null,this.zOrderTimeline=null,this.parent=null}cacheFrames(t){if(this.cacheFrameRate>0)return;this.cacheFrameRate=Math.max(Math.ceil(t*this.scale),1);const e=Math.ceil(this.cacheFrameRate*this.duration)+1;this.cachedFrames.length=e;for(let i=0,n=this.cacheFrames.length;i<n;++i)this.cachedFrames[i]=!1;try{for(const i of this.parent.sortedBones){const n=new Array(e);for(let s=0,o=n.length;s<o;++s)n[s]=-1;this.boneCachedFrameIndices[i.name]=n}for(const i of this.parent.sortedSlots){const n=new Array(e);for(let s=0,o=n.length;s<o;++s)n[s]=-1;this.slotCachedFrameIndices[i.name]=n}}catch{}}addBoneTimeline(t,e){const i=t in this.boneTimelines?this.boneTimelines[t]:this.boneTimelines[t]=[];i.indexOf(e)<0&&i.push(e)}addSlotTimeline(t,e){const i=t in this.slotTimelines?this.slotTimelines[t]:this.slotTimelines[t]=[];i.indexOf(e)<0&&i.push(e)}addConstraintTimeline(t,e){const i=t in this.constraintTimelines?this.constraintTimelines[t]:this.constraintTimelines[t]=[];i.indexOf(e)<0&&i.push(e)}addAnimationTimeline(t,e){const i=t in this.animationTimelines?this.animationTimelines[t]:this.animationTimelines[t]=[];i.indexOf(e)<0&&i.push(e)}getBoneTimelines(t){return t in this.boneTimelines?this.boneTimelines[t]:null}getSlotTimelines(t){return t in this.slotTimelines?this.slotTimelines[t]:null}getConstraintTimelines(t){return t in this.constraintTimelines?this.constraintTimelines[t]:null}getAnimationTimelines(t){return t in this.animationTimelines?this.animationTimelines[t]:null}getBoneCachedFrameIndices(t){return t in this.boneCachedFrameIndices?this.boneCachedFrameIndices[t]:null}getSlotCachedFrameIndices(t){return t in this.slotCachedFrameIndices?this.slotCachedFrameIndices[t]:null}}class $s extends nt{constructor(){super(...arguments),d(this,"type",st.BoneAll),d(this,"offset",0),d(this,"frameIndicesOffset",-1)}static toString(){return"[class dragonBones.TimelineData]"}_onClear(){this.type=st.BoneAll,this.offset=0,this.frameIndicesOffset=-1}}class fl extends $s{constructor(){super(...arguments),d(this,"x",0),d(this,"y",0)}static toString(){return"[class dragonBones.AnimationTimelineData]"}_onClear(){super._onClear(),this.x=0,this.y=0}}class hr extends nt{constructor(){super(...arguments),d(this,"type"),d(this,"name",""),d(this,"path",""),d(this,"transform",new Dt),d(this,"parent",null)}_onClear(){this.name="",this.path="",this.transform.identity(),this.parent=null}}class Ym extends hr{constructor(){super(...arguments),d(this,"inheritAnimation",!1),d(this,"actions",[]),d(this,"armature",null)}static toString(){return"[class dragonBones.ArmatureDisplayData]"}_onClear(){super._onClear();for(const t of this.actions)t.returnToPool();this.type=Rt.Armature,this.inheritAnimation=!1,this.actions.length=0,this.armature=null}addAction(t){this.actions.push(t)}}class jm extends hr{constructor(){super(...arguments),d(this,"boundingBox",null)}static toString(){return"[class dragonBones.BoundingBoxDisplayData]"}_onClear(){super._onClear(),this.boundingBox!==null&&this.boundingBox.returnToPool(),this.type=Rt.BoundingBox,this.boundingBox=null}}class Js{constructor(){d(this,"isShared",!1),d(this,"inheritDeform",!1),d(this,"offset",0),d(this,"data",null),d(this,"weight",null)}clear(){!this.isShared&&this.weight!==null&&this.weight.returnToPool(),this.isShared=!1,this.inheritDeform=!1,this.offset=0,this.data=null,this.weight=null}shareFrom(t){this.isShared=!0,this.offset=t.offset,this.weight=t.weight}get vertexCount(){if(this.data===null||this.offset===void 0||this.data.intArray===null)throw new Error;return this.data.intArray[this.offset+it.GeometryVertexCount]}get triangleCount(){if(this.data===null||this.offset===void 0||this.data.intArray===null)throw new Error;return this.data.intArray[this.offset+it.GeometryTriangleCount]}}class qm extends hr{constructor(){super(...arguments),d(this,"pivot",new Yr),d(this,"texture",null)}static toString(){return"[class dragonBones.ImageDisplayData]"}_onClear(){super._onClear(),this.type=Rt.Image,this.pivot.clear(),this.texture=null}}class Zm extends hr{constructor(){super(...arguments),d(this,"geometry",new Js),d(this,"texture",null)}static toString(){return"[class dragonBones.MeshDisplayData]"}_onClear(){super._onClear(),this.type=Rt.Mesh,this.geometry.clear(),this.texture=null}}class Ao extends hr{constructor(){super(...arguments),d(this,"closed",!1),d(this,"constantSpeed",!1),d(this,"geometry",new Js),d(this,"curveLengths",[])}static toString(){return"[class dragonBones.PathDisplayData]"}_onClear(){super._onClear(),this.type=Rt.Path,this.closed=!1,this.constantSpeed=!1,this.geometry.clear(),this.curveLengths.length=0}}class dl extends nt{constructor(){super(...arguments),d(this,"count",0),d(this,"offset",0),d(this,"bones",[])}static toString(){return"[class dragonBones.WeightData]"}_onClear(){this.count=0,this.offset=0,this.bones.length=0}addBone(t){this.bones.push(t)}}const Bi=class{static _getArmatureType(r){switch(r.toLowerCase()){case"stage":return Mi.Stage;case"armature":return Mi.Armature;case"movieclip":return Mi.MovieClip;default:return Mi.Armature}}static _getBoneType(r){switch(r.toLowerCase()){case"bone":return _e.Bone;case"surface":return _e.Surface;default:return _e.Bone}}static _getPositionMode(r){switch(r.toLocaleLowerCase()){case"percent":return Yi.Percent;case"fixed":return Yi.Fixed;default:return Yi.Percent}}static _getSpacingMode(r){switch(r.toLocaleLowerCase()){case"length":return mi.Length;case"percent":return mi.Percent;case"fixed":return mi.Fixed;default:return mi.Length}}static _getRotateMode(r){switch(r.toLocaleLowerCase()){case"tangent":return ei.Tangent;case"chain":return ei.Chain;case"chainscale":return ei.ChainScale;default:return ei.Tangent}}static _getDisplayType(r){switch(r.toLowerCase()){case"image":return Rt.Image;case"mesh":return Rt.Mesh;case"armature":return Rt.Armature;case"boundingbox":return Rt.BoundingBox;case"path":return Rt.Path;default:return Rt.Image}}static _getBoundingBoxType(r){switch(r.toLowerCase()){case"rectangle":return Re.Rectangle;case"ellipse":return Re.Ellipse;case"polygon":return Re.Polygon;default:return Re.Rectangle}}static _getBlendMode(r){switch(r.toLowerCase()){case"normal":return ee.Normal;case"add":return ee.Add;case"alpha":return ee.Alpha;case"darken":return ee.Darken;case"difference":return ee.Difference;case"erase":return ee.Erase;case"hardlight":return ee.HardLight;case"invert":return ee.Invert;case"layer":return ee.Layer;case"lighten":return ee.Lighten;case"multiply":return ee.Multiply;case"overlay":return ee.Overlay;case"screen":return ee.Screen;case"subtract":return ee.Subtract;default:return ee.Normal}}static _getAnimationBlendType(r){switch(r.toLowerCase()){case"none":return Ye.None;case"1d":return Ye.E1D;default:return Ye.None}}static _getActionType(r){switch(r.toLowerCase()){case"play":return Kt.Play;case"frame":return Kt.Frame;case"sound":return Kt.Sound;default:return Kt.Play}}};let g=Bi;d(g,"DATA_VERSION_2_3","2.3"),d(g,"DATA_VERSION_3_0","3.0"),d(g,"DATA_VERSION_4_0","4.0"),d(g,"DATA_VERSION_4_5","4.5"),d(g,"DATA_VERSION_5_0","5.0"),d(g,"DATA_VERSION_5_5","5.5"),d(g,"DATA_VERSION_5_6","5.6"),d(g,"DATA_VERSION",Bi.DATA_VERSION_5_6),d(g,"DATA_VERSIONS",[Bi.DATA_VERSION_4_0,Bi.DATA_VERSION_4_5,Bi.DATA_VERSION_5_0,Bi.DATA_VERSION_5_5,Bi.DATA_VERSION_5_6]),d(g,"TEXTURE_ATLAS","textureAtlas"),d(g,"SUB_TEXTURE","SubTexture"),d(g,"FORMAT","format"),d(g,"IMAGE_PATH","imagePath"),d(g,"WIDTH","width"),d(g,"HEIGHT","height"),d(g,"ROTATED","rotated"),d(g,"FRAME_X","frameX"),d(g,"FRAME_Y","frameY"),d(g,"FRAME_WIDTH","frameWidth"),d(g,"FRAME_HEIGHT","frameHeight"),d(g,"DRADON_BONES","dragonBones"),d(g,"USER_DATA","userData"),d(g,"ARMATURE","armature"),d(g,"CANVAS","canvas"),d(g,"BONE","bone"),d(g,"SURFACE","surface"),d(g,"SLOT","slot"),d(g,"CONSTRAINT","constraint"),d(g,"SKIN","skin"),d(g,"DISPLAY","display"),d(g,"FRAME","frame"),d(g,"IK","ik"),d(g,"PATH_CONSTRAINT","path"),d(g,"ANIMATION","animation"),d(g,"TIMELINE","timeline"),d(g,"FFD","ffd"),d(g,"TRANSLATE_FRAME","translateFrame"),d(g,"ROTATE_FRAME","rotateFrame"),d(g,"SCALE_FRAME","scaleFrame"),d(g,"DISPLAY_FRAME","displayFrame"),d(g,"COLOR_FRAME","colorFrame"),d(g,"DEFAULT_ACTIONS","defaultActions"),d(g,"ACTIONS","actions"),d(g,"EVENTS","events"),d(g,"INTS","ints"),d(g,"FLOATS","floats"),d(g,"STRINGS","strings"),d(g,"TRANSFORM","transform"),d(g,"PIVOT","pivot"),d(g,"AABB","aabb"),d(g,"COLOR","color"),d(g,"VERSION","version"),d(g,"COMPATIBLE_VERSION","compatibleVersion"),d(g,"FRAME_RATE","frameRate"),d(g,"TYPE","type"),d(g,"SUB_TYPE","subType"),d(g,"NAME","name"),d(g,"PARENT","parent"),d(g,"TARGET","target"),d(g,"STAGE","stage"),d(g,"SHARE","share"),d(g,"PATH","path"),d(g,"LENGTH","length"),d(g,"DISPLAY_INDEX","displayIndex"),d(g,"Z_ORDER","zOrder"),d(g,"Z_INDEX","zIndex"),d(g,"BLEND_MODE","blendMode"),d(g,"INHERIT_TRANSLATION","inheritTranslation"),d(g,"INHERIT_ROTATION","inheritRotation"),d(g,"INHERIT_SCALE","inheritScale"),d(g,"INHERIT_REFLECTION","inheritReflection"),d(g,"INHERIT_ANIMATION","inheritAnimation"),d(g,"INHERIT_DEFORM","inheritDeform"),d(g,"SEGMENT_X","segmentX"),d(g,"SEGMENT_Y","segmentY"),d(g,"BEND_POSITIVE","bendPositive"),d(g,"CHAIN","chain"),d(g,"WEIGHT","weight"),d(g,"BLEND_TYPE","blendType"),d(g,"FADE_IN_TIME","fadeInTime"),d(g,"PLAY_TIMES","playTimes"),d(g,"SCALE","scale"),d(g,"OFFSET","offset"),d(g,"POSITION","position"),d(g,"DURATION","duration"),d(g,"TWEEN_EASING","tweenEasing"),d(g,"TWEEN_ROTATE","tweenRotate"),d(g,"TWEEN_SCALE","tweenScale"),d(g,"CLOCK_WISE","clockwise"),d(g,"CURVE","curve"),d(g,"SOUND","sound"),d(g,"EVENT","event"),d(g,"ACTION","action"),d(g,"X","x"),d(g,"Y","y"),d(g,"SKEW_X","skX"),d(g,"SKEW_Y","skY"),d(g,"SCALE_X","scX"),d(g,"SCALE_Y","scY"),d(g,"VALUE","value"),d(g,"ROTATE","rotate"),d(g,"SKEW","skew"),d(g,"ALPHA","alpha"),d(g,"ALPHA_OFFSET","aO"),d(g,"RED_OFFSET","rO"),d(g,"GREEN_OFFSET","gO"),d(g,"BLUE_OFFSET","bO"),d(g,"ALPHA_MULTIPLIER","aM"),d(g,"RED_MULTIPLIER","rM"),d(g,"GREEN_MULTIPLIER","gM"),d(g,"BLUE_MULTIPLIER","bM"),d(g,"UVS","uvs"),d(g,"VERTICES","vertices"),d(g,"TRIANGLES","triangles"),d(g,"WEIGHTS","weights"),d(g,"SLOT_POSE","slotPose"),d(g,"BONE_POSE","bonePose"),d(g,"BONES","bones"),d(g,"POSITION_MODE","positionMode"),d(g,"SPACING_MODE","spacingMode"),d(g,"ROTATE_MODE","rotateMode"),d(g,"SPACING","spacing"),d(g,"ROTATE_OFFSET","rotateOffset"),d(g,"ROTATE_MIX","rotateMix"),d(g,"TRANSLATE_MIX","translateMix"),d(g,"TARGET_DISPLAY","targetDisplay"),d(g,"CLOSED","closed"),d(g,"CONSTANT_SPEED","constantSpeed"),d(g,"VERTEX_COUNT","vertexCount"),d(g,"LENGTHS","lengths"),d(g,"GOTO_AND_PLAY","gotoAndPlay"),d(g,"DEFAULT_NAME","default");class Hs{constructor(t=0,e=0,i=0,n=0){d(this,"x"),d(this,"y"),d(this,"width"),d(this,"height"),this.x=t,this.y=e,this.width=i,this.height=n}copyFrom(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height}clear(){this.x=this.y=0,this.width=this.height=0}}class Km extends nt{constructor(){super(...arguments),d(this,"type",Mi.Armature),d(this,"frameRate",0),d(this,"cacheFrameRate",0),d(this,"scale",1),d(this,"name",""),d(this,"aabb",new Hs),d(this,"animationNames",[]),d(this,"sortedBones",[]),d(this,"sortedSlots",[]),d(this,"defaultActions",[]),d(this,"actions",[]),d(this,"bones",{}),d(this,"slots",{}),d(this,"constraints",{}),d(this,"skins",{}),d(this,"animations",{}),d(this,"defaultSkin",null),d(this,"defaultAnimation",null),d(this,"canvas",null),d(this,"userData",null),d(this,"parent",null)}static toString(){return"[class dragonBones.ArmatureData]"}_onClear(){for(const t of this.defaultActions)t.returnToPool();for(const t of this.actions)t.returnToPool();for(let t in this.bones)this.bones[t].returnToPool(),delete this.bones[t];for(let t in this.slots)this.slots[t].returnToPool(),delete this.slots[t];for(let t in this.constraints)this.constraints[t].returnToPool(),delete this.constraints[t];for(let t in this.skins)this.skins[t].returnToPool(),delete this.skins[t];for(let t in this.animations)this.animations[t].returnToPool(),delete this.animations[t];this.canvas!==null&&this.canvas.returnToPool(),this.userData!==null&&this.userData.returnToPool(),this.type=Mi.Armature,this.frameRate=0,this.cacheFrameRate=0,this.scale=1,this.name="",this.aabb.clear(),this.animationNames.length=0,this.sortedBones.length=0,this.sortedSlots.length=0,this.defaultActions.length=0,this.actions.length=0,this.defaultSkin=null,this.defaultAnimation=null,this.canvas=null,this.userData=null,this.parent=null}sortBones(){const t=this.sortedBones.length;if(t<=0)return;const e=this.sortedBones.concat();let i=0,n=0;for(this.sortedBones.length=0;n<t;){const s=e[i++];if(i>=t&&(i=0),this.sortedBones.indexOf(s)>=0)continue;let o=!1;for(let a in this.constraints){const l=this.constraints[a];if(l.root===s&&this.sortedBones.findIndex(h=>h===l.target)<0){o=!0;break}}o||s.parent!==null&&this.sortedBones.indexOf(s.parent)<0||(this.sortedBones.push(s),n++)}}cacheFrames(t){if(!(this.cacheFrameRate>0)){this.cacheFrameRate=t;for(let e in this.animations)this.animations[e].cacheFrames(this.cacheFrameRate)}}setCacheFrame(t,e){if(this.parent===null)throw new Error("this.parent is null.");const i=this.parent.cachedFrames;let n=i.length;return i.length+=10,i[n]=t.a,i[n+1]=t.b,i[n+2]=t.c,i[n+3]=t.d,i[n+4]=t.tx,i[n+5]=t.ty,i[n+6]=e.rotation,i[n+7]=e.skew,i[n+8]=e.scaleX,i[n+9]=e.scaleY,n}getCacheFrame(t,e,i){if(this.parent===null)throw new Error("this.parent is nul.");const n=this.parent.cachedFrames;t.a=n[i],t.b=n[i+1],t.c=n[i+2],t.d=n[i+3],t.tx=n[i+4],t.ty=n[i+5],e.rotation=n[i+6],e.skew=n[i+7],e.scaleX=n[i+8],e.scaleY=n[i+9],e.x=t.tx,e.y=t.ty}addBone(t){if(t.name===void 0)throw new Error("value.name is undefined.");if(t.name in this.bones){console.warn("Same bone: "+t.name);return}this.bones[t.name]=t,this.sortedBones.push(t)}addSlot(t){if(t.name===void 0)throw new Error("value.name is undefined.");if(t.name in this.slots){console.warn("Same slot: "+t.name);return}this.slots[t.name]=t,this.sortedSlots.push(t)}addConstraint(t){if(t.name===void 0)throw new Error("value.name is undefined.");if(t.name in this.constraints){console.warn("Same constraint: "+t.name);return}this.constraints[t.name]=t}addSkin(t){if(t.name===void 0)throw new Error("value.name is undefined.");if(t.name in this.skins){console.warn("Same skin: "+t.name);return}t.parent=this,this.skins[t.name]=t,this.defaultSkin===null&&(this.defaultSkin=t),t.name==="default"&&(this.defaultSkin=t)}addAnimation(t){if(t.name===void 0)throw new Error("value.name is undefined.");if(t.name in this.animations){console.warn("Same animation: "+t.name);return}t.parent=this,this.animations[t.name]=t,this.animationNames.push(t.name),this.defaultAnimation===null&&(this.defaultAnimation=t)}addAction(t,e){e?this.defaultActions.push(t):this.actions.push(t)}getBone(t){return t in this.bones?this.bones[t]:null}getSlot(t){return t in this.slots?this.slots[t]:null}getConstraint(t){return t in this.constraints?this.constraints[t]:null}getSkin(t){return t in this.skins?this.skins[t]:null}getMesh(t,e,i){const n=this.getSkin(t);return n===null?null:n.getDisplay(e,i)}getAnimation(t){return t in this.animations?this.animations[t]:null}}class ml extends nt{constructor(){super(...arguments),d(this,"inheritTranslation",!1),d(this,"inheritRotation",!1),d(this,"inheritScale",!1),d(this,"inheritReflection",!1),d(this,"type",_e.Bone),d(this,"length",0),d(this,"alpha",1),d(this,"name",""),d(this,"transform",new Dt),d(this,"userData",null),d(this,"parent",null)}static toString(){return"[class dragonBones.BoneData]"}_onClear(){this.userData!==null&&this.userData.returnToPool(),this.inheritTranslation=!1,this.inheritRotation=!1,this.inheritScale=!1,this.inheritReflection=!1,this.type=_e.Bone,this.length=0,this.alpha=1,this.name="",this.transform.identity(),this.userData=null,this.parent=null}}class $m extends ml{constructor(){super(...arguments),d(this,"segmentX",0),d(this,"segmentY",0),d(this,"geometry",new Js)}static toString(){return"[class dragonBones.SurfaceData]"}_onClear(){super._onClear(),this.type=_e.Surface,this.segmentX=0,this.segmentY=0,this.geometry.clear()}}class Fr extends nt{constructor(){super(...arguments),d(this,"blendMode",ee.Normal),d(this,"displayIndex",0),d(this,"zOrder",0),d(this,"zIndex",0),d(this,"alpha",1),d(this,"name",""),d(this,"color",null),d(this,"userData",null),d(this,"parent",null)}static createColor(){return new jr}static toString(){return"[class dragonBones.SlotData]"}_onClear(){this.userData!==null&&this.userData.returnToPool(),this.blendMode=ee.Normal,this.displayIndex=0,this.zOrder=0,this.zIndex=0,this.alpha=1,this.name="",this.color=null,this.userData=null,this.parent=null}}d(Fr,"DEFAULT_COLOR",new jr);class Qs extends nt{constructor(){super(...arguments),d(this,"type"),d(this,"color",0),d(this,"width",0),d(this,"height",0)}_onClear(){this.color=0,this.width=0,this.height=0}}class bi extends Qs{static toString(){return"[class dragonBones.RectangleBoundingBoxData]"}static _computeOutCode(t,e,i,n,s,o){let a=0;return t<i?a|=1:t>s&&(a|=2),e<n?a|=4:e>o&&(a|=8),a}static rectangleIntersectsSegment(t,e,i,n,s,o,a,l,h=null,u=null,c=null){const f=t>s&&t<a&&e>o&&e<l,_=i>s&&i<a&&n>o&&n<l;if(f&&_)return-1;let y=0,p=bi._computeOutCode(t,e,s,o,a,l),m=bi._computeOutCode(i,n,s,o,a,l);for(;;){if(p|m){if(p&m)break}else{y=2;break}let x=0,M=0,b=0;const S=p!==0?p:m;S&4?(x=t+(i-t)*(o-e)/(n-e),M=o,c!==null&&(b=-Math.PI*.5)):S&8?(x=t+(i-t)*(l-e)/(n-e),M=l,c!==null&&(b=Math.PI*.5)):S&2?(M=e+(n-e)*(a-t)/(i-t),x=a,c!==null&&(b=0)):S&1&&(M=e+(n-e)*(s-t)/(i-t),x=s,c!==null&&(b=Math.PI)),S===p?(t=x,e=M,p=bi._computeOutCode(t,e,s,o,a,l),c!==null&&(c.x=b)):(i=x,n=M,m=bi._computeOutCode(i,n,s,o,a,l),c!==null&&(c.y=b))}return y&&(f?(y=2,h!==null&&(h.x=i,h.y=n),u!==null&&(u.x=i,u.y=i),c!==null&&(c.x=c.y+Math.PI)):_?(y=1,h!==null&&(h.x=t,h.y=e),u!==null&&(u.x=t,u.y=e),c!==null&&(c.y=c.x+Math.PI)):(y=3,h!==null&&(h.x=t,h.y=e),u!==null&&(u.x=i,u.y=n))),y}_onClear(){super._onClear(),this.type=Re.Rectangle}containsPoint(t,e){if(this.width===void 0||this.height===void 0)throw new Error;const i=this.width*.5;if(t>=-i&&t<=i){const n=this.height*.5;if(e>=-n&&e<=n)return!0}return!1}intersectsSegment(t,e,i,n,s=null,o=null,a=null){if(this.width===void 0||this.height===void 0)throw new Error;const l=this.width*.5,h=this.height*.5;return bi.rectangleIntersectsSegment(t,e,i,n,-l,-h,l,h,s,o,a)}}class ta extends Qs{static toString(){return"[class dragonBones.EllipseData]"}static ellipseIntersectsSegment(t,e,i,n,s,o,a,l,h=null,u=null,c=null){const f=a/l,_=f*f;e*=f,n*=f;const y=i-t,p=n-e,m=Math.sqrt(y*y+p*p),x=y/m,M=p/m,b=(s-t)*x+(o-e)*M,S=b*b,w=t*t+e*e,E=a*a,R=E-w+S;let v=0;if(R>=0){const D=Math.sqrt(R),L=b-D,V=b+D,q=L<0?-1:L<=m?0:1,O=V<0?-1:V<=m?0:1,I=q*O;if(I<0)return-1;I===0&&(q===-1?(v=2,i=t+V*x,n=(e+V*M)/f,h!==null&&(h.x=i,h.y=n),u!==null&&(u.x=i,u.y=n),c!==null&&(c.x=Math.atan2(n/E*_,i/E),c.y=c.x+Math.PI)):O===1?(v=1,t=t+L*x,e=(e+L*M)/f,h!==null&&(h.x=t,h.y=e),u!==null&&(u.x=t,u.y=e),c!==null&&(c.x=Math.atan2(e/E*_,t/E),c.y=c.x+Math.PI)):(v=3,h!==null&&(h.x=t+L*x,h.y=(e+L*M)/f,c!==null&&(c.x=Math.atan2(h.y/E*_,h.x/E))),u!==null&&(u.x=t+V*x,u.y=(e+V*M)/f,c!==null&&(c.y=Math.atan2(u.y/E*_,u.x/E)))))}return v}_onClear(){super._onClear(),this.type=Re.Ellipse}containsPoint(t,e){if(this.width===void 0||this.height===void 0)throw new Error;const i=this.width*.5;if(t>=-i&&t<=i){const n=this.height*.5;if(e>=-n&&e<=n)return e*=i/n,Math.sqrt(t*t+e*e)<=i}return!1}intersectsSegment(t,e,i,n,s=null,o=null,a=null){if(this.width===void 0||this.height===void 0)throw new Error;return ta.ellipseIntersectsSegment(t,e,i,n,0,0,this.width*.5,this.height*.5,s,o,a)}}class ea extends Qs{constructor(){super(...arguments),d(this,"x",0),d(this,"y",0),d(this,"vertices",[])}static toString(){return"[class dragonBones.PolygonBoundingBoxData]"}static polygonIntersectsSegment(t,e,i,n,s,o=null,a=null,l=null){t===i&&(t=i+1e-6),e===n&&(e=n+1e-6);const h=s.length,u=t-i,c=e-n,f=t*n-e*i;let _=0,y=s[h-2],p=s[h-1],m=0,x=0,M=0,b=0,S=0,w=0;for(let E=0;E<h;E+=2){const R=s[E],v=s[E+1];y===R&&(y=R+1e-4),p===v&&(p=v+1e-4);const D=y-R,L=p-v,V=y*v-p*R,q=u*L-c*D,O=(f*D-u*V)/q;if((O>=y&&O<=R||O>=R&&O<=y)&&(u===0||O>=t&&O<=i||O>=i&&O<=t)){const I=(f*L-c*V)/q;if((I>=p&&I<=v||I>=v&&I<=p)&&(c===0||I>=e&&I<=n||I>=n&&I<=e))if(a!==null){let k=O-t;k<0&&(k=-k),_===0?(m=k,x=k,M=O,b=I,S=O,w=I,l!==null&&(l.x=Math.atan2(v-p,R-y)-Math.PI*.5,l.y=l.x)):(k<m&&(m=k,M=O,b=I,l!==null&&(l.x=Math.atan2(v-p,R-y)-Math.PI*.5)),k>x&&(x=k,S=O,w=I,l!==null&&(l.y=Math.atan2(v-p,R-y)-Math.PI*.5))),_++}else{M=O,b=I,S=O,w=I,_++,l!==null&&(l.x=Math.atan2(v-p,R-y)-Math.PI*.5,l.y=l.x);break}}y=R,p=v}return _===1?(o!==null&&(o.x=M,o.y=b),a!==null&&(a.x=M,a.y=b),l!==null&&(l.y=l.x+Math.PI)):_>1&&(_++,o!==null&&(o.x=M,o.y=b),a!==null&&(a.x=S,a.y=w)),_}_onClear(){super._onClear(),this.type=Re.Polygon,this.x=0,this.y=0,this.vertices.length=0}containsPoint(t,e){if(this.x===void 0||this.y===void 0)throw new Error("");if(this.width===void 0||this.height===void 0)throw new Error;let i=!1;if(t>=this.x&&t<=this.width&&e>=this.y&&e<=this.height)for(let n=0,s=this.vertices.length,o=s-2;n<s;n+=2){const a=this.vertices[o+1],l=this.vertices[n+1];if(l<e&&a>=e||a<e&&l>=e){const h=this.vertices[o],u=this.vertices[n];(e-l)*(h-u)/(a-l)+u<t&&(i=!i)}o=n}return i}intersectsSegment(t,e,i,n,s=null,o=null,a=null){if(this.x===void 0||this.y===void 0)throw new Error("");if(this.width===void 0||this.height===void 0)throw new Error;let l=0;return bi.rectangleIntersectsSegment(t,e,i,n,this.x,this.y,this.x+this.width,this.y+this.height,null,null,null)!==0&&(l=ea.polygonIntersectsSegment(t,e,i,n,this.vertices,s,o,a)),l}}class Jm extends nt{constructor(){super(...arguments),d(this,"hasBackground",!1),d(this,"color",0),d(this,"x",0),d(this,"y",0),d(this,"width",0),d(this,"height",0)}static toString(){return"[class dragonBones.CanvasData]"}_onClear(){this.hasBackground=!1,this.color=0,this.x=0,this.y=0,this.width=0,this.height=0}}class pl extends nt{constructor(){super(...arguments),d(this,"order",0),d(this,"name",""),d(this,"type",tn.IK),d(this,"target",null),d(this,"root",null),d(this,"bone",null)}_onClear(){this.order=0,this.name="",this.type=tn.IK,this.target=null,this.root=null,this.bone=null}}class Qm extends pl{constructor(){super(...arguments),d(this,"scaleEnabled",!1),d(this,"bendPositive",!1),d(this,"weight",1)}static toString(){return"[class dragonBones.IKConstraintData]"}_onClear(){super._onClear(),this.scaleEnabled=!1,this.bendPositive=!1,this.weight=1}}class tp extends pl{constructor(){super(...arguments),d(this,"pathSlot",null),d(this,"pathDisplayData",null),d(this,"bones",[]),d(this,"positionMode",Yi.Fixed),d(this,"spacingMode",mi.Fixed),d(this,"rotateMode",ei.Chain),d(this,"position",0),d(this,"spacing",0),d(this,"rotateOffset",0),d(this,"rotateMix",0),d(this,"translateMix",0)}static toString(){return"[class dragonBones.PathConstraintData]"}_onClear(){super._onClear(),this.pathSlot=null,this.pathDisplayData=null,this.bones.length=0,this.positionMode=Yi.Fixed,this.spacingMode=mi.Fixed,this.rotateMode=ei.Chain,this.position=0,this.spacing=0,this.rotateOffset=0,this.rotateMix=0,this.translateMix=0}AddBone(t){this.bones.push(t)}}class ep extends nt{constructor(){super(...arguments),d(this,"autoSearch",!1),d(this,"frameRate",0),d(this,"version",""),d(this,"name",""),d(this,"stage",null),d(this,"frameIndices",[]),d(this,"cachedFrames",[]),d(this,"armatureNames",[]),d(this,"armatures",{}),d(this,"binary",null),d(this,"intArray",null),d(this,"floatArray",null),d(this,"frameIntArray",null),d(this,"frameFloatArray",null),d(this,"frameArray",null),d(this,"timelineArray",null),d(this,"colorArray",null),d(this,"userData",null)}static toString(){return"[class dragonBones.DragonBonesData]"}_onClear(){for(let t in this.armatures)this.armatures[t].returnToPool(),delete this.armatures[t];this.userData!==null&&this.userData.returnToPool(),this.autoSearch=!1,this.frameRate=0,this.version="",this.name="",this.stage=null,this.frameIndices.length=0,this.cachedFrames.length=0,this.armatureNames.length=0,this.binary=null,this.intArray=null,this.floatArray=null,this.frameIntArray=null,this.frameFloatArray=null,this.frameArray=null,this.timelineArray=null,this.colorArray=null,this.userData=null}addArmature(t){if(t.name===void 0)throw new Error("value.name is undefined.");if(t.name in this.armatures){console.warn("Same armature: "+t.name);return}t.parent=this,this.armatures[t.name]=t,this.armatureNames.push(t.name)}getArmature(t){return t in this.armatures?this.armatures[t]:null}}class ip extends nt{constructor(){super(...arguments),d(this,"name",""),d(this,"displays",{}),d(this,"parent",null)}static toString(){return"[class dragonBones.SkinData]"}_onClear(){for(let t in this.displays){const e=this.displays[t];for(const i of e)i!==null&&i.returnToPool();delete this.displays[t]}this.name="",this.parent=null}addDisplay(t,e){t in this.displays||(this.displays[t]=[]),e!==null&&(e.parent=this),this.displays[t].push(e)}getDisplay(t,e){const i=this.getDisplays(t);if(i!==null){for(const n of i)if(n!==null&&n.name===e)return n}return null}getDisplays(t){return t in this.displays?this.displays[t]:null}}class np extends nt{constructor(){super(...arguments),d(this,"autoSearch",!1),d(this,"width",0),d(this,"height",0),d(this,"scale",1),d(this,"name",""),d(this,"imagePath",""),d(this,"textures",{})}_onClear(){for(let t in this.textures)this.textures[t].returnToPool(),delete this.textures[t];this.autoSearch=!1,this.width=0,this.height=0,this.scale=1,this.name="",this.imagePath=""}copyFrom(t){this.autoSearch=t.autoSearch,this.scale=t.scale,this.width=t.width,this.height=t.height,this.name=t.name,this.imagePath=t.imagePath;for(let e in this.textures)this.textures[e].returnToPool(),delete this.textures[e];for(let e in t.textures){const i=this.createTexture();i.copyFrom(t.textures[e]),this.textures[e]=i}}addTexture(t){if(t.name===void 0)throw new Error("value.name is undefined.");if(t.name in this.textures){console.warn("Same texture: "+t.name);return}t.parent=this,this.textures[t.name]=t}getTexture(t){return t in this.textures?this.textures[t]:null}}class qr extends nt{constructor(){super(...arguments),d(this,"rotated",!1),d(this,"name",""),d(this,"region",new Hs),d(this,"parent",null),d(this,"frame",null)}static createRectangle(){return new Hs}_onClear(){this.rotated=!1,this.name="",this.region.clear(),this.parent=null,this.frame=null}copyFrom(t){this.rotated=t.rotated,this.name=t.name,this.region.copyFrom(t.region),this.parent=t.parent,this.frame===null&&t.frame!==null?this.frame=qr.createRectangle():this.frame!==null&&t.frame===null&&(this.frame=null),this.frame!==null&&t.frame!==null&&this.frame.copyFrom(t.frame)}}class Rs extends nt{constructor(){super(...arguments),d(this,"ints",[]),d(this,"floats",[]),d(this,"strings",[])}static toString(){return"[class dragonBones.UserData]"}_onClear(){this.ints.length=0,this.floats.length=0,this.strings.length=0}addInt(t){this.ints.push(t)}addFloat(t){this.floats.push(t)}addString(t){this.strings.push(t)}getInt(t=0){return t>=0&&t<this.ints.length?this.ints[t]:0}getFloat(t=0){return t>=0&&t<this.floats.length?this.floats[t]:0}getString(t=0){return t>=0&&t<this.strings.length?this.strings[t]:""}}class Eo extends nt{constructor(){super(...arguments),d(this,"type",Kt.Play),d(this,"name",""),d(this,"bone",null),d(this,"slot",null),d(this,"data",null)}static toString(){return"[class dragonBones.ActionData]"}_onClear(){this.data!==null&&this.data.returnToPool(),this.type=Kt.Play,this.name="",this.bone=null,this.slot=null,this.data=null}}const z=class extends g{constructor(){super(...arguments),d(this,"_rawTextureAtlasIndex",0),d(this,"_rawBones",[]),d(this,"_data",null),d(this,"_armature",null),d(this,"_bone",null),d(this,"_geometry",null),d(this,"_slot",null),d(this,"_skin",null),d(this,"_mesh",null),d(this,"_animation",null),d(this,"_timeline",null),d(this,"_rawTextureAtlases",null),d(this,"_frameValueType",0),d(this,"_defaultColorOffset",-1),d(this,"_prevClockwise",0),d(this,"_prevRotation",0),d(this,"_frameDefaultValue",0),d(this,"_frameValueScale",1),d(this,"_helpMatrixA",new Rn),d(this,"_helpMatrixB",new Rn),d(this,"_helpTransform",new Dt),d(this,"_helpColorTransform",new jr),d(this,"_helpPoint",new Yr),d(this,"_helpArray",[]),d(this,"_intArray",[]),d(this,"_floatArray",[]),d(this,"_frameIntArray",[]),d(this,"_frameFloatArray",[]),d(this,"_frameArray",[]),d(this,"_timelineArray",[]),d(this,"_colorArray",[]),d(this,"_cacheRawMeshes",[]),d(this,"_cacheMeshes",[]),d(this,"_actionFrames",[]),d(this,"_weightSlotPose",{}),d(this,"_weightBonePoses",{}),d(this,"_cacheBones",{}),d(this,"_slotChildActions",{})}static _getBoolean(r,t,e){if(t in r){const i=r[t],n=typeof i;if(n==="boolean")return i;if(n==="string")switch(i){case"0":case"NaN":case"":case"false":case"null":case"undefined":return!1;default:return!0}else return!!i}return e}static _getNumber(r,t,e){if(t in r){const i=r[t];return i===null||i==="NaN"?e:+i||0}return e}static _getString(r,t,e){if(t in r){const i=r[t];return typeof i=="string"?i:String(i)}return e}_getCurvePoint(r,t,e,i,n,s,o,a,l,h){const u=1-l,c=u*u,f=l*l,_=u*c,y=3*l*c,p=3*u*f,m=l*f;h.x=_*r+y*e+p*n+m*o,h.y=_*t+y*i+p*s+m*a}_samplingEasingCurve(r,t){const e=r.length;if(e%3===1){let i=-2;for(let n=0,s=t.length;n<s;++n){let o=(n+1)/(s+1);for(;(i+6<e?r[i+6]:1)<o;)i+=6;const a=i>=0&&i+6<e,l=a?r[i]:0,h=a?r[i+1]:0,u=r[i+2],c=r[i+3],f=r[i+4],_=r[i+5],y=a?r[i+6]:1,p=a?r[i+7]:1;let m=0,x=1;for(;x-m>1e-4;){const M=(x+m)*.5;this._getCurvePoint(l,h,u,c,f,_,y,p,M,this._helpPoint),o-this._helpPoint.x>0?m=M:x=M}t[n]=this._helpPoint.y}return!0}else{let i=0;for(let n=0,s=t.length;n<s;++n){let o=(n+1)/(s+1);for(;r[i+6]<o;)i+=6;const a=r[i],l=r[i+1],h=r[i+2],u=r[i+3],c=r[i+4],f=r[i+5],_=r[i+6],y=r[i+7];let p=0,m=1;for(;m-p>1e-4;){const x=(m+p)*.5;this._getCurvePoint(a,l,h,u,c,f,_,y,x,this._helpPoint),o-this._helpPoint.x>0?p=x:m=x}t[n]=this._helpPoint.y}return!1}}_parseActionDataInFrame(r,t,e,i){g.EVENT in r&&this._mergeActionFrame(r[g.EVENT],t,Kt.Frame,e,i),g.SOUND in r&&this._mergeActionFrame(r[g.SOUND],t,Kt.Sound,e,i),g.ACTION in r&&this._mergeActionFrame(r[g.ACTION],t,Kt.Play,e,i),g.EVENTS in r&&this._mergeActionFrame(r[g.EVENTS],t,Kt.Frame,e,i),g.ACTIONS in r&&this._mergeActionFrame(r[g.ACTIONS],t,Kt.Play,e,i)}_mergeActionFrame(r,t,e,i,n){const s=this._armature.actions.length,o=this._parseActionData(r,e,i,n);let a=0,l=null;for(const h of o)this._armature.addAction(h,!1);this._actionFrames.length===0&&(l=new Ls,l.frameStart=0,this._actionFrames.push(l),l=null);for(const h of this._actionFrames){if(h.frameStart===t){l=h;break}else if(h.frameStart>t)break;a++}l===null&&(l=new Ls,l.frameStart=t,this._actionFrames.splice(a,0,l));for(let h=0;h<o.length;++h)l.actions.push(s+h)}_parseArmature(r,t){const e=nt.borrowObject(Km);if(e.name=z._getString(r,g.NAME,""),e.frameRate=z._getNumber(r,g.FRAME_RATE,this._data.frameRate),e.scale=t,g.TYPE in r&&typeof r[g.TYPE]=="string"?e.type=g._getArmatureType(r[g.TYPE]):e.type=z._getNumber(r,g.TYPE,Mi.Armature),e.frameRate===0&&(e.frameRate=24),this._armature=e,g.CANVAS in r){const i=r[g.CANVAS],n=nt.borrowObject(Jm);g.COLOR in i?n.hasBackground=!0:n.hasBackground=!1,n.color=z._getNumber(i,g.COLOR,0),n.x=z._getNumber(i,g.X,0)*e.scale,n.y=z._getNumber(i,g.Y,0)*e.scale,n.width=z._getNumber(i,g.WIDTH,0)*e.scale,n.height=z._getNumber(i,g.HEIGHT,0)*e.scale,e.canvas=n}if(g.AABB in r){const i=r[g.AABB];e.aabb.x=z._getNumber(i,g.X,0)*e.scale,e.aabb.y=z._getNumber(i,g.Y,0)*e.scale,e.aabb.width=z._getNumber(i,g.WIDTH,0)*e.scale,e.aabb.height=z._getNumber(i,g.HEIGHT,0)*e.scale}if(g.BONE in r){const i=r[g.BONE];for(const n of i){const s=z._getString(n,g.PARENT,""),o=this._parseBone(n);if(s.length>0){const a=e.getBone(s);a!==null?o.parent=a:(s in this._cacheBones||(this._cacheBones[s]=[]),this._cacheBones[s].push(o))}if(o.name in this._cacheBones){for(const a of this._cacheBones[o.name])a.parent=o;delete this._cacheBones[o.name]}e.addBone(o),this._rawBones.push(o)}}if(g.IK in r){const i=r[g.IK];for(const n of i){const s=this._parseIKConstraint(n);s&&e.addConstraint(s)}}if(e.sortBones(),g.SLOT in r){let i=0;const n=r[g.SLOT];for(const s of n)e.addSlot(this._parseSlot(s,i++))}if(g.SKIN in r){const i=r[g.SKIN];for(const n of i)e.addSkin(this._parseSkin(n))}if(g.PATH_CONSTRAINT in r){const i=r[g.PATH_CONSTRAINT];for(const n of i){const s=this._parsePathConstraint(n);s&&e.addConstraint(s)}}for(let i=0,n=this._cacheRawMeshes.length;i<n;++i){const s=this._cacheRawMeshes[i],o=z._getString(s,g.SHARE,"");if(o.length===0)continue;let a=z._getString(s,g.SKIN,g.DEFAULT_NAME);a.length===0&&(a=g.DEFAULT_NAME);const l=e.getMesh(a,"",o);l!==null&&this._cacheMeshes[i].geometry.shareFrom(l.geometry)}if(g.ANIMATION in r){const i=r[g.ANIMATION];for(const n of i){const s=this._parseAnimation(n);e.addAnimation(s)}}if(g.DEFAULT_ACTIONS in r){const i=this._parseActionData(r[g.DEFAULT_ACTIONS],Kt.Play,null,null);for(const n of i)if(e.addAction(n,!0),n.type===Kt.Play){const s=e.getAnimation(n.name);s!==null&&(e.defaultAnimation=s)}}if(g.ACTIONS in r){const i=this._parseActionData(r[g.ACTIONS],Kt.Play,null,null);for(const n of i)e.addAction(n,!1)}this._rawBones.length=0,this._cacheRawMeshes.length=0,this._cacheMeshes.length=0,this._armature=null;for(let i in this._weightSlotPose)delete this._weightSlotPose[i];for(let i in this._weightBonePoses)delete this._weightBonePoses[i];for(let i in this._cacheBones)delete this._cacheBones[i];for(let i in this._slotChildActions)delete this._slotChildActions[i];return e}_parseBone(r){let t=_e.Bone;if(g.TYPE in r&&typeof r[g.TYPE]=="string"?t=g._getBoneType(r[g.TYPE]):t=z._getNumber(r,g.TYPE,_e.Bone),t===_e.Bone){const i=this._armature.scale,n=nt.borrowObject(ml);return n.inheritTranslation=z._getBoolean(r,g.INHERIT_TRANSLATION,!0),n.inheritRotation=z._getBoolean(r,g.INHERIT_ROTATION,!0),n.inheritScale=z._getBoolean(r,g.INHERIT_SCALE,!0),n.inheritReflection=z._getBoolean(r,g.INHERIT_REFLECTION,!0),n.length=z._getNumber(r,g.LENGTH,0)*i,n.alpha=z._getNumber(r,g.ALPHA,1),n.name=z._getString(r,g.NAME,""),g.TRANSFORM in r&&this._parseTransform(r[g.TRANSFORM],n.transform,i),n}const e=nt.borrowObject($m);return e.alpha=z._getNumber(r,g.ALPHA,1),e.name=z._getString(r,g.NAME,""),e.segmentX=z._getNumber(r,g.SEGMENT_X,0),e.segmentY=z._getNumber(r,g.SEGMENT_Y,0),this._parseGeometry(r,e.geometry),e}_parseIKConstraint(r){const t=this._armature.getBone(z._getString(r,g.BONE,""));if(t===null)return null;const e=this._armature.getBone(z._getString(r,g.TARGET,""));if(e===null)return null;const i=z._getNumber(r,g.CHAIN,0),n=nt.borrowObject(Qm);return n.scaleEnabled=z._getBoolean(r,g.SCALE,!1),n.bendPositive=z._getBoolean(r,g.BEND_POSITIVE,!0),n.weight=z._getNumber(r,g.WEIGHT,1),n.name=z._getString(r,g.NAME,""),n.type=tn.IK,n.target=e,i>0&&t.parent!==null?(n.root=t.parent,n.bone=t):(n.root=t,n.bone=null),n}_parsePathConstraint(r){const t=this._armature.getSlot(z._getString(r,g.TARGET,""));if(t===null)return null;const e=this._armature.defaultSkin;if(e===null)return null;const i=e.getDisplay(t.name,z._getString(r,g.TARGET_DISPLAY,t.name));if(i===null||!(i instanceof Ao))return null;const n=r[g.BONES];if(n===null||n.length===0)return null;const s=nt.borrowObject(tp);s.name=z._getString(r,g.NAME,""),s.type=tn.Path,s.pathSlot=t,s.pathDisplayData=i,s.target=t.parent,s.positionMode=g._getPositionMode(z._getString(r,g.POSITION_MODE,"")),s.spacingMode=g._getSpacingMode(z._getString(r,g.SPACING_MODE,"")),s.rotateMode=g._getRotateMode(z._getString(r,g.ROTATE_MODE,"")),s.position=z._getNumber(r,g.POSITION,0),s.spacing=z._getNumber(r,g.SPACING,0),s.rotateOffset=z._getNumber(r,g.ROTATE_OFFSET,0),s.rotateMix=z._getNumber(r,g.ROTATE_MIX,1),s.translateMix=z._getNumber(r,g.TRANSLATE_MIX,1);for(var o of n){const a=this._armature.getBone(o);a!==null&&(s.AddBone(a),s.root===null&&(s.root=a))}return s}_parseSlot(r,t){const e=nt.borrowObject(Fr);return e.displayIndex=z._getNumber(r,g.DISPLAY_INDEX,0),e.zOrder=t,e.zIndex=z._getNumber(r,g.Z_INDEX,0),e.alpha=z._getNumber(r,g.ALPHA,1),e.name=z._getString(r,g.NAME,""),e.parent=this._armature.getBone(z._getString(r,g.PARENT,"")),g.BLEND_MODE in r&&typeof r[g.BLEND_MODE]=="string"?e.blendMode=g._getBlendMode(r[g.BLEND_MODE]):e.blendMode=z._getNumber(r,g.BLEND_MODE,ee.Normal),g.COLOR in r?(e.color=Fr.createColor(),this._parseColorTransform(r[g.COLOR],e.color)):e.color=Fr.DEFAULT_COLOR,g.ACTIONS in r&&(this._slotChildActions[e.name]=this._parseActionData(r[g.ACTIONS],Kt.Play,null,null)),e}_parseSkin(r){const t=nt.borrowObject(ip);if(t.name=z._getString(r,g.NAME,g.DEFAULT_NAME),t.name.length===0&&(t.name=g.DEFAULT_NAME),g.SLOT in r){const e=r[g.SLOT];this._skin=t;for(const i of e){const n=z._getString(i,g.NAME,""),s=this._armature.getSlot(n);if(s!==null){if(this._slot=s,g.DISPLAY in i){const o=i[g.DISPLAY];for(const a of o)a?t.addDisplay(n,this._parseDisplay(a)):t.addDisplay(n,null)}this._slot=null}}this._skin=null}return t}_parseDisplay(r){const t=z._getString(r,g.NAME,""),e=z._getString(r,g.PATH,"");let i=Rt.Image,n=null;switch(g.TYPE in r&&typeof r[g.TYPE]=="string"?i=g._getDisplayType(r[g.TYPE]):i=z._getNumber(r,g.TYPE,i),i){case Rt.Image:{const s=n=nt.borrowObject(qm);s.name=t,s.path=e.length>0?e:t,this._parsePivot(r,s);break}case Rt.Armature:{const s=n=nt.borrowObject(Ym);if(s.name=t,s.path=e.length>0?e:t,s.inheritAnimation=!0,g.ACTIONS in r){const o=this._parseActionData(r[g.ACTIONS],Kt.Play,null,null);for(const a of o)s.addAction(a)}else if(this._slot.name in this._slotChildActions){const o=this._skin.getDisplays(this._slot.name);if(o===null?this._slot.displayIndex===0:this._slot.displayIndex===o.length){for(const a of this._slotChildActions[this._slot.name])s.addAction(a);delete this._slotChildActions[this._slot.name]}}break}case Rt.Mesh:{const s=n=nt.borrowObject(Zm);s.geometry.inheritDeform=z._getBoolean(r,g.INHERIT_DEFORM,!0),s.name=t,s.path=e.length>0?e:t,g.SHARE in r?(s.geometry.data=this._data,this._cacheRawMeshes.push(r),this._cacheMeshes.push(s)):this._parseMesh(r,s);break}case Rt.BoundingBox:{const s=this._parseBoundingBox(r);if(s!==null){const o=n=nt.borrowObject(jm);o.name=t,o.path=e.length>0?e:t,o.boundingBox=s}break}case Rt.Path:{const s=r[g.LENGTHS],o=n=nt.borrowObject(Ao);o.closed=z._getBoolean(r,g.CLOSED,!1),o.constantSpeed=z._getBoolean(r,g.CONSTANT_SPEED,!1),o.name=t,o.path=e.length>0?e:t,o.curveLengths.length=s.length;for(let a=0,l=s.length;a<l;++a)o.curveLengths[a]=s[a];this._parsePath(r,o);break}}return n!==null&&g.TRANSFORM in r&&this._parseTransform(r[g.TRANSFORM],n.transform,this._armature.scale),n}_parsePath(r,t){this._parseGeometry(r,t.geometry)}_parsePivot(r,t){if(g.PIVOT in r){const e=r[g.PIVOT];t.pivot.x=z._getNumber(e,g.X,0),t.pivot.y=z._getNumber(e,g.Y,0)}else t.pivot.x=.5,t.pivot.y=.5}_parseMesh(r,t){if(this._parseGeometry(r,t.geometry),g.WEIGHTS in r){const e=r[g.SLOT_POSE],i=r[g.BONE_POSE],n=this._skin.name+"_"+this._slot.name+"_"+t.name;this._weightSlotPose[n]=e,this._weightBonePoses[n]=i}}_parseBoundingBox(r){let t=null,e=Re.Rectangle;switch(g.SUB_TYPE in r&&typeof r[g.SUB_TYPE]=="string"?e=g._getBoundingBoxType(r[g.SUB_TYPE]):e=z._getNumber(r,g.SUB_TYPE,e),e){case Re.Rectangle:t=nt.borrowObject(bi);break;case Re.Ellipse:t=nt.borrowObject(ta);break;case Re.Polygon:t=this._parsePolygonBoundingBox(r);break}return t!==null&&(t.color=z._getNumber(r,g.COLOR,0),(t.type===Re.Rectangle||t.type===Re.Ellipse)&&(t.width=z._getNumber(r,g.WIDTH,0),t.height=z._getNumber(r,g.HEIGHT,0))),t}_parsePolygonBoundingBox(r){const t=nt.borrowObject(ea);if(g.VERTICES in r){const e=this._armature.scale,i=r[g.VERTICES],n=t.vertices;n.length=i.length;for(let s=0,o=i.length;s<o;s+=2){const a=i[s]*e,l=i[s+1]*e;n[s]=a,n[s+1]=l,s===0?(t.x=a,t.y=l,t.width=a,t.height=l):(a<t.x?t.x=a:a>t.width&&(t.width=a),l<t.y?t.y=l:l>t.height&&(t.height=l))}t.width-=t.x,t.height-=t.y}else console.warn(`Data error.
 Please reexport DragonBones Data to fixed the bug.`);return t}_parseAnimation(r){const t=nt.borrowObject(cl);if(t.blendType=g._getAnimationBlendType(z._getString(r,g.BLEND_TYPE,"")),t.frameCount=z._getNumber(r,g.DURATION,0),t.playTimes=z._getNumber(r,g.PLAY_TIMES,1),t.duration=t.frameCount/this._armature.frameRate,t.fadeInTime=z._getNumber(r,g.FADE_IN_TIME,0),t.scale=z._getNumber(r,g.SCALE,1),t.name=z._getString(r,g.NAME,g.DEFAULT_NAME),t.name.length===0&&(t.name=g.DEFAULT_NAME),t.frameIntOffset=this._frameIntArray.length,t.frameFloatOffset=this._frameFloatArray.length,t.frameOffset=this._frameArray.length,this._animation=t,g.FRAME in r){const e=r[g.FRAME],i=e.length;if(i>0)for(let n=0,s=0;n<i;++n){const o=e[n];this._parseActionDataInFrame(o,s,null,null),s+=z._getNumber(o,g.DURATION,1)}}if(g.Z_ORDER in r&&(this._animation.zOrderTimeline=this._parseTimeline(r[g.Z_ORDER],null,g.FRAME,st.ZOrder,0,0,this._parseZOrderFrame)),g.BONE in r){const e=r[g.BONE];for(const i of e)this._parseBoneTimeline(i)}if(g.SLOT in r){const e=r[g.SLOT];for(const i of e)this._parseSlotTimeline(i)}if(g.FFD in r){const e=r[g.FFD];for(const i of e){let n=z._getString(i,g.SKIN,g.DEFAULT_NAME);const s=z._getString(i,g.SLOT,""),o=z._getString(i,g.NAME,"");if(n.length===0&&(n=g.DEFAULT_NAME),this._slot=this._armature.getSlot(s),this._mesh=this._armature.getMesh(n,s,o),this._slot===null||this._mesh===null)continue;const a=this._parseTimeline(i,null,g.FRAME,st.SlotDeform,2,0,this._parseSlotDeformFrame);a!==null&&this._animation.addSlotTimeline(s,a),this._slot=null,this._mesh=null}}if(g.IK in r){const e=r[g.IK];for(const i of e){const n=z._getString(i,g.NAME,"");if(this._armature.getConstraint(n)===null)continue;const s=this._parseTimeline(i,null,g.FRAME,st.IKConstraint,1,2,this._parseIKConstraintFrame);s!==null&&this._animation.addConstraintTimeline(n,s)}}if(this._actionFrames.length>0&&(this._animation.actionTimeline=this._parseTimeline(null,this._actionFrames,"",st.Action,0,0,this._parseActionFrame),this._actionFrames.length=0),g.TIMELINE in r){const e=r[g.TIMELINE];for(const i of e){const n=z._getNumber(i,g.TYPE,st.Action),s=z._getString(i,g.NAME,"");let o=null;switch(n){case st.Action:break;case st.SlotDisplay:case st.SlotZIndex:case st.BoneAlpha:case st.SlotAlpha:case st.AnimationProgress:case st.AnimationWeight:if(n===st.SlotDisplay?(this._frameValueType=0,this._frameValueScale=1):(this._frameValueType=1,n===st.SlotZIndex?this._frameValueScale=1:n===st.AnimationProgress||n===st.AnimationWeight?this._frameValueScale=1e4:this._frameValueScale=100),n===st.BoneAlpha||n===st.SlotAlpha||n===st.AnimationWeight?this._frameDefaultValue=1:this._frameDefaultValue=0,n===st.AnimationProgress&&t.blendType!==Ye.None){o=nt.borrowObject(fl);const a=o;a.x=z._getNumber(i,g.X,0),a.y=z._getNumber(i,g.Y,0)}o=this._parseTimeline(i,null,g.FRAME,n,this._frameValueType,1,this._parseSingleValueFrame,o);break;case st.BoneTranslate:case st.BoneRotate:case st.BoneScale:case st.IKConstraint:case st.AnimationParameter:n===st.IKConstraint||n===st.AnimationParameter?(this._frameValueType=1,n===st.AnimationParameter?this._frameValueScale=1e4:this._frameValueScale=100):(n===st.BoneRotate?this._frameValueScale=Dt.DEG_RAD:this._frameValueScale=1,this._frameValueType=2),n===st.BoneScale||n===st.IKConstraint?this._frameDefaultValue=1:this._frameDefaultValue=0,o=this._parseTimeline(i,null,g.FRAME,n,this._frameValueType,2,this._parseDoubleValueFrame);break;case st.ZOrder:break;case st.Surface:{const a=this._armature.getBone(s);if(a===null)continue;this._geometry=a.geometry,o=this._parseTimeline(i,null,g.FRAME,n,2,0,this._parseDeformFrame),this._geometry=null;break}case st.SlotDeform:{this._geometry=null;for(const a in this._armature.skins){const l=this._armature.skins[a];for(const h in l.displays){const u=l.displays[h];for(const c of u)if(c!==null&&c.name===s){this._geometry=c.geometry;break}}}if(this._geometry===null)continue;o=this._parseTimeline(i,null,g.FRAME,n,2,0,this._parseDeformFrame),this._geometry=null;break}case st.SlotColor:o=this._parseTimeline(i,null,g.FRAME,n,1,1,this._parseSlotColorFrame);break}if(o!==null)switch(n){case st.Action:break;case st.ZOrder:break;case st.BoneTranslate:case st.BoneRotate:case st.BoneScale:case st.Surface:case st.BoneAlpha:this._animation.addBoneTimeline(s,o);break;case st.SlotDisplay:case st.SlotColor:case st.SlotDeform:case st.SlotZIndex:case st.SlotAlpha:this._animation.addSlotTimeline(s,o);break;case st.IKConstraint:this._animation.addConstraintTimeline(s,o);break;case st.AnimationProgress:case st.AnimationWeight:case st.AnimationParameter:this._animation.addAnimationTimeline(s,o);break}}}return this._animation=null,t}_parseTimeline(r,t,e,i,n,s,o,a=null){if(r!==null&&e.length>0&&e in r&&(t=r[e]),t===null)return null;const l=t.length;if(l===0)return null;const h=this._frameIntArray.length,u=this._frameFloatArray.length,c=this._timelineArray.length;switch(a===null&&(a=nt.borrowObject($s)),a.type=i,a.offset=c,this._frameValueType=n,this._timeline=a,this._timelineArray.length+=1+1+1+1+1+l,r!==null?(this._timelineArray[c+it.TimelineScale]=Math.round(z._getNumber(r,g.SCALE,1)*100),this._timelineArray[c+it.TimelineOffset]=Math.round(z._getNumber(r,g.OFFSET,0)*100)):(this._timelineArray[c+it.TimelineScale]=100,this._timelineArray[c+it.TimelineOffset]=0),this._timelineArray[c+it.TimelineKeyFrameCount]=l,this._timelineArray[c+it.TimelineFrameValueCount]=s,this._frameValueType){case 0:this._timelineArray[c+it.TimelineFrameValueOffset]=0;break;case 1:this._timelineArray[c+it.TimelineFrameValueOffset]=h-this._animation.frameIntOffset;break;case 2:this._timelineArray[c+it.TimelineFrameValueOffset]=u-this._animation.frameFloatOffset;break}if(l===1)a.frameIndicesOffset=-1,this._timelineArray[c+it.TimelineFrameOffset+0]=o.call(this,t[0],0,0)-this._animation.frameOffset;else{const f=this._animation.frameCount+1,_=this._data.frameIndices,y=_.length;_.length+=f,a.frameIndicesOffset=y;for(let p=0,m=0,x=0,M=0;p<f;++p){if(x+M<=p&&m<l){const b=t[m];x=p,m===l-1?M=this._animation.frameCount-x:b instanceof Ls?M=this._actionFrames[m+1].frameStart-x:M=z._getNumber(b,g.DURATION,1),this._timelineArray[c+it.TimelineFrameOffset+m]=o.call(this,b,x,M)-this._animation.frameOffset,m++}_[y+p]=m-1}}return this._timeline=null,a}_parseBoneTimeline(r){const t=this._armature.getBone(z._getString(r,g.NAME,""));if(t!==null){if(this._bone=t,this._slot=this._armature.getSlot(this._bone.name),g.TRANSLATE_FRAME in r){this._frameDefaultValue=0,this._frameValueScale=1;const e=this._parseTimeline(r,null,g.TRANSLATE_FRAME,st.BoneTranslate,2,2,this._parseDoubleValueFrame);e!==null&&this._animation.addBoneTimeline(t.name,e)}if(g.ROTATE_FRAME in r){this._frameDefaultValue=0,this._frameValueScale=1;const e=this._parseTimeline(r,null,g.ROTATE_FRAME,st.BoneRotate,2,2,this._parseBoneRotateFrame);e!==null&&this._animation.addBoneTimeline(t.name,e)}if(g.SCALE_FRAME in r){this._frameDefaultValue=1,this._frameValueScale=1;const e=this._parseTimeline(r,null,g.SCALE_FRAME,st.BoneScale,2,2,this._parseBoneScaleFrame);e!==null&&this._animation.addBoneTimeline(t.name,e)}if(g.FRAME in r){const e=this._parseTimeline(r,null,g.FRAME,st.BoneAll,2,6,this._parseBoneAllFrame);e!==null&&this._animation.addBoneTimeline(t.name,e)}this._bone=null,this._slot=null}}_parseSlotTimeline(r){const t=this._armature.getSlot(z._getString(r,g.NAME,""));if(t===null)return;let e=null,i=null;this._slot=t,g.DISPLAY_FRAME in r?e=this._parseTimeline(r,null,g.DISPLAY_FRAME,st.SlotDisplay,0,0,this._parseSlotDisplayFrame):e=this._parseTimeline(r,null,g.FRAME,st.SlotDisplay,0,0,this._parseSlotDisplayFrame),g.COLOR_FRAME in r?i=this._parseTimeline(r,null,g.COLOR_FRAME,st.SlotColor,1,1,this._parseSlotColorFrame):i=this._parseTimeline(r,null,g.FRAME,st.SlotColor,1,1,this._parseSlotColorFrame),e!==null&&this._animation.addSlotTimeline(t.name,e),i!==null&&this._animation.addSlotTimeline(t.name,i),this._slot=null}_parseFrame(r,t,e){const i=this._frameArray.length;return this._frameArray.length+=1,this._frameArray[i+it.FramePosition]=t,i}_parseTweenFrame(r,t,e){const i=this._parseFrame(r,t,e);if(e>0)if(g.CURVE in r){const n=e+1;this._helpArray.length=n;const s=this._samplingEasingCurve(r[g.CURVE],this._helpArray);this._frameArray.length+=1+1+this._helpArray.length,this._frameArray[i+it.FrameTweenType]=Qt.Curve,this._frameArray[i+it.FrameTweenEasingOrCurveSampleCount]=s?n:-n;for(let o=0;o<n;++o)this._frameArray[i+it.FrameCurveSamples+o]=Math.round(this._helpArray[o]*1e4)}else{let n=-2;g.TWEEN_EASING in r&&(n=z._getNumber(r,g.TWEEN_EASING,-2)),n===-2?(this._frameArray.length+=1,this._frameArray[i+it.FrameTweenType]=Qt.None):n===0?(this._frameArray.length+=1,this._frameArray[i+it.FrameTweenType]=Qt.Line):n<0?(this._frameArray.length+=1+1,this._frameArray[i+it.FrameTweenType]=Qt.QuadIn,this._frameArray[i+it.FrameTweenEasingOrCurveSampleCount]=Math.round(-n*100)):n<=1?(this._frameArray.length+=1+1,this._frameArray[i+it.FrameTweenType]=Qt.QuadOut,this._frameArray[i+it.FrameTweenEasingOrCurveSampleCount]=Math.round(n*100)):(this._frameArray.length+=1+1,this._frameArray[i+it.FrameTweenType]=Qt.QuadInOut,this._frameArray[i+it.FrameTweenEasingOrCurveSampleCount]=Math.round(n*100-100))}else this._frameArray.length+=1,this._frameArray[i+it.FrameTweenType]=Qt.None;return i}_parseSingleValueFrame(r,t,e){let i=0;switch(this._frameValueType){case 0:{i=this._parseFrame(r,t,e),this._frameArray.length+=1,this._frameArray[i+1]=z._getNumber(r,g.VALUE,this._frameDefaultValue);break}case 1:{i=this._parseTweenFrame(r,t,e);const n=this._frameIntArray.length;this._frameIntArray.length+=1,this._frameIntArray[n]=Math.round(z._getNumber(r,g.VALUE,this._frameDefaultValue)*this._frameValueScale);break}case 2:{i=this._parseTweenFrame(r,t,e);const n=this._frameFloatArray.length;this._frameFloatArray.length+=1,this._frameFloatArray[n]=z._getNumber(r,g.VALUE,this._frameDefaultValue)*this._frameValueScale;break}}return i}_parseDoubleValueFrame(r,t,e){let i=0;switch(this._frameValueType){case 0:{i=this._parseFrame(r,t,e),this._frameArray.length+=2,this._frameArray[i+1]=z._getNumber(r,g.X,this._frameDefaultValue),this._frameArray[i+2]=z._getNumber(r,g.Y,this._frameDefaultValue);break}case 1:{i=this._parseTweenFrame(r,t,e);const n=this._frameIntArray.length;this._frameIntArray.length+=2,this._frameIntArray[n]=Math.round(z._getNumber(r,g.X,this._frameDefaultValue)*this._frameValueScale),this._frameIntArray[n+1]=Math.round(z._getNumber(r,g.Y,this._frameDefaultValue)*this._frameValueScale);break}case 2:{i=this._parseTweenFrame(r,t,e);const n=this._frameFloatArray.length;this._frameFloatArray.length+=2,this._frameFloatArray[n]=z._getNumber(r,g.X,this._frameDefaultValue)*this._frameValueScale,this._frameFloatArray[n+1]=z._getNumber(r,g.Y,this._frameDefaultValue)*this._frameValueScale;break}}return i}_parseActionFrame(r,t,e){const i=this._frameArray.length,n=r.actions.length;this._frameArray.length+=1+1+n,this._frameArray[i+it.FramePosition]=t,this._frameArray[i+it.FramePosition+1]=n;for(let s=0;s<n;++s)this._frameArray[i+it.FramePosition+2+s]=r.actions[s];return i}_parseZOrderFrame(r,t,e){const i=this._parseFrame(r,t,e);if(g.Z_ORDER in r){const n=r[g.Z_ORDER];if(n.length>0){const s=this._armature.sortedSlots.length,o=new Array(s-n.length/2),a=new Array(s);for(let c=0;c<o.length;++c)o[c]=0;for(let c=0;c<s;++c)a[c]=-1;let l=0,h=0;for(let c=0,f=n.length;c<f;c+=2){const _=n[c],y=n[c+1];for(;l!==_;)o[h++]=l++;const p=l+y;a[p]=l++}for(;l<s;)o[h++]=l++;this._frameArray.length+=1+s,this._frameArray[i+1]=s;let u=s;for(;u--;)a[u]===-1?this._frameArray[i+2+u]=o[--h]||0:this._frameArray[i+2+u]=a[u]||0;return i}}return this._frameArray.length+=1,this._frameArray[i+1]=0,i}_parseBoneAllFrame(r,t,e){this._helpTransform.identity(),g.TRANSFORM in r&&this._parseTransform(r[g.TRANSFORM],this._helpTransform,1);let i=this._helpTransform.rotation;t!==0&&(this._prevClockwise===0?i=this._prevRotation+Dt.normalizeRadian(i-this._prevRotation):((this._prevClockwise>0?i>=this._prevRotation:i<=this._prevRotation)&&(this._prevClockwise=this._prevClockwise>0?this._prevClockwise-1:this._prevClockwise+1),i=this._prevRotation+i-this._prevRotation+Dt.PI_D*this._prevClockwise)),this._prevClockwise=z._getNumber(r,g.TWEEN_ROTATE,0),this._prevRotation=i;const n=this._parseTweenFrame(r,t,e);let s=this._frameFloatArray.length;return this._frameFloatArray.length+=6,this._frameFloatArray[s++]=this._helpTransform.x,this._frameFloatArray[s++]=this._helpTransform.y,this._frameFloatArray[s++]=i,this._frameFloatArray[s++]=this._helpTransform.skew,this._frameFloatArray[s++]=this._helpTransform.scaleX,this._frameFloatArray[s++]=this._helpTransform.scaleY,this._parseActionDataInFrame(r,t,this._bone,this._slot),n}_parseBoneTranslateFrame(r,t,e){const i=this._parseTweenFrame(r,t,e);let n=this._frameFloatArray.length;return this._frameFloatArray.length+=2,this._frameFloatArray[n++]=z._getNumber(r,g.X,0),this._frameFloatArray[n++]=z._getNumber(r,g.Y,0),i}_parseBoneRotateFrame(r,t,e){let i=z._getNumber(r,g.ROTATE,0)*Dt.DEG_RAD;t!==0&&(this._prevClockwise===0?i=this._prevRotation+Dt.normalizeRadian(i-this._prevRotation):((this._prevClockwise>0?i>=this._prevRotation:i<=this._prevRotation)&&(this._prevClockwise=this._prevClockwise>0?this._prevClockwise-1:this._prevClockwise+1),i=this._prevRotation+i-this._prevRotation+Dt.PI_D*this._prevClockwise)),this._prevClockwise=z._getNumber(r,g.CLOCK_WISE,0),this._prevRotation=i;const n=this._parseTweenFrame(r,t,e);let s=this._frameFloatArray.length;return this._frameFloatArray.length+=2,this._frameFloatArray[s++]=i,this._frameFloatArray[s++]=z._getNumber(r,g.SKEW,0)*Dt.DEG_RAD,n}_parseBoneScaleFrame(r,t,e){const i=this._parseTweenFrame(r,t,e);let n=this._frameFloatArray.length;return this._frameFloatArray.length+=2,this._frameFloatArray[n++]=z._getNumber(r,g.X,1),this._frameFloatArray[n++]=z._getNumber(r,g.Y,1),i}_parseSlotDisplayFrame(r,t,e){const i=this._parseFrame(r,t,e);return this._frameArray.length+=1,g.VALUE in r?this._frameArray[i+1]=z._getNumber(r,g.VALUE,0):this._frameArray[i+1]=z._getNumber(r,g.DISPLAY_INDEX,0),this._parseActionDataInFrame(r,t,this._slot.parent,this._slot),i}_parseSlotColorFrame(r,t,e){const i=this._parseTweenFrame(r,t,e);let n=-1;if(g.VALUE in r||g.COLOR in r){const o=g.VALUE in r?r[g.VALUE]:r[g.COLOR];for(let a in o){this._parseColorTransform(o,this._helpColorTransform),n=this._colorArray.length,this._colorArray.length+=8,this._colorArray[n++]=Math.round(this._helpColorTransform.alphaMultiplier*100),this._colorArray[n++]=Math.round(this._helpColorTransform.redMultiplier*100),this._colorArray[n++]=Math.round(this._helpColorTransform.greenMultiplier*100),this._colorArray[n++]=Math.round(this._helpColorTransform.blueMultiplier*100),this._colorArray[n++]=Math.round(this._helpColorTransform.alphaOffset),this._colorArray[n++]=Math.round(this._helpColorTransform.redOffset),this._colorArray[n++]=Math.round(this._helpColorTransform.greenOffset),this._colorArray[n++]=Math.round(this._helpColorTransform.blueOffset),n-=8;break}}n<0&&(this._defaultColorOffset<0&&(this._defaultColorOffset=n=this._colorArray.length,this._colorArray.length+=8,this._colorArray[n++]=100,this._colorArray[n++]=100,this._colorArray[n++]=100,this._colorArray[n++]=100,this._colorArray[n++]=0,this._colorArray[n++]=0,this._colorArray[n++]=0,this._colorArray[n++]=0),n=this._defaultColorOffset);const s=this._frameIntArray.length;return this._frameIntArray.length+=1,this._frameIntArray[s]=n,i}_parseSlotDeformFrame(r,t,e){const i=this._frameFloatArray.length,n=this._parseTweenFrame(r,t,e),s=g.VERTICES in r?r[g.VERTICES]:null,o=z._getNumber(r,g.OFFSET,0),a=this._intArray[this._mesh.geometry.offset+it.GeometryVertexCount];if(this._mesh.parent===null)throw new Error("this._mesh.parent is null.");const l=this._mesh.parent.name+"_"+this._slot.name+"_"+this._mesh.name,h=this._mesh.geometry.weight;let u=0,c=0,f=0,_=0;if(h!==null){const y=this._weightSlotPose[l];this._helpMatrixA.copyFromArray(y,0),this._frameFloatArray.length+=h.count*2,f=h.offset+it.WeigthBoneIndices+h.bones.length}else this._frameFloatArray.length+=a*2;for(let y=0;y<a*2;y+=2)if(s===null?(u=0,c=0):(y<o||y-o>=s.length?u=0:u=s[y-o],y+1<o||y+1-o>=s.length?c=0:c=s[y+1-o]),h!==null){const p=this._weightBonePoses[l],m=this._intArray[f++];this._helpMatrixA.transformPoint(u,c,this._helpPoint,!0),u=this._helpPoint.x,c=this._helpPoint.y;for(let x=0;x<m;++x){const M=this._intArray[f++];this._helpMatrixB.copyFromArray(p,M*7+1),this._helpMatrixB.invert(),this._helpMatrixB.transformPoint(u,c,this._helpPoint,!0),this._frameFloatArray[i+_++]=this._helpPoint.x,this._frameFloatArray[i+_++]=this._helpPoint.y}}else this._frameFloatArray[i+y]=u,this._frameFloatArray[i+y+1]=c;if(t===0){const y=this._frameIntArray.length;this._frameIntArray.length+=1+1+1+1+1,this._frameIntArray[y+it.DeformVertexOffset]=this._mesh.geometry.offset,this._frameIntArray[y+it.DeformCount]=this._frameFloatArray.length-i,this._frameIntArray[y+it.DeformValueCount]=this._frameFloatArray.length-i,this._frameIntArray[y+it.DeformValueOffset]=0,this._frameIntArray[y+it.DeformFloatOffset]=i-this._animation.frameFloatOffset,this._timelineArray[this._timeline.offset+it.TimelineFrameValueCount]=y-this._animation.frameIntOffset}return n}_parseIKConstraintFrame(r,t,e){const i=this._parseTweenFrame(r,t,e);let n=this._frameIntArray.length;return this._frameIntArray.length+=2,this._frameIntArray[n++]=z._getBoolean(r,g.BEND_POSITIVE,!0)?1:0,this._frameIntArray[n++]=Math.round(z._getNumber(r,g.WEIGHT,1)*100),i}_parseActionData(r,t,e,i){const n=new Array;if(typeof r=="string"){const s=nt.borrowObject(Eo);s.type=t,s.name=r,s.bone=e,s.slot=i,n.push(s)}else if(r instanceof Array)for(const s of r){const o=nt.borrowObject(Eo);if(g.GOTO_AND_PLAY in s?(o.type=Kt.Play,o.name=z._getString(s,g.GOTO_AND_PLAY,"")):(g.TYPE in s&&typeof s[g.TYPE]=="string"?o.type=g._getActionType(s[g.TYPE]):o.type=z._getNumber(s,g.TYPE,t),o.name=z._getString(s,g.NAME,"")),g.BONE in s){const l=z._getString(s,g.BONE,"");o.bone=this._armature.getBone(l)}else o.bone=e;if(g.SLOT in s){const l=z._getString(s,g.SLOT,"");o.slot=this._armature.getSlot(l)}else o.slot=i;let a=null;if(g.INTS in s){a===null&&(a=nt.borrowObject(Rs));const l=s[g.INTS];for(const h of l)a.addInt(h)}if(g.FLOATS in s){a===null&&(a=nt.borrowObject(Rs));const l=s[g.FLOATS];for(const h of l)a.addFloat(h)}if(g.STRINGS in s){a===null&&(a=nt.borrowObject(Rs));const l=s[g.STRINGS];for(const h of l)a.addString(h)}o.data=a,n.push(o)}return n}_parseDeformFrame(r,t,e){const i=this._frameFloatArray.length,n=this._parseTweenFrame(r,t,e),s=g.VERTICES in r?r[g.VERTICES]:g.VALUE in r?r[g.VALUE]:null,o=z._getNumber(r,g.OFFSET,0),a=this._intArray[this._geometry.offset+it.GeometryVertexCount],l=this._geometry.weight;let h=0,u=0;if(l===null){this._frameFloatArray.length+=a*2;for(let c=0;c<a*2;c+=2)s!==null?(c<o||c-o>=s.length?h=0:h=s[c-o],c+1<o||c+1-o>=s.length?u=0:u=s[c+1-o]):(h=0,u=0),this._frameFloatArray[i+c]=h,this._frameFloatArray[i+c+1]=u}if(t===0){const c=this._frameIntArray.length;this._frameIntArray.length+=1+1+1+1+1,this._frameIntArray[c+it.DeformVertexOffset]=this._geometry.offset,this._frameIntArray[c+it.DeformCount]=this._frameFloatArray.length-i,this._frameIntArray[c+it.DeformValueCount]=this._frameFloatArray.length-i,this._frameIntArray[c+it.DeformValueOffset]=0,this._frameIntArray[c+it.DeformFloatOffset]=i-this._animation.frameFloatOffset,this._timelineArray[this._timeline.offset+it.TimelineFrameValueCount]=c-this._animation.frameIntOffset}return n}_parseTransform(r,t,e){t.x=z._getNumber(r,g.X,0)*e,t.y=z._getNumber(r,g.Y,0)*e,g.ROTATE in r||g.SKEW in r?(t.rotation=Dt.normalizeRadian(z._getNumber(r,g.ROTATE,0)*Dt.DEG_RAD),t.skew=Dt.normalizeRadian(z._getNumber(r,g.SKEW,0)*Dt.DEG_RAD)):(g.SKEW_X in r||g.SKEW_Y in r)&&(t.rotation=Dt.normalizeRadian(z._getNumber(r,g.SKEW_Y,0)*Dt.DEG_RAD),t.skew=Dt.normalizeRadian(z._getNumber(r,g.SKEW_X,0)*Dt.DEG_RAD)-t.rotation),t.scaleX=z._getNumber(r,g.SCALE_X,1),t.scaleY=z._getNumber(r,g.SCALE_Y,1)}_parseColorTransform(r,t){t.alphaMultiplier=z._getNumber(r,g.ALPHA_MULTIPLIER,100)*.01,t.redMultiplier=z._getNumber(r,g.RED_MULTIPLIER,100)*.01,t.greenMultiplier=z._getNumber(r,g.GREEN_MULTIPLIER,100)*.01,t.blueMultiplier=z._getNumber(r,g.BLUE_MULTIPLIER,100)*.01,t.alphaOffset=z._getNumber(r,g.ALPHA_OFFSET,0),t.redOffset=z._getNumber(r,g.RED_OFFSET,0),t.greenOffset=z._getNumber(r,g.GREEN_OFFSET,0),t.blueOffset=z._getNumber(r,g.BLUE_OFFSET,0)}_parseGeometry(r,t){const e=r[g.VERTICES],i=Math.floor(e.length/2);let n=0;const s=this._intArray.length,o=this._floatArray.length;t.offset=s,t.data=this._data,this._intArray.length+=1+1+1+1,this._intArray[s+it.GeometryVertexCount]=i,this._intArray[s+it.GeometryFloatOffset]=o,this._intArray[s+it.GeometryWeightOffset]=-1,this._floatArray.length+=i*2;for(let a=0,l=i*2;a<l;++a)this._floatArray[o+a]=e[a];if(g.TRIANGLES in r){const a=r[g.TRIANGLES];n=Math.floor(a.length/3),this._intArray.length+=n*3;for(let l=0,h=n*3;l<h;++l)this._intArray[s+it.GeometryVertexIndices+l]=a[l]}if(this._intArray[s+it.GeometryTriangleCount]=n,g.UVS in r){const a=r[g.UVS],l=o+i*2;this._floatArray.length+=i*2;for(let h=0,u=i*2;h<u;++h)this._floatArray[l+h]=a[h]}if(g.WEIGHTS in r){const a=r[g.WEIGHTS],l=Math.floor(a.length-i)/2,h=this._intArray.length,u=this._floatArray.length;let c=0;const f=this._armature.sortedBones,_=nt.borrowObject(dl);if(_.count=l,_.offset=h,this._intArray.length+=1+1+c+i+l,this._intArray[h+it.WeigthFloatOffset]=u,g.BONE_POSE in r){const y=r[g.SLOT_POSE],p=r[g.BONE_POSE],m=new Array;c=Math.floor(p.length/7),m.length=c;for(let x=0;x<c;++x){const M=p[x*7],b=this._rawBones[M];_.addBone(b),m[x]=M,this._intArray[h+it.WeigthBoneIndices+x]=f.indexOf(b)}this._floatArray.length+=l*3,this._helpMatrixA.copyFromArray(y,0);for(let x=0,M=0,b=h+it.WeigthBoneIndices+c,S=u;x<i;++x){const w=x*2,E=this._intArray[b++]=a[M++];let R=this._floatArray[o+w],v=this._floatArray[o+w+1];this._helpMatrixA.transformPoint(R,v,this._helpPoint),R=this._helpPoint.x,v=this._helpPoint.y;for(let D=0;D<E;++D){const L=a[M++],V=m.indexOf(L);this._helpMatrixB.copyFromArray(p,V*7+1),this._helpMatrixB.invert(),this._helpMatrixB.transformPoint(R,v,this._helpPoint),this._intArray[b++]=V,this._floatArray[S++]=a[M++],this._floatArray[S++]=this._helpPoint.x,this._floatArray[S++]=this._helpPoint.y}}}else{const y=r[g.BONES];c=y.length;for(let p=0;p<c;p++){const m=y[p],x=this._rawBones[m];_.addBone(x),this._intArray[h+it.WeigthBoneIndices+p]=f.indexOf(x)}this._floatArray.length+=l*3;for(let p=0,m=0,x=0,M=h+it.WeigthBoneIndices+c,b=u;p<l;p++){const S=a[m++];this._intArray[M++]=S;for(let w=0;w<S;w++){const E=a[m++],R=a[m++],v=e[x++],D=e[x++];this._intArray[M++]=y.indexOf(E),this._floatArray[b++]=R,this._floatArray[b++]=v,this._floatArray[b++]=D}}}t.weight=_}}_parseArray(r){this._intArray.length=0,this._floatArray.length=0,this._frameIntArray.length=0,this._frameFloatArray.length=0,this._frameArray.length=0,this._timelineArray.length=0,this._colorArray.length=0}_modifyArray(){this._intArray.length%Int16Array.BYTES_PER_ELEMENT!==0&&this._intArray.push(0),this._frameIntArray.length%Int16Array.BYTES_PER_ELEMENT!==0&&this._frameIntArray.push(0),this._frameArray.length%Int16Array.BYTES_PER_ELEMENT!==0&&this._frameArray.push(0),this._timelineArray.length%Uint16Array.BYTES_PER_ELEMENT!==0&&this._timelineArray.push(0),this._timelineArray.length%Int16Array.BYTES_PER_ELEMENT!==0&&this._colorArray.push(0);const r=this._intArray.length*Int16Array.BYTES_PER_ELEMENT,t=this._floatArray.length*Float32Array.BYTES_PER_ELEMENT,e=this._frameIntArray.length*Int16Array.BYTES_PER_ELEMENT,i=this._frameFloatArray.length*Float32Array.BYTES_PER_ELEMENT,n=this._frameArray.length*Int16Array.BYTES_PER_ELEMENT,s=this._timelineArray.length*Uint16Array.BYTES_PER_ELEMENT,o=this._colorArray.length*Int16Array.BYTES_PER_ELEMENT,a=r+t+e+i+n+s+o,l=new ArrayBuffer(a),h=new Int16Array(l,0,this._intArray.length),u=new Float32Array(l,r,this._floatArray.length),c=new Int16Array(l,r+t,this._frameIntArray.length),f=new Float32Array(l,r+t+e,this._frameFloatArray.length),_=new Int16Array(l,r+t+e+i,this._frameArray.length),y=new Uint16Array(l,r+t+e+i+n,this._timelineArray.length),p=new Int16Array(l,r+t+e+i+n+s,this._colorArray.length);for(let m=0,x=this._intArray.length;m<x;++m)h[m]=this._intArray[m];for(let m=0,x=this._floatArray.length;m<x;++m)u[m]=this._floatArray[m];for(let m=0,x=this._frameIntArray.length;m<x;++m)c[m]=this._frameIntArray[m];for(let m=0,x=this._frameFloatArray.length;m<x;++m)f[m]=this._frameFloatArray[m];for(let m=0,x=this._frameArray.length;m<x;++m)_[m]=this._frameArray[m];for(let m=0,x=this._timelineArray.length;m<x;++m)y[m]=this._timelineArray[m];for(let m=0,x=this._colorArray.length;m<x;++m)p[m]=this._colorArray[m];this._data.binary=l,this._data.intArray=h,this._data.floatArray=u,this._data.frameIntArray=c,this._data.frameFloatArray=f,this._data.frameArray=_,this._data.timelineArray=y,this._data.colorArray=p,this._defaultColorOffset=-1}parseDragonBonesData(r,t=1){console.assert(r!=null,"Data error.");const e=z._getString(r,g.VERSION,""),i=z._getString(r,g.COMPATIBLE_VERSION,"");if(g.DATA_VERSIONS.indexOf(e)>=0||g.DATA_VERSIONS.indexOf(i)>=0){const n=nt.borrowObject(ep);if(n.version=e,n.name=z._getString(r,g.NAME,""),n.frameRate=z._getNumber(r,g.FRAME_RATE,24),n.frameRate===0&&(n.frameRate=24),g.ARMATURE in r){this._data=n,this._parseArray(r);const s=r[g.ARMATURE];for(const o of s)n.addArmature(this._parseArmature(o,t));this._data.binary||this._modifyArray(),g.STAGE in r?n.stage=n.getArmature(z._getString(r,g.STAGE,"")):n.armatureNames.length>0&&(n.stage=n.getArmature(n.armatureNames[0])),this._data=null}return g.TEXTURE_ATLAS in r&&(this._rawTextureAtlases=r[g.TEXTURE_ATLAS]),n}else console.assert(!1,"Nonsupport data version: "+e+`
Please convert DragonBones data to support version.
Read more: https://github.com/DragonBones/Tools/`);return null}parseTextureAtlasData(r,t,e=1){if(console.assert(r!==void 0),r===null){if(this._rawTextureAtlases===null||this._rawTextureAtlases.length===0)return!1;const i=this._rawTextureAtlases[this._rawTextureAtlasIndex++];return this.parseTextureAtlasData(i,t,e),this._rawTextureAtlasIndex>=this._rawTextureAtlases.length&&(this._rawTextureAtlasIndex=0,this._rawTextureAtlases=null),!0}if(t.width=z._getNumber(r,g.WIDTH,0),t.height=z._getNumber(r,g.HEIGHT,0),t.scale=e===1?1/z._getNumber(r,g.SCALE,1):e,t.name=z._getString(r,g.NAME,""),t.imagePath=z._getString(r,g.IMAGE_PATH,""),g.SUB_TEXTURE in r){const i=r[g.SUB_TEXTURE];for(let n=0,s=i.length;n<s;++n){const o=i[n],a=z._getNumber(o,g.FRAME_WIDTH,-1),l=z._getNumber(o,g.FRAME_HEIGHT,-1),h=t.createTexture();h.rotated=z._getBoolean(o,g.ROTATED,!1),h.name=z._getString(o,g.NAME,""),h.region.x=z._getNumber(o,g.X,0),h.region.y=z._getNumber(o,g.Y,0),h.region.width=z._getNumber(o,g.WIDTH,0),h.region.height=z._getNumber(o,g.HEIGHT,0),a>0&&l>0&&(h.frame=qr.createRectangle(),h.frame.x=z._getNumber(o,g.FRAME_X,0),h.frame.y=z._getNumber(o,g.FRAME_Y,0),h.frame.width=a,h.frame.height=l),t.addTexture(h)}}return!0}static getInstance(){return z._objectDataParserInstance===null&&(z._objectDataParserInstance=new z),z._objectDataParserInstance}};let Pe=z;d(Pe,"_objectDataParserInstance",null);class Ls{constructor(){d(this,"frameStart",0),d(this,"actions",[])}}const qn=class extends Pe{constructor(){super(...arguments),d(this,"_binaryOffset"),d(this,"_binary"),d(this,"_intArrayBuffer"),d(this,"_frameArrayBuffer"),d(this,"_timelineArrayBuffer")}_inRange(r,t,e){return t<=r&&r<=e}_decodeUTF8(r){let t=0,e="",i,n=0,s=0,o=0,a=0;for(;r.length>t;){let l=r[t++];if(l===-1)s!==0?i=65533:i=-1;else if(s===0)this._inRange(l,0,127)?i=l:(this._inRange(l,194,223)?(s=1,a=128,n=l-192):this._inRange(l,224,239)?(s=2,a=2048,n=l-224):this._inRange(l,240,244)&&(s=3,a=65536,n=l-240),n=n*Math.pow(64,s),i=null);else if(!this._inRange(l,128,191))n=0,s=0,o=0,a=0,t--,i=l;else if(o+=1,n=n+(l-128)*Math.pow(64,s-o),o!==s)i=null;else{let h=n,u=a;n=0,s=0,o=0,a=0,this._inRange(h,u,1114111)&&!this._inRange(h,55296,57343)?i=h:i=l}i!==null&&i!==-1&&(i<=65535?i>0&&(e+=String.fromCharCode(i)):(i-=65536,e+=String.fromCharCode(55296+(i>>10&1023)),e+=String.fromCharCode(56320+(i&1023))))}return e}_parseBinaryTimeline(r,t,e=null){const i=e!==null?e:nt.borrowObject($s);if(i.type=r,i.offset=t,this._timeline=i,this._timelineArrayBuffer===void 0)throw new Error("this._timelineArrayBuffer is undefined.");if(this._frameArrayBuffer===void 0)throw new Error("this._frameArrayBuffer is undefined.");const n=this._timelineArrayBuffer[i.offset+it.TimelineKeyFrameCount];if(n===1)i.frameIndicesOffset=-1;else{let s=0;const o=this._animation.frameCount+1,a=this._data.frameIndices;s=a.length,a.length+=o,i.frameIndicesOffset=s;for(let l=0,h=0,u=0,c=0;l<o;++l)u+c<=l&&h<n&&(u=this._frameArrayBuffer[this._animation.frameOffset+this._timelineArrayBuffer[i.offset+it.TimelineFrameOffset+h]],h===n-1?c=this._animation.frameCount-u:c=this._frameArrayBuffer[this._animation.frameOffset+this._timelineArrayBuffer[i.offset+it.TimelineFrameOffset+h+1]]-u,h++),a[s+l]=h-1}return this._timeline=null,i}_parseAnimation(r){const t=nt.borrowObject(cl);t.blendType=g._getAnimationBlendType(Pe._getString(r,g.BLEND_TYPE,"")),t.frameCount=Pe._getNumber(r,g.DURATION,0),t.playTimes=Pe._getNumber(r,g.PLAY_TIMES,1),t.duration=t.frameCount/this._armature.frameRate,t.fadeInTime=Pe._getNumber(r,g.FADE_IN_TIME,0),t.scale=Pe._getNumber(r,g.SCALE,1),t.name=Pe._getString(r,g.NAME,g.DEFAULT_NAME),t.name.length===0&&(t.name=g.DEFAULT_NAME);const e=r[g.OFFSET];if(t.frameIntOffset=e[0],t.frameFloatOffset=e[1],t.frameOffset=e[2],this._animation=t,g.ACTION in r&&(t.actionTimeline=this._parseBinaryTimeline(st.Action,r[g.ACTION])),g.Z_ORDER in r&&(t.zOrderTimeline=this._parseBinaryTimeline(st.ZOrder,r[g.Z_ORDER])),g.BONE in r){const i=r[g.BONE];for(let n in i){const s=i[n],o=this._armature.getBone(n);if(o!==null)for(let a=0,l=s.length;a<l;a+=2){const h=s[a],u=s[a+1],c=this._parseBinaryTimeline(h,u);this._animation.addBoneTimeline(o.name,c)}}}if(g.SLOT in r){const i=r[g.SLOT];for(let n in i){const s=i[n],o=this._armature.getSlot(n);if(o!==null)for(let a=0,l=s.length;a<l;a+=2){const h=s[a],u=s[a+1],c=this._parseBinaryTimeline(h,u);this._animation.addSlotTimeline(o.name,c)}}}if(g.CONSTRAINT in r){const i=r[g.CONSTRAINT];for(let n in i){const s=i[n],o=this._armature.getConstraint(n);if(o!==null)for(let a=0,l=s.length;a<l;a+=2){const h=s[a],u=s[a+1],c=this._parseBinaryTimeline(h,u);this._animation.addConstraintTimeline(o.name,c)}}}if(g.TIMELINE in r){const i=r[g.TIMELINE];for(const n of i){const s=Pe._getNumber(n,g.OFFSET,0);if(s>=0){const o=Pe._getNumber(n,g.TYPE,st.Action),a=Pe._getString(n,g.NAME,"");let l=null;if(o===st.AnimationProgress&&t.blendType!==Ye.None){l=nt.borrowObject(fl);const h=l;h.x=Pe._getNumber(n,g.X,0),h.y=Pe._getNumber(n,g.Y,0)}switch(l=this._parseBinaryTimeline(o,s,l),o){case st.Action:break;case st.ZOrder:break;case st.BoneTranslate:case st.BoneRotate:case st.BoneScale:case st.Surface:case st.BoneAlpha:this._animation.addBoneTimeline(a,l);break;case st.SlotDisplay:case st.SlotColor:case st.SlotDeform:case st.SlotZIndex:case st.SlotAlpha:this._animation.addSlotTimeline(a,l);break;case st.IKConstraint:this._animation.addConstraintTimeline(a,l);break;case st.AnimationProgress:case st.AnimationWeight:case st.AnimationParameter:this._animation.addAnimationTimeline(a,l);break}}}}return this._animation=null,t}_parseGeometry(r,t){if(t.offset=r[g.OFFSET],t.data=this._data,this._intArrayBuffer===void 0)throw new Error("this._intArrayBuffer is undefined.");let e=this._intArrayBuffer[t.offset+it.GeometryWeightOffset];if(e<-1&&(e+=65536),e>=0){const i=nt.borrowObject(dl),n=this._intArrayBuffer[t.offset+it.GeometryVertexCount],s=this._intArrayBuffer[e+it.WeigthBoneCount];i.offset=e;for(let l=0;l<s;++l){const h=this._intArrayBuffer[e+it.WeigthBoneIndices+l];i.addBone(this._rawBones[h])}let o=e+it.WeigthBoneIndices+s,a=0;for(let l=0,h=n;l<h;++l){const u=this._intArrayBuffer[o++];a+=u,o+=u}i.count=a,t.weight=i}}_parseArray(r){if(this._binary===void 0)throw new Error("this._binary is undefined.");if(this._binaryOffset===void 0)throw new Error("this._binaryOffset is undefined.");const t=r[g.OFFSET],e=t[1],i=t[3],n=t[5],s=t[7],o=t[9],a=t[11],l=t.length>12?t[13]:0,h=new Int16Array(this._binary,this._binaryOffset+t[0],e/Int16Array.BYTES_PER_ELEMENT),u=new Float32Array(this._binary,this._binaryOffset+t[2],i/Float32Array.BYTES_PER_ELEMENT),c=new Int16Array(this._binary,this._binaryOffset+t[4],n/Int16Array.BYTES_PER_ELEMENT),f=new Float32Array(this._binary,this._binaryOffset+t[6],s/Float32Array.BYTES_PER_ELEMENT),_=new Int16Array(this._binary,this._binaryOffset+t[8],o/Int16Array.BYTES_PER_ELEMENT),y=new Uint16Array(this._binary,this._binaryOffset+t[10],a/Uint16Array.BYTES_PER_ELEMENT),p=l>0?new Int16Array(this._binary,this._binaryOffset+t[12],l/Uint16Array.BYTES_PER_ELEMENT):h;this._data.binary=this._binary,this._data.intArray=this._intArrayBuffer=h,this._data.floatArray=u,this._data.frameIntArray=c,this._data.frameFloatArray=f,this._data.frameArray=this._frameArrayBuffer=_,this._data.timelineArray=this._timelineArrayBuffer=y,this._data.colorArray=p}parseDragonBonesData(r,t=1){console.assert(r!=null&&r instanceof ArrayBuffer,"Data error.");const e=new Uint8Array(r,0,8);if(e[0]!=="D".charCodeAt(0)||e[1]!=="B".charCodeAt(0)||e[2]!=="D".charCodeAt(0)||e[3]!=="T".charCodeAt(0))return console.assert(!1,"Nonsupport data."),null;const i=new Uint32Array(r,8,1)[0],n=new Uint8Array(r,8+4,i),s=this._decodeUTF8(n),o=JSON.parse(s);return this._binaryOffset=8+4+i,this._binary=r,super.parseDragonBonesData(o,t)}static getInstance(){return qn._binaryDataParserInstance===null&&(qn._binaryDataParserInstance=new qn),qn._binaryDataParserInstance}};let _l=qn;d(_l,"_binaryDataParserInstance",null);const Ni=class{constructor(r=null){d(this,"autoSearch",!1),d(this,"_dragonBonesDataMap",{}),d(this,"_textureAtlasDataMap",{}),d(this,"_dragonBones",null),d(this,"_dataParser",null),Ni._objectParser===null&&(Ni._objectParser=new Pe),Ni._binaryParser===null&&(Ni._binaryParser=new _l),this._dataParser=r!==null?r:Ni._objectParser}_isSupportMesh(){return!0}_getTextureData(r,t){if(r in this._textureAtlasDataMap)for(const e of this._textureAtlasDataMap[r]){const i=e.getTexture(t);if(i!==null)return i}if(this.autoSearch){for(let e in this._textureAtlasDataMap)for(const i of this._textureAtlasDataMap[e])if(i.autoSearch){const n=i.getTexture(t);if(n!==null)return n}}return null}_fillBuildArmaturePackage(r,t,e,i,n){let s=null,o=null;if(t.length>0&&t in this._dragonBonesDataMap&&(s=this._dragonBonesDataMap[t],o=s.getArmature(e)),o===null&&(t.length===0||this.autoSearch)){for(let a in this._dragonBonesDataMap)if(s=this._dragonBonesDataMap[a],(t.length===0||s.autoSearch)&&(o=s.getArmature(e),o!==null)){t=a;break}}if(o!==null){if(r.dataName=t,r.textureAtlasName=n,r.data=s,r.armature=o,r.skin=null,i.length>0&&(r.skin=o.getSkin(i),r.skin===null&&this.autoSearch))for(let a in this._dragonBonesDataMap){const l=this._dragonBonesDataMap[a].getArmature(i);if(l!==null){r.skin=l.defaultSkin;break}}return r.skin===null&&(r.skin=o.defaultSkin),!0}return!1}_buildBones(r,t){if(r.armature===null)throw new Error("dataPackage.armature is null.");for(const e of r.armature.sortedBones)nt.borrowObject(e.type===_e.Bone?ul:Ce).init(e,t)}_buildSlots(r,t){if(r.armature===null)throw new Error("dataPackage.armature is null.");const e=r.skin,i=r.armature.defaultSkin;if(e===null||i===null)return;const n={};for(let s in i.displays){const o=i.getDisplays(s);n[s]=o}if(e!==i)for(let s in e.displays){const o=e.getDisplays(s);n[s]=o}for(const s of r.armature.sortedSlots){const o=s.name in n?n[s.name]:null,a=this._buildSlot(r,s,t);if(o!==null){a.displayFrameCount=o.length;for(let l=0,h=a.displayFrameCount;l<h;++l){const u=o[l];if(a.replaceRawDisplayData(u,l),u!==null){if(r.textureAtlasName.length>0){const f=this._getTextureData(r.textureAtlasName,u.path);a.replaceTextureData(f,l)}const c=this._getSlotDisplay(r,u,a);a.replaceDisplay(c,l)}else a.replaceDisplay(null)}}a._setDisplayIndex(s.displayIndex,!0)}}_buildConstraints(r,t){if(r.armature===null)throw new Error("dataPackage.armature is null.");const e=r.armature.constraints;for(let i in e){const n=e[i];switch(n.type){case tn.IK:const s=nt.borrowObject(To);s.init(n,t),t._addConstraint(s);break;case tn.Path:const o=nt.borrowObject(Hm);o.init(n,t),t._addConstraint(o);break;default:const a=nt.borrowObject(To);a.init(n,t),t._addConstraint(a);break}}}_buildChildArmature(r,t,e){return this.buildArmature(e.path,r!==null?r.dataName:"","",r!==null?r.textureAtlasName:"")}_getSlotDisplay(r,t,e){if(t.parent===null)throw new Error("displayData.parent is null.");if(t.parent.parent===null)throw new Error("displayData.parent.parent is null.");if(t.parent.parent.parent===null)throw new Error("displayData.parent.parent.parent is null.");const i=r!==null?r.dataName:t.parent.parent.parent.name;let n=null;switch(t.type){case Rt.Image:{const s=t;s.texture===null&&(s.texture=this._getTextureData(i,t.path)),n=e.rawDisplay;break}case Rt.Mesh:{const s=t;s.texture===null&&(s.texture=this._getTextureData(i,s.path)),this._isSupportMesh()?n=e.meshDisplay:n=e.rawDisplay;break}case Rt.Armature:{const s=t,o=this._buildChildArmature(r,e,s);if(o!==null){if(o.inheritAnimation=s.inheritAnimation,!o.inheritAnimation){const a=s.actions.length>0?s.actions:o.armatureData.defaultActions;if(a.length>0)for(const l of a){const h=nt.borrowObject(Nt);Nt.actionDataToInstance(l,h,e.armature),h.slot=e,e.armature._bufferAction(h,!1)}else o.animation.play()}s.armature=o.armatureData}n=o;break}case Rt.BoundingBox:break}return n}parseDragonBonesData(r,t=null,e=1){const i=r instanceof ArrayBuffer?Ni._binaryParser:this._dataParser;if(i===null)throw new Error("dataParser is null.");const n=i.parseDragonBonesData(r,e);for(;;){const s=this._buildTextureAtlasData(null,null);if(i.parseTextureAtlasData(null,s,e))this.addTextureAtlasData(s,t);else{s.returnToPool();break}}return n!==null&&this.addDragonBonesData(n,t),n}parseTextureAtlasData(r,t,e=null,i=1){const n=this._buildTextureAtlasData(null,null);if(this._dataParser===null)throw new Error(" this._dataParser is null.");return this._dataParser.parseTextureAtlasData(r,n,i),this._buildTextureAtlasData(n,t||null),this.addTextureAtlasData(n,e),n}updateTextureAtlases(r,t){const e=this.getTextureAtlasData(t);if(e!==null)for(let i=0,n=e.length;i<n;++i)i<r.length&&this._buildTextureAtlasData(e[i],r[i])}getDragonBonesData(r){return r in this._dragonBonesDataMap?this._dragonBonesDataMap[r]:null}addDragonBonesData(r,t=null){if(t=t!==null?t:r.name,t in this._dragonBonesDataMap){if(this._dragonBonesDataMap[t]===r)return;console.warn("Can not add same name data: "+t);return}this._dragonBonesDataMap[t]=r}removeDragonBonesData(r,t=!0){if(r in this._dragonBonesDataMap){if(t){if(this._dragonBones===null)throw new Error(" this._dragonBones is null.");this._dragonBones.bufferObject(this._dragonBonesDataMap[r])}delete this._dragonBonesDataMap[r]}}getTextureAtlasData(r){return r in this._textureAtlasDataMap?this._textureAtlasDataMap[r]:null}addTextureAtlasData(r,t=null){t=t!==null?t:r.name;const e=t in this._textureAtlasDataMap?this._textureAtlasDataMap[t]:this._textureAtlasDataMap[t]=[];e.indexOf(r)<0&&e.push(r)}removeTextureAtlasData(r,t=!0){if(r in this._textureAtlasDataMap){const e=this._textureAtlasDataMap[r];if(t)for(const i of e){if(this._dragonBones===null)throw new Error(" this._dragonBones is null.");this._dragonBones.bufferObject(i)}delete this._textureAtlasDataMap[r]}}getArmatureData(r,t=""){const e=new Do;return this._fillBuildArmaturePackage(e,t,r,"","")?e.armature:null}clear(r=!0){for(let t in this._dragonBonesDataMap){if(r){if(this._dragonBones===null)throw new Error(" this._dragonBones is null.");this._dragonBones.bufferObject(this._dragonBonesDataMap[t])}delete this._dragonBonesDataMap[t]}for(let t in this._textureAtlasDataMap){if(r){const e=this._textureAtlasDataMap[t];for(const i of e){if(this._dragonBones===null)throw new Error(" this._dragonBones is null.");this._dragonBones.bufferObject(i)}}delete this._textureAtlasDataMap[t]}}buildArmature(r,t="",e="",i=""){const n=new Do;if(!this._fillBuildArmaturePackage(n,t||"",r,e||"",i||""))return console.warn("No armature data: "+r+", "+(t!==null?t:"")),null;const s=this._buildArmature(n);return this._buildBones(n,s),this._buildSlots(n,s),this._buildConstraints(n,s),s.invalidUpdate(null,!0),s.advanceTime(0),s}replaceDisplay(r,t,e=-1){if(e<0&&(e=r.displayIndex),e<0&&(e=0),r.replaceDisplayData(t,e),t!==null){let i=this._getSlotDisplay(null,t,r);if(t.type===Rt.Image){const n=r.getDisplayFrameAt(e).rawDisplayData;n!==null&&n.type===Rt.Mesh&&(i=r.meshDisplay)}r.replaceDisplay(i,e)}else r.replaceDisplay(null,e)}replaceSlotDisplay(r,t,e,i,n,s=-1){const o=this.getArmatureData(t,r||"");if(o===null||o.defaultSkin===null)return!1;const a=o.defaultSkin.getDisplay(e,i);return this.replaceDisplay(n,a,s),!0}replaceSlotDisplayList(r,t,e,i){const n=this.getArmatureData(t,r||"");if(!n||!n.defaultSkin)return!1;const s=n.defaultSkin.getDisplays(e);if(!s)return!1;i.displayFrameCount=s.length;for(let o=0,a=i.displayFrameCount;o<a;++o){const l=s[o];this.replaceDisplay(i,l,o)}return!0}replaceSkin(r,t,e=!1,i=null){if(t.parent===null)throw new Error(" skin.parent is null.");let n=!1;const s=t.parent.defaultSkin;for(const o of r.getSlots()){if(i!==null&&i.indexOf(o.name)>=0)continue;let a=t.getDisplays(o.name);if(a===null&&(s!==null&&t!==s&&(a=s.getDisplays(o.name)),a===null)){e&&(o.displayFrameCount=0);continue}o.displayFrameCount=a.length;for(let l=0,h=o.displayFrameCount;l<h;++l){const u=a[l];o.replaceRawDisplayData(u,l),u!==null?o.replaceDisplay(this._getSlotDisplay(null,u,o),l):o.replaceDisplay(null,l)}n=!0}return n}replaceAnimation(r,t,e=!0){const i=t.defaultSkin;if(i===null)return!1;if(e)r.animation.animations=t.animations;else{const n=r.animation.animations,s={};for(let o in n)s[o]=n[o];for(let o in t.animations)s[o]=t.animations[o];r.animation.animations=s}for(const n of r.getSlots()){let s=0;for(const o of n.displayList){if(o instanceof wi){const a=i.getDisplays(n.name);if(a!==null&&s<a.length){const l=a[s];if(l!==null&&l.type===Rt.Armature){if(l.parent===null)throw new Error("displayData.parent is null.");if(l.parent.parent===null)throw new Error("displayData.parent.parent is null.");if(l.parent.parent.parent===null)throw new Error("displayData.parent.parent.parent is null.");const h=this.getArmatureData(l.path,l.parent.parent.parent.name);h&&this.replaceAnimation(o,h,e)}}}s++}}return!0}getAllDragonBonesData(){return this._dragonBonesDataMap}getAllTextureAtlasData(){return this._textureAtlasDataMap}get clock(){if(this._dragonBones===null)throw new Error("this._dragonBones is null.");return this._dragonBones.clock}get dragonBones(){if(this._dragonBones===null)throw new Error("this._dragonBones is null.");return this._dragonBones}};let Xs=Ni;d(Xs,"_objectParser",null),d(Xs,"_binaryParser",null);class Do{constructor(){d(this,"dataName",""),d(this,"textureAtlasName",""),d(this,"data",null),d(this,"armature",null),d(this,"skin",null)}}class Co extends Gi{constructor(){super(...arguments);Jt(this,"debugDraw",!1);Jt(this,"_debugDraw",!1);Jt(this,"_armature",null);Jt(this,"_debugDrawer",null)}dbInit(e){this._armature=e}dbClear(){this._debugDrawer,this._armature=null,this._debugDrawer=null}dbUpdate(){const e=Xe.debugDraw||this.debugDraw;(e||this._debugDraw)&&(this._debugDraw=e,this._debugDraw?(this._debugDrawer===null&&(this._debugDrawer=new Gi),this.add(this._debugDrawer)):this._debugDrawer!==null&&this._debugDrawer.parent===this&&this.remove(this._debugDrawer))}dispose(e=!0){this._armature!==null&&(this._armature.dispose(),this._armature=null)}dispatchDBEvent(e,i){this.dispatchEvent(i)}hasDBEventListener(e){const i=this._listeners;return i!==void 0&&e in i}addDBEventListener(e,i,n){i.bind(n),this.addEventListener(e,i)}removeDBEventListener(e,i,n){this.removeEventListener(e,i)}get armature(){if(this._armature===null)throw new Error("this._armature is null.");return this._armature}get animation(){if(this._armature===null)throw new Error("this._armature is null.");return this._armature.animation}hasEvent(e){return this.hasDBEventListener(e)}addEvent(e,i,n){this.addDBEventListener(e,i,n)}removeEvent(e,i,n){this.removeDBEventListener(e,i,n)}}class rp extends np{constructor(){super(...arguments);Jt(this,"material",null);Jt(this,"_renderTexture",null)}static toString(){return"[class ThreeTextureAtlasData]"}_onClear(){super._onClear(),this.material!==null&&this.material.dispose(),this._renderTexture,this.material=null,this._renderTexture=null}createTexture(){return nt.borrowObject(sp)}get renderTexture(){return this._renderTexture}set renderTexture(e){this._renderTexture!==e&&(this._renderTexture=e)}}class sp extends qr{static toString(){return"[class ThreeTextureData]"}}const zr=class extends Ft{constructor(){super(...arguments);Jt(this,"_renderDisplay",null);Jt(this,"_material",null)}static toString(){return"[class ThreeSlot]"}_onClear(){super._onClear(),this._material!==null&&this._material.dispose(),this._renderDisplay=null,this._material=null}_initDisplay(e,i){}_disposeDisplay(e,i){i||e.geometry.dispose()}_onUpdateDisplay(){this._renderDisplay=this._display?this._display:this._rawDisplay,this._renderDisplay.matrixAutoUpdate=!1}_addDisplay(){if(this._armature===null)throw new Error("this._armature is null.");if(this._renderDisplay===null)throw new Error("this._renderDisplay is null.");this._armature.display.add(this._renderDisplay)}_replaceDisplay(e){if(this._armature===null)throw new Error("this._armature is null.");if(this._renderDisplay===null)throw new Error("this._renderDisplay is null.");const i=this._armature.display,n=e;i.add(this._renderDisplay),i.remove(n)}_removeDisplay(){if(this._renderDisplay===null)throw new Error("this._renderDisplay is null.");if(this._renderDisplay.parent===null)throw new Error("this._renderDisplay.parent is null.");this._renderDisplay.parent.remove(this._renderDisplay)}_updateZOrder(){if(this._renderDisplay===null)throw new Error("this._renderDisplay is null.");this._renderDisplay.position.setZ(this._zOrder)}_updateVisible(){if(this._renderDisplay===null)throw new Error("this._renderDisplay is null.");if(this._parent===null)throw new Error("this._parent is null.");this._renderDisplay.visible=this._parent.visible&&this._visible}_updateBlendMode(){if(this._renderDisplay===this._rawDisplay){const e=this._textureData;if(e===null)return;const i=e.parent;if(i.renderTexture===null)return;if(i.material===null)throw new Error("textureAtlasData.material is null");const n=this._renderDisplay;this._blendMode!==ee.Normal?(this._material===null&&(this._material=new Ji,this._material.copy(i.material)),this._material.blending=Fs,n.material=this._material):n.material=i.material}}_updateColor(){if(this._renderDisplay===this._rawDisplay){const e=this._textureData;if(e===null)return;const i=e.parent;if(i.renderTexture===null)return;if(i.material===null)throw new Error("textureAtlasData.material is null");const n=this._colorTransform.alphaMultiplier*this._globalAlpha,s=this._renderDisplay;n!==1||this._colorTransform.redMultiplier!==1||this._colorTransform.greenMultiplier!==1||this._colorTransform.blueMultiplier!==1?(this._material===null&&(this._material=new Ji,this._material.copy(i.material)),this._material.opacity=n,this._material.color.setRGB(this._colorTransform.redMultiplier,this._colorTransform.greenMultiplier,this._colorTransform.blueMultiplier),s.material=this._material):s.material=i.material}}_updateFrame(){const e=this._textureData,i=this._renderDisplay;if(e===null){i.visible=!1,i.position.set(0,0,i.position.z);return}const n=e.parent,s=n.renderTexture;if(n.material===null)throw new Error("textureAtlasData.material is null");if(s===null){i.visible=!1,i.position.set(0,0,i.position.z);return}const o=n.width>0?n.width:s.image.width,a=n.height>0?n.height:s.image.height,l=e.region.x,h=e.region.y,u=e.region.width,c=e.region.height;if(this._geometryData===null){if(this._armature===null)throw new Error("this._armature is null.");if(this._armature._armatureData===null)throw new Error("this._armature._armatureData is null.");const L=n.scale*this._armature._armatureData.scale,V=zr.RAW_UVS,q=zr.RAW_INDICES,O=[],I=[];for(let B=0;B<4;++B){const et=B*2,j=new Et(V[et],V[et+1]),X=new G(j.x*u*L-this._pivotX,j.y*c*L-this._pivotY,0);if(O.push(X),I.push(j),e.rotated){j.set((l+(1-j.y)*u)/o,(h+j.x*c)/a);continue}j.set((l+j.x*u)/o,1-(h+j.y*c)/a)}const k=[];for(let B=0;B<2;++B){const et=B*3;k.push(q[et],q[et+1],q[et+2])}const $=O.map(B=>B.toArray()).flat(),Q=I.map(B=>B.toArray()).flat();i.geometry.setAttribute("position",new ge(new Float32Array($),3)),i.geometry.setAttribute("uv",new ge(new Float32Array(Q),2)),i.geometry.setIndex(k),i.geometry.attributes.position.needsUpdate=!0,i.geometry.attributes.uv.needsUpdate=!0,i.geometry.computeBoundingBox(),this._material!==null&&this._material.copy(n.material),i.material=n.material,this._visibleDirty=!0;return}const f=this._geometryData.data;if(f===null)throw new Error("data is null.");const _=f.intArray,y=f.floatArray;if(_===null)throw new Error("intArray is null.");if(y===null)throw new Error("floatArray is null.");const p=_[this._geometryData.offset+it.GeometryVertexCount],m=_[this._geometryData.offset+it.GeometryTriangleCount];let x=_[this._geometryData.offset+it.GeometryFloatOffset];x<0&&(x+=65536);const M=x+p*2,b=this._geometryData.offset+it.GeometryVertexIndices;if(this._armature===null)throw new Error("this._armature is null.");if(this._armature._armatureData===null)throw new Error("this._armature._armatureData is null.");const S=this._armature._armatureData.scale,w=[],E=[];for(let L=0,V=p;L<V;++L){let q=L*2;const O=new G(y[x+q]*S,y[x+q+1]*S,0),I=new Et(y[M+q],y[M+q+1]);if(w.push(O),E.push(I),e.rotated){I.set((l+(1-I.y)*u)/o,(h+I.x*c)/a);continue}I.set((l+I.x*u)/o,1-(h+I.y*c)/a)}const R=[];for(let L=0;L<m;++L){const V=L*3;R.push(_[b+V],_[b+V+1],_[b+V+2])}const v=w.map(L=>L.toArray()).flat(),D=E.map(L=>L.toArray()).flat();i.geometry.setAttribute("position",new ge(new Float32Array(v),3)),i.geometry.setAttribute("uv",new ge(new Float32Array(D),2)),i.geometry.setIndex(R),i.geometry.attributes.position.needsUpdate=!0,i.geometry.attributes.uv.needsUpdate=!0,i.geometry.computeBoundingBox(),this._material!==null&&this._material.copy(n.material),i.material=n.material,this._visibleDirty=!0}_updateMesh(){if(this._armature===null)throw new Error("this._armature is null.");if(this._armature._armatureData===null)throw new Error("this._armature._armatureData is null.");const e=this._armature._armatureData.scale,i=this._displayFrame.deformVertices,n=this._geometryBones,s=this._geometryData,o=s.weight,a=i.length>0&&s.inheritDeform,l=this._renderDisplay;if(o!==null){const m=s.data;if(m===null)throw new Error("data is null.");const x=m.intArray,M=m.floatArray;if(x===null)throw new Error("intArray is null.");if(M===null)throw new Error("floatArray is null.");const b=x[s.offset+it.GeometryVertexCount];let S=x[o.offset+it.WeigthFloatOffset];S<0&&(S+=65536);const w=Array.from(l.geometry.getAttribute("position").array);let E=o.offset+it.WeigthBoneIndices+n.length,R=S,v=0;for(let D=0;D<b;++D){const L=x[E++];let V=0,q=0;for(let O=0;O<L;++O){const I=x[E++],k=n[I];if(k!==null){const $=k.globalTransformMatrix,Q=M[R++];let B=M[R++]*e,et=M[R++]*e;a&&(B+=i[v++],et+=i[v++]),V+=($.a*B+$.c*et+$.tx)*Q,q+=($.b*B+$.d*et+$.ty)*Q}}w[3*D]=V,w[3*D+1]=q,w[3*D+2]=this._zOrder*.1}l.geometry.setAttribute("position",new ge(new Float32Array(w),3)),l.geometry.attributes.position.needsUpdate=!0,l.geometry.computeBoundingBox();return}if(!a)return;const h=this._parent._boneData.type!==_e.Bone,u=s.data,c=u.intArray,f=u.floatArray,_=c[s.offset+it.GeometryVertexCount];let y=c[s.offset+it.GeometryFloatOffset];y<0&&(y+=65536);const p=Array.from(l.geometry.getAttribute("position").array);for(let m=0,x=_*3;m<x;m+=3){const M=f[y+m]*e+i[m],b=f[y+m+1]*e+i[m+1];if(h){const S=this._parent._getGlobalTransformMatrix(M,b);p[m]=S.a*M+S.c*b+S.tx,p[m+1]=S.b*M+S.d*b+S.ty,p[m+2]=0}else p[m]=M,p[m+1]=b,p[m+2]=0}l.geometry.setAttribute("position",new ge(new Float32Array(p),3)),l.geometry.attributes.position.needsUpdate=!0,l.geometry.computeBoundingBox()}_updateTransform(){if(this._renderDisplay===null)throw new Error("this._renderDisplay is null.");const e=this.globalTransformMatrix,i=this._renderDisplay.matrix.elements;i[0]=e.a,i[1]=e.b,i[4]=e.c,i[5]=e.d,i[12]=e.tx,i[13]=e.ty,i[14]=this._zOrder*.1,this._renderDisplay.matrixWorldNeedsUpdate=!0}_identityTransform(){if(this._renderDisplay===null)throw new Error("this._renderDisplay is null.");this._renderDisplay.matrix.identity()}};let Zn=zr;Jt(Zn,"RAW_UVS",[0,0,1,0,0,1,1,1]),Jt(Zn,"RAW_INDICES",[0,1,2,3,2,1]);const $e=class extends Xs{static _createDragonBones(){const t=new Co;return new Xe(t)}static get factory(){return $e._factory===null&&($e._factory=new $e),$e._factory}constructor(t=null){super(t),$e._dragonBonesInstance===null&&($e._dragonBonesInstance=$e._createDragonBones()),this._dragonBones=$e._dragonBonesInstance}_buildTextureAtlasData(t,e){if(t){t.renderTexture=e;const i=new Ji;i.side=nr,i.transparent=!0,i.alphaTest=.5,e!==null&&(i.map=e),t.material=i}else t=nt.borrowObject(rp);return t}_buildArmature(t){const e=nt.borrowObject(wi),i=new Co;if(t.armature===null)throw new Error("dataPackage.armature is null.");if(this._dragonBones===null)throw new Error("this._dragonBones is null.");return e.init(t.armature,i,i,this._dragonBones),e}_buildSlot(t,e,i){const n=nt.borrowObject(Zn),s=new _i,o=new si(s,$e._emptyMaterial);return n.init(e,i,o,o),n}buildArmatureDisplay(t,e="",i="",n=""){const s=this.buildArmature(t,e||"",i||"",n||"");return s!==null?(this.clock.add(s),s.display):null}getTextureDisplay(t,e=null){const i=this._getTextureData(e!==null?e:"",t);if(i!==null){const n=i.parent;if(n.renderTexture!==null){const s=new sl({map:n.renderTexture});return new wm(s)}}return null}get soundEventManager(){throw new Error("???")}};let zi=$e;Jt(zi,"_emptyMaterial",new Ji),Jt(zi,"_dragonBonesInstance",null),Jt(zi,"_factory",null);const Po={type:"change"},Os={type:"start"},Io={type:"end"};class ap extends nn{constructor(t,e){super(),this.object=t,this.domElement=e,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new G,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:rn.ROTATE,MIDDLE:rn.DOLLY,RIGHT:rn.PAN},this.touches={ONE:sn.ROTATE,TWO:sn.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return a.phi},this.getAzimuthalAngle=function(){return a.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(P){P.addEventListener("keydown",De),this._domElementKeyEvents=P},this.saveState=function(){i.target0.copy(i.target),i.position0.copy(i.object.position),i.zoom0=i.object.zoom},this.reset=function(){i.target.copy(i.target0),i.object.position.copy(i.position0),i.object.zoom=i.zoom0,i.object.updateProjectionMatrix(),i.dispatchEvent(Po),i.update(),s=n.NONE},this.update=function(){const P=new G,N=new $i().setFromUnitVectors(t.up,new G(0,1,0)),pt=N.clone().invert(),gt=new G,dt=new $i,bt=2*Math.PI;return function(){const Bt=i.object.position;P.copy(Bt).sub(i.target),P.applyQuaternion(N),a.setFromVector3(P),i.autoRotate&&s===n.NONE&&D(R()),i.enableDamping?(a.theta+=l.theta*i.dampingFactor,a.phi+=l.phi*i.dampingFactor):(a.theta+=l.theta,a.phi+=l.phi);let Ut=i.minAzimuthAngle,Yt=i.maxAzimuthAngle;return isFinite(Ut)&&isFinite(Yt)&&(Ut<-Math.PI?Ut+=bt:Ut>Math.PI&&(Ut-=bt),Yt<-Math.PI?Yt+=bt:Yt>Math.PI&&(Yt-=bt),Ut<=Yt?a.theta=Math.max(Ut,Math.min(Yt,a.theta)):a.theta=a.theta>(Ut+Yt)/2?Math.max(Ut,a.theta):Math.min(Yt,a.theta)),a.phi=Math.max(i.minPolarAngle,Math.min(i.maxPolarAngle,a.phi)),a.makeSafe(),a.radius*=h,a.radius=Math.max(i.minDistance,Math.min(i.maxDistance,a.radius)),i.enableDamping===!0?i.target.addScaledVector(u,i.dampingFactor):i.target.add(u),P.setFromSpherical(a),P.applyQuaternion(pt),Bt.copy(i.target).add(P),i.object.lookAt(i.target),i.enableDamping===!0?(l.theta*=1-i.dampingFactor,l.phi*=1-i.dampingFactor,u.multiplyScalar(1-i.dampingFactor)):(l.set(0,0,0),u.set(0,0,0)),h=1,c||gt.distanceToSquared(i.object.position)>o||8*(1-dt.dot(i.object.quaternion))>o?(i.dispatchEvent(Po),gt.copy(i.object.position),dt.copy(i.object.quaternion),c=!1,!0):!1}}(),this.dispose=function(){i.domElement.removeEventListener("contextmenu",Z),i.domElement.removeEventListener("pointerdown",ce),i.domElement.removeEventListener("pointercancel",be),i.domElement.removeEventListener("wheel",ke),i.domElement.removeEventListener("pointermove",ae),i.domElement.removeEventListener("pointerup",oe),i._domElementKeyEvents!==null&&i._domElementKeyEvents.removeEventListener("keydown",De)};const i=this,n={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let s=n.NONE;const o=1e-6,a=new go,l=new go;let h=1;const u=new G;let c=!1;const f=new Et,_=new Et,y=new Et,p=new Et,m=new Et,x=new Et,M=new Et,b=new Et,S=new Et,w=[],E={};function R(){return 2*Math.PI/60/60*i.autoRotateSpeed}function v(){return Math.pow(.95,i.zoomSpeed)}function D(P){l.theta-=P}function L(P){l.phi-=P}const V=function(){const P=new G;return function(pt,gt){P.setFromMatrixColumn(gt,0),P.multiplyScalar(-pt),u.add(P)}}(),q=function(){const P=new G;return function(pt,gt){i.screenSpacePanning===!0?P.setFromMatrixColumn(gt,1):(P.setFromMatrixColumn(gt,0),P.crossVectors(i.object.up,P)),P.multiplyScalar(pt),u.add(P)}}(),O=function(){const P=new G;return function(pt,gt){const dt=i.domElement;if(i.object.isPerspectiveCamera){const bt=i.object.position;P.copy(bt).sub(i.target);let vt=P.length();vt*=Math.tan(i.object.fov/2*Math.PI/180),V(2*pt*vt/dt.clientHeight,i.object.matrix),q(2*gt*vt/dt.clientHeight,i.object.matrix)}else i.object.isOrthographicCamera?(V(pt*(i.object.right-i.object.left)/i.object.zoom/dt.clientWidth,i.object.matrix),q(gt*(i.object.top-i.object.bottom)/i.object.zoom/dt.clientHeight,i.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),i.enablePan=!1)}}();function I(P){i.object.isPerspectiveCamera?h/=P:i.object.isOrthographicCamera?(i.object.zoom=Math.max(i.minZoom,Math.min(i.maxZoom,i.object.zoom*P)),i.object.updateProjectionMatrix(),c=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),i.enableZoom=!1)}function k(P){i.object.isPerspectiveCamera?h*=P:i.object.isOrthographicCamera?(i.object.zoom=Math.max(i.minZoom,Math.min(i.maxZoom,i.object.zoom/P)),i.object.updateProjectionMatrix(),c=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),i.enableZoom=!1)}function $(P){f.set(P.clientX,P.clientY)}function Q(P){M.set(P.clientX,P.clientY)}function B(P){p.set(P.clientX,P.clientY)}function et(P){_.set(P.clientX,P.clientY),y.subVectors(_,f).multiplyScalar(i.rotateSpeed);const N=i.domElement;D(2*Math.PI*y.x/N.clientHeight),L(2*Math.PI*y.y/N.clientHeight),f.copy(_),i.update()}function j(P){b.set(P.clientX,P.clientY),S.subVectors(b,M),S.y>0?I(v()):S.y<0&&k(v()),M.copy(b),i.update()}function X(P){m.set(P.clientX,P.clientY),x.subVectors(m,p).multiplyScalar(i.panSpeed),O(x.x,x.y),p.copy(m),i.update()}function H(P){P.deltaY<0?k(v()):P.deltaY>0&&I(v()),i.update()}function ot(P){let N=!1;switch(P.code){case i.keys.UP:P.ctrlKey||P.metaKey||P.shiftKey?L(2*Math.PI*i.rotateSpeed/i.domElement.clientHeight):O(0,i.keyPanSpeed),N=!0;break;case i.keys.BOTTOM:P.ctrlKey||P.metaKey||P.shiftKey?L(-2*Math.PI*i.rotateSpeed/i.domElement.clientHeight):O(0,-i.keyPanSpeed),N=!0;break;case i.keys.LEFT:P.ctrlKey||P.metaKey||P.shiftKey?D(2*Math.PI*i.rotateSpeed/i.domElement.clientHeight):O(i.keyPanSpeed,0),N=!0;break;case i.keys.RIGHT:P.ctrlKey||P.metaKey||P.shiftKey?D(-2*Math.PI*i.rotateSpeed/i.domElement.clientHeight):O(-i.keyPanSpeed,0),N=!0;break}N&&(P.preventDefault(),i.update())}function rt(){if(w.length===1)f.set(w[0].pageX,w[0].pageY);else{const P=.5*(w[0].pageX+w[1].pageX),N=.5*(w[0].pageY+w[1].pageY);f.set(P,N)}}function ct(){if(w.length===1)p.set(w[0].pageX,w[0].pageY);else{const P=.5*(w[0].pageX+w[1].pageX),N=.5*(w[0].pageY+w[1].pageY);p.set(P,N)}}function Y(){const P=w[0].pageX-w[1].pageX,N=w[0].pageY-w[1].pageY,pt=Math.sqrt(P*P+N*N);M.set(0,pt)}function xt(){i.enableZoom&&Y(),i.enablePan&&ct()}function mt(){i.enableZoom&&Y(),i.enableRotate&&rt()}function wt(P){if(w.length==1)_.set(P.pageX,P.pageY);else{const pt=At(P),gt=.5*(P.pageX+pt.x),dt=.5*(P.pageY+pt.y);_.set(gt,dt)}y.subVectors(_,f).multiplyScalar(i.rotateSpeed);const N=i.domElement;D(2*Math.PI*y.x/N.clientHeight),L(2*Math.PI*y.y/N.clientHeight),f.copy(_)}function yt(P){if(w.length===1)m.set(P.pageX,P.pageY);else{const N=At(P),pt=.5*(P.pageX+N.x),gt=.5*(P.pageY+N.y);m.set(pt,gt)}x.subVectors(m,p).multiplyScalar(i.panSpeed),O(x.x,x.y),p.copy(m)}function Wt(P){const N=At(P),pt=P.pageX-N.x,gt=P.pageY-N.y,dt=Math.sqrt(pt*pt+gt*gt);b.set(0,dt),S.set(0,Math.pow(b.y/M.y,i.zoomSpeed)),I(S.y),M.copy(b)}function Pt(P){i.enableZoom&&Wt(P),i.enablePan&&yt(P)}function Tt(P){i.enableZoom&&Wt(P),i.enableRotate&&wt(P)}function ce(P){i.enabled!==!1&&(w.length===0&&(i.domElement.setPointerCapture(P.pointerId),i.domElement.addEventListener("pointermove",ae),i.domElement.addEventListener("pointerup",oe)),lt(P),P.pointerType==="touch"?C(P):ie(P))}function ae(P){i.enabled!==!1&&(P.pointerType==="touch"?T(P):Xt(P))}function oe(P){ht(P),w.length===0&&(i.domElement.releasePointerCapture(P.pointerId),i.domElement.removeEventListener("pointermove",ae),i.domElement.removeEventListener("pointerup",oe)),i.dispatchEvent(Io),s=n.NONE}function be(P){ht(P)}function ie(P){let N;switch(P.button){case 0:N=i.mouseButtons.LEFT;break;case 1:N=i.mouseButtons.MIDDLE;break;case 2:N=i.mouseButtons.RIGHT;break;default:N=-1}switch(N){case rn.DOLLY:if(i.enableZoom===!1)return;Q(P),s=n.DOLLY;break;case rn.ROTATE:if(P.ctrlKey||P.metaKey||P.shiftKey){if(i.enablePan===!1)return;B(P),s=n.PAN}else{if(i.enableRotate===!1)return;$(P),s=n.ROTATE}break;case rn.PAN:if(P.ctrlKey||P.metaKey||P.shiftKey){if(i.enableRotate===!1)return;$(P),s=n.ROTATE}else{if(i.enablePan===!1)return;B(P),s=n.PAN}break;default:s=n.NONE}s!==n.NONE&&i.dispatchEvent(Os)}function Xt(P){switch(s){case n.ROTATE:if(i.enableRotate===!1)return;et(P);break;case n.DOLLY:if(i.enableZoom===!1)return;j(P);break;case n.PAN:if(i.enablePan===!1)return;X(P);break}}function ke(P){i.enabled===!1||i.enableZoom===!1||s!==n.NONE||(P.preventDefault(),i.dispatchEvent(Os),H(P),i.dispatchEvent(Io))}function De(P){i.enabled===!1||i.enablePan===!1||ot(P)}function C(P){switch(ft(P),w.length){case 1:switch(i.touches.ONE){case sn.ROTATE:if(i.enableRotate===!1)return;rt(),s=n.TOUCH_ROTATE;break;case sn.PAN:if(i.enablePan===!1)return;ct(),s=n.TOUCH_PAN;break;default:s=n.NONE}break;case 2:switch(i.touches.TWO){case sn.DOLLY_PAN:if(i.enableZoom===!1&&i.enablePan===!1)return;xt(),s=n.TOUCH_DOLLY_PAN;break;case sn.DOLLY_ROTATE:if(i.enableZoom===!1&&i.enableRotate===!1)return;mt(),s=n.TOUCH_DOLLY_ROTATE;break;default:s=n.NONE}break;default:s=n.NONE}s!==n.NONE&&i.dispatchEvent(Os)}function T(P){switch(ft(P),s){case n.TOUCH_ROTATE:if(i.enableRotate===!1)return;wt(P),i.update();break;case n.TOUCH_PAN:if(i.enablePan===!1)return;yt(P),i.update();break;case n.TOUCH_DOLLY_PAN:if(i.enableZoom===!1&&i.enablePan===!1)return;Pt(P),i.update();break;case n.TOUCH_DOLLY_ROTATE:if(i.enableZoom===!1&&i.enableRotate===!1)return;Tt(P),i.update();break;default:s=n.NONE}}function Z(P){i.enabled!==!1&&P.preventDefault()}function lt(P){w.push(P)}function ht(P){delete E[P.pointerId];for(let N=0;N<w.length;N++)if(w[N].pointerId==P.pointerId){w.splice(N,1);return}}function ft(P){let N=E[P.pointerId];N===void 0&&(N=new Et,E[P.pointerId]=N),N.set(P.pageX,P.pageY)}function At(P){const N=P.pointerId===w[0].pointerId?w[1]:w[0];return E[N.pointerId]}i.domElement.addEventListener("contextmenu",Z),i.domElement.addEventListener("pointerdown",ce),i.domElement.addEventListener("pointercancel",be),i.domElement.addEventListener("wheel",ke,{passive:!1}),this.update()}}const op=""+new URL("background-61dad7bd.png",import.meta.url).href,kr=class extends Gi{constructor(){super();Jt(this,"_scene",new Sm);Jt(this,"_camera",new He(45,window.innerWidth/window.innerHeight,1,1e4));Jt(this,"_renderer",new rl({antialias:!0}));Jt(this,"controls",new ap(this._camera,this._renderer.domElement));Jt(this,"_background",new si(new Gr(1,1)));Jt(this,"_resources",[kr.BACKGROUND_URL]);Jt(this,"_loadedResources",{});this._renderer.setPixelRatio(window.devicePixelRatio),this._renderer.setSize(window.innerWidth,window.innerHeight),this._scene.add(this),this._renderer.setClearColor(6710886),this.scale.setY(-1),this.translateY(100),this._camera.position.set(0,0,1e3),this._camera.updateProjectionMatrix(),document.body.appendChild(this._renderer.domElement),setTimeout(()=>{this._loadResources()},10),this.controls.minDistance=100,this.controls.maxDistance=300}_startTick(){const e=()=>{this.controls.update(),zi.factory.dragonBones.advanceTime(-1),this._renderer.render(this._scene,this._camera),requestAnimationFrame(e)};e()}_loadResources(){for(const e of this._resources)if(e.indexOf("dbbin")>0){const i=new _o;i.setResponseType("arraybuffer"),i.load(e,n=>{this._loadedResources[e]=n})}else if(e.indexOf(".png")>0){const i=new Dm;this._loadedResources[e]=i.load(e)}else{const i=new _o;i.setResponseType("json"),i.load(e,n=>{this._loadedResources[e]=n})}ol.onLoad=()=>{const e=this._loadedResources[kr.BACKGROUND_URL];e.wrapS=Jn,e.wrapT=Jn,this._background.material=new Ji({map:e,side:nr}),this._background.scale.set(e.image.width,e.image.height,1),this._background.position.z=-10,this.add(this._background),this._startTick(),this._onStart()}}get stageWidth(){return this._renderer.getSize(new Et).width}get stageHeight(){return this._renderer.getSize(new Et).height}};let Br=kr;Jt(Br,"BACKGROUND_URL",op);const Ro=""+new URL("lyana_ske-b8f873ed.json",import.meta.url).href,Lo=""+new URL("lyana_tex-6e6b012a.json",import.meta.url).href,Oo=""+new URL("lyana_tex-d22d252b.png",import.meta.url).href;class lp extends Br{constructor(){super();Jt(this,"armatureDisplay");this._resources.push(Ro,Lo,Oo),this.setUpControls()}_onStart(){const e=zi.factory;e.parseDragonBonesData(this._loadedResources[Ro]),e.parseTextureAtlasData(this._loadedResources[Lo],this._loadedResources[Oo]);const i=e.buildArmatureDisplay("Lyana");i!==null&&(i.animation.play("wait",0),i.position.setX(0),i.position.setY(180),this.add(i),this.armatureDisplay=i)}setUpControls(){const e=document.querySelector("#idle");e==null||e.addEventListener("click",()=>{var s;(s=this.armatureDisplay)==null||s.animation.play("wait",0)});const i=document.querySelector("#attack");i==null||i.addEventListener("click",()=>{var s;(s=this.armatureDisplay)==null||s.animation.play("attack",0)});const n=document.querySelector("#move");n==null||n.addEventListener("click",()=>{var s;(s=this.armatureDisplay)==null||s.animation.play("move",0)})}}new lp;
